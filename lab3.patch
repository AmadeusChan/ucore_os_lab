Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/bin/bootblock and lab3/bin/bootblock differ
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/bin/kernel and lab3/bin/kernel differ
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/bin/sign and lab3/bin/sign differ
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/bin/swap.img and lab3/bin/swap.img differ
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/bin/ucore.img and lab3/bin/ucore.img differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/.check_pmm.log lab3/.check_pmm.log
--- /home/amadeus/ucore_os_lab/labcodes/lab3/.check_pmm.log	1970-01-01 08:00:00.000000000 +0800
+++ lab3/.check_pmm.log	2018-03-15 16:57:30.314792316 +0800
@@ -0,0 +1,58 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc0105e42 (phys)
+  edata  0xc0117a36 (phys)
+  end    0xc0118988 (phys)
+Kernel executable memory footprint: 99KB
+ebp:0xc0116f48 eip:0xc0100a52 args:0x00010094 0x00010094 0xc0116f78 0xc01000a9
+    kern/debug/kdebug.c:309: print_stackframe+22
+ebp:0xc0116f58 eip:0xc0100d3e args:0x00000000 0x00000000 0x00000000 0xc0116fc8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0116f78 eip:0xc01000a9 args:0x00000000 0xc0116fa0 0xffff0000 0xc0116fa4
+    kern/init/init.c:49: grade_backtrace2+19
+ebp:0xc0116f98 eip:0xc01000cb args:0x00000000 0xffff0000 0xc0116fc4 0x00000029
+    kern/init/init.c:54: grade_backtrace1+27
+ebp:0xc0116fb8 eip:0xc01000e8 args:0x00000000 0xc010002a 0xffff0000 0xc010006d
+    kern/init/init.c:59: grade_backtrace0+19
+ebp:0xc0116fd8 eip:0xc0100109 args:0x00000000 0x00000000 0x00000000 0xc0105e60
+    kern/init/init.c:64: grade_backtrace+26
+ebp:0xc0116ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00
+    kern/init/init.c:29: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+++ setup timer interrupts
+100 ticks
+End of Test.
+ebp:0xc0116f40 eip:0xc0100a52 args:0xc0116f78 0xc010025f 0xc0116f70 0xc0101e2f
+    kern/debug/kdebug.c:309: print_stackframe+22
+ebp:0xc0116f50 eip:0xc0101888 args:0xc0106191 0xc0116fb4 0x00000000 0x00000400
+    kern/trap/trap.c:18: print_ticks+44
+ebp:0xc0116f70 eip:0xc0101e2f args:0xc0116f9c 0xc0100282 0xc0106176 0xc0116fb4
+    kern/trap/trap.c:167: trap_dispatch+101
+ebp:0xc0116f90 eip:0xc0101eeb args:0xc0116f9c 0x0000807c 0x00010094 0xc0116ff8
+    kern/trap/trap.c:205: trap+16
+ebp:0xc0116ff8 eip:0xc0102977 args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00
+    kern/trap/trapentry.S:24: <unknown>+0
+kernel panic at kern/trap/trap.c:18:
+    EOT: kernel seems ok.
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/.check_swap.log lab3/.check_swap.log
--- /home/amadeus/ucore_os_lab/labcodes/lab3/.check_swap.log	1970-01-01 08:00:00.000000000 +0800
+++ lab3/.check_swap.log	2018-03-16 23:03:50.705052292 +0800
@@ -0,0 +1,108 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc0108899 (phys)
+  edata  0xc0120a60 (phys)
+  end    0xc0121b5c (phys)
+Kernel executable memory footprint: 135KB
+ebp:0xc011ff48 eip:0xc0100a61 args:0x00010094 0x00010094 0xc011ff78 0xc01000b8
+    kern/debug/kdebug.c:309: print_stackframe+22
+ebp:0xc011ff58 eip:0xc0100d4d args:0x00000000 0x00000000 0x00000000 0xc011ffc8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc011ff78 eip:0xc01000b8 args:0x00000000 0xc011ffa0 0xffff0000 0xc011ffa4
+    kern/init/init.c:57: grade_backtrace2+19
+ebp:0xc011ff98 eip:0xc01000da args:0x00000000 0xffff0000 0xc011ffc4 0x0000002a
+    kern/init/init.c:62: grade_backtrace1+27
+ebp:0xc011ffb8 eip:0xc01000f7 args:0x00000000 0xc010002a 0xffff0000 0xc010006d
+    kern/init/init.c:67: grade_backtrace0+19
+ebp:0xc011ffd8 eip:0xc0100118 args:0x00000000 0x00000000 0x00000000 0xc01088a0
+    kern/init/init.c:72: grade_backtrace+26
+ebp:0xc011fff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00
+    kern/init/init.c:32: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31965
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 7
+check_swap() succeeded!
+++ setup timer interrupts
+100 ticks
+End of Test.
+ebp:0xc011ff40 eip:0xc0100a61 args:0xc011ff78 0xc010026e 0xc011ff70 0xc01027bb
+    kern/debug/kdebug.c:309: print_stackframe+22
+ebp:0xc011ff50 eip:0xc01020e2 args:0xc0108cc5 0xc011ffb4 0xffffffff 0xc0128064
+    kern/trap/trap.c:20: print_ticks+44
+ebp:0xc011ff70 eip:0xc01027bb args:0xc011ff9c 0xc0100291 0xc0108caa 0xc011ffb4
+    kern/trap/trap.c:206: trap_dispatch+195
+ebp:0xc011ff90 eip:0xc010287d args:0xc011ff9c 0x0000807c 0x00010094 0xc011fff8
+    kern/trap/trap.c:244: trap+16
+ebp:0xc011fff8 eip:0xc0103309 args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00
+    kern/trap/trapentry.S:24: <unknown>+0
+kernel panic at kern/trap/trap.c:20:
+    EOT: kernel seems ok.
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/.gdb.in lab3/.gdb.in
--- /home/amadeus/ucore_os_lab/labcodes/lab3/.gdb.in	1970-01-01 08:00:00.000000000 +0800
+++ lab3/.gdb.in	2018-03-16 23:03:49.213049469 +0800
@@ -0,0 +1,4 @@
+target remote localhost:1234
+break *0xc010031a
+break *0x0010031a
+continue
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/.gitignore lab3/.gitignore
--- /home/amadeus/ucore_os_lab/labcodes/lab3/.gitignore	1970-01-01 08:00:00.000000000 +0800
+++ lab3/.gitignore	2018-03-15 16:57:30.314792316 +0800
@@ -0,0 +1,8 @@
+bin
+bin/*
+./bin/*
+obj
+obj/*
+./obj/*
+tags
+
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/kern/debug/assert.h lab3/kern/debug/assert.h
--- /home/amadeus/ucore_os_lab/labcodes/lab3/kern/debug/assert.h	2018-03-15 16:55:42.060056646 +0800
+++ lab3/kern/debug/assert.h	2018-03-15 16:57:30.314792316 +0800
@@ -10,6 +10,7 @@
     __warn(__FILE__, __LINE__, __VA_ARGS__)
 
 #define panic(...)                                      \
+    print_stackframe(); 				\
     __panic(__FILE__, __LINE__, __VA_ARGS__)
 
 #define assert(x)                                       \
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/kern/debug/kdebug.c lab3/kern/debug/kdebug.c
--- /home/amadeus/ucore_os_lab/labcodes/lab3/kern/debug/kdebug.c	2018-03-15 16:55:42.060056646 +0800
+++ lab3/kern/debug/kdebug.c	2018-03-15 16:57:30.314792316 +0800
@@ -293,7 +293,7 @@
  * */
 void
 print_stackframe(void) {
-     /* LAB1 YOUR CODE : STEP 1 */
+     /* LAB1 2015011358 : STEP 1 */
      /* (1) call read_ebp() to get the value of ebp. the type is (uint32_t);
       * (2) call read_eip() to get the value of eip. the type is (uint32_t);
       * (3) from 0 .. STACKFRAME_DEPTH
@@ -305,5 +305,15 @@
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
+	uint32_t ebp = read_ebp();
+	uint32_t ra = read_eip(); 
+	for (int i = 0; i < STACKFRAME_DEPTH && ebp != 0; ++ i) {
+		cprintf("ebp:0x%08x eip:0x%08x ", ebp, ra);
+		uint32_t* ptr = (uint32_t *) (ebp + 8);
+		cprintf("args:0x%08x 0x%08x 0x%08x 0x%08x\n", ptr[0], ptr[1], ptr[2], ptr[3]);
+		print_debuginfo(ra - 1);
+		ra = *((uint32_t *) (ebp + 4));
+		ebp = *((uint32_t *) ebp);
+	}
 }
 
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/kern/mm/default_pmm.c lab3/kern/mm/default_pmm.c
--- /home/amadeus/ucore_os_lab/labcodes/lab3/kern/mm/default_pmm.c	2018-03-15 16:55:42.064056596 +0800
+++ lab3/kern/mm/default_pmm.c	2018-03-15 16:57:30.314792316 +0800
@@ -9,7 +9,7 @@
    usually split, and the remainder added to the list as another free block.
    Please see Page 196~198, Section 8.2 of Yan Wei Min's chinese book "Data Structure -- C programming language"
 */
-// LAB2 EXERCISE 1: YOUR CODE
+// LAB2 EXERCISE 1: 2015011358
 // you should rewrite functions: default_init,default_init_memmap,default_alloc_pages, default_free_pages.
 /*
  * Details of FFMA
@@ -73,6 +73,7 @@
         assert(PageReserved(p));
         p->flags = p->property = 0;
         set_page_ref(p, 0);
+	SetPageProperty(p);
     }
     base->property = n;
     SetPageProperty(base);
@@ -82,6 +83,7 @@
 
 static struct Page *
 default_alloc_pages(size_t n) {
+	//cprintf("alloc\n");
     assert(n > 0);
     if (n > nr_free) {
         return NULL;
@@ -96,6 +98,20 @@
         }
     }
     if (page != NULL) {
+	    for (struct Page *p = page; p != (page + n); ++p) {
+		    ClearPageProperty(p);
+	    }
+	    if (page->property > n) {
+		    struct Page *p = page + n;
+		    p->property = page->property - n;
+		    list_add(&(page->page_link), &(p->page_link));
+	    }
+	    list_del(&(page->page_link));
+	    nr_free -= n;
+	    //ClearPageProperty(page);
+    }
+    /*
+    if (page != NULL) {
         list_del(&(page->page_link));
         if (page->property > n) {
             struct Page *p = page + n;
@@ -105,38 +121,52 @@
         nr_free -= n;
         ClearPageProperty(page);
     }
+    */
+	//cprintf("\\alloc\n");
     return page;
 }
 
+static bool
+merge_backward(struct Page *base) {
+	list_entry_t *le = list_next(&(base->page_link));
+	//cprintf("base: %08x le: %08x free_list: %08x\n", &(base->page_link), le, &free_list);
+	if (le == &free_list) return 0;
+	struct Page *p = le2page(le, page_link);
+	if (PageProperty(p) == 0) return 0;
+	if (base + base->property != p) return 0;
+	base->property += p->property;
+	p->property = 0;
+	list_del(le);
+	//cprintf("************ merged! ************\n");
+	return 1;
+}
+
 static void
 default_free_pages(struct Page *base, size_t n) {
+	//cprintf("free\n");
     assert(n > 0);
     struct Page *p = base;
-    for (; p != base + n; p ++) {
+    for (; p != (base + n); p ++) {
         assert(!PageReserved(p) && !PageProperty(p));
-        p->flags = 0;
+	SetPageProperty(p);
         set_page_ref(p, 0);
     }
     base->property = n;
-    SetPageProperty(base);
+    //SetPageProperty(base);
     list_entry_t *le = list_next(&free_list);
-    while (le != &free_list) {
-        p = le2page(le, page_link);
-        le = list_next(le);
-        if (base + base->property == p) {
-            base->property += p->property;
-            ClearPageProperty(p);
-            list_del(&(p->page_link));
-        }
-        else if (p + p->property == base) {
-            p->property += base->property;
-            ClearPageProperty(base);
-            base = p;
-            list_del(&(p->page_link));
-        }
-    }
+    //cprintf("to find position\n");
+    for (; le != (&free_list) && le < (&(base->page_link)); le = list_next(le));
+    //cprintf("found position\n");
+    list_add_before(le, &(base->page_link));
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    //cprintf("to merge backward\n");
+    while (merge_backward(base));
+    //cprintf("merged backward\n");
+    for (list_entry_t *i = list_prev(&(base->page_link)); i!= &free_list; i = list_prev(i)) {
+	    if (!merge_backward(le2page(i, page_link))) break;
+    }
+	//cprintf("\\free\n");
+	
 }
 
 static size_t
@@ -207,6 +237,7 @@
         count ++, total += p->property;
     }
     assert(total == nr_free_pages());
+    //cprintf("count = %08x\n", count);
 
     basic_check();
 
@@ -232,6 +263,7 @@
     p2 = p0 + 1;
     free_page(p0);
     free_pages(p1, 3);
+    //cprintf("%08x %08x\n", PageProperty(p0), p0->property);
     assert(PageProperty(p0) && p0->property == 1);
     assert(PageProperty(p1) && p1->property == 3);
 
@@ -255,7 +287,9 @@
     while ((le = list_next(le)) != &free_list) {
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
+	//cprintf("Page: %08x %08x %08x size: %08x\n", p, p + p->property, PageProperty(p), p->property);
     }
+    //cprintf("count = %08x\n", count);
     assert(count == 0);
     assert(total == 0);
 }
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/kern/mm/pmm.c lab3/kern/mm/pmm.c
--- /home/amadeus/ucore_os_lab/labcodes/lab3/kern/mm/pmm.c	2018-03-15 16:55:42.064056596 +0800
+++ lab3/kern/mm/pmm.c	2018-03-15 16:57:30.314792316 +0800
@@ -309,6 +309,7 @@
     page_init();
 
     //use pmm->check to verify the correctness of the alloc/free function in a pmm
+    //cprintf("to check alloc page\n");
     check_alloc_page();
 
     // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
@@ -360,7 +361,7 @@
 // return vaule: the kernel virtual address of this pte
 pte_t *
 get_pte(pde_t *pgdir, uintptr_t la, bool create) {
-    /* LAB2 EXERCISE 2: YOUR CODE
+    /* LAB2 EXERCISE 2: 2015011358
      *
      * If you need to visit a physical address, please use KADDR()
      * please read pmm.h for useful macros
@@ -392,7 +393,26 @@
                           // (7) set page directory entry's permission
     }
     return NULL;          // (8) return page table entry
-#endif
+#endif 
+    /*
+    pte_t *pt_addr;
+    if (pgdir[(PDX(la))] & PTE_P) {
+	            pt_addr = (pte_t *)(KADDR(pgdir[(PDX(la))] & 0XFFFFF000)); 
+		            return &pt_addr[(PTX(la))]; 
+			        }*/
+    pde_t *pdep = pgdir + PDX(la); // get the page-dir entry
+    //cprintf("%08x\n", *pdep & PTE_P);
+    pte_t *ptep = ((pte_t *) (KADDR(*pdep & ~0XFFF)) + PTX(la));
+    //cprintf("%08x\n", *ptep & PTE_P);
+    if (*pdep & PTE_P) return ptep; // check if the entry is presented
+    if (!create) return NULL; // check if create a new page-table
+    struct Page* pt = alloc_page(); // allocate a page frame for the page-table
+    if (pt == NULL) return NULL;
+    set_page_ref(pt, 1);
+    ptep = KADDR(page2pa(pt)); // get the virtual address of page pt
+    memset(ptep, 0, PGSIZE);
+    *pdep = (page2pa(pt) & ~0XFFF) | PTE_U | PTE_W | PTE_P;
+    return ptep + PTX(la);
 }
 
 //get_page - get related Page struct for linear address la using PDT pgdir
@@ -413,7 +433,7 @@
 //note: PT is changed, so the TLB need to be invalidate 
 static inline void
 page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
-    /* LAB2 EXERCISE 3: YOUR CODE
+    /* LAB2 EXERCISE 3: 2015011358
      *
      * Please check if ptep is valid, and tlb must be manually updated if mapping is updated
      *
@@ -438,6 +458,12 @@
                                   //(6) flush tlb
     }
 #endif
+    assert(*ptep & PTE_P); // check if pte is valid
+    struct Page *page = pte2page(*ptep);
+    page->ref --;
+    if (!page->ref) free_page(page);
+    *ptep &= (~PTE_P);
+    tlb_invalidate(pgdir, la);
 }
 
 //page_remove - free an Page which is related linear address la and has an validated pte
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/kern/mm/pmm.c.orig lab3/kern/mm/pmm.c.orig
--- /home/amadeus/ucore_os_lab/labcodes/lab3/kern/mm/pmm.c.orig	1970-01-01 08:00:00.000000000 +0800
+++ lab3/kern/mm/pmm.c.orig	2018-03-15 16:42:56.093367245 +0800
@@ -0,0 +1,684 @@
+#include <defs.h>
+#include <x86.h>
+#include <stdio.h>
+#include <string.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <pmm.h>
+#include <default_pmm.h>
+#include <sync.h>
+#include <error.h>
+#include <swap.h>
+#include <vmm.h>
+
+/* *
+ * Task State Segment:
+ *
+ * The TSS may reside anywhere in memory. A special segment register called
+ * the Task Register (TR) holds a segment selector that points a valid TSS
+ * segment descriptor which resides in the GDT. Therefore, to use a TSS
+ * the following must be done in function gdt_init:
+ *   - create a TSS descriptor entry in GDT
+ *   - add enough information to the TSS in memory as needed
+ *   - load the TR register with a segment selector for that segment
+ *
+ * There are several fileds in TSS for specifying the new stack pointer when a
+ * privilege level change happens. But only the fields SS0 and ESP0 are useful
+ * in our os kernel.
+ *
+ * The field SS0 contains the stack segment selector for CPL = 0, and the ESP0
+ * contains the new ESP value for CPL = 0. When an interrupt happens in protected
+ * mode, the x86 CPU will look in the TSS for SS0 and ESP0 and load their value
+ * into SS and ESP respectively.
+ * */
+static struct taskstate ts = {0};
+
+// virtual address of physicall page array
+struct Page *pages;
+// amount of physical memory (in pages)
+size_t npage = 0;
+
+// virtual address of boot-time page directory
+pde_t *boot_pgdir = NULL;
+// physical address of boot-time page directory
+uintptr_t boot_cr3;
+
+// physical memory management
+const struct pmm_manager *pmm_manager;
+
+/* *
+ * The page directory entry corresponding to the virtual address range
+ * [VPT, VPT + PTSIZE) points to the page directory itself. Thus, the page
+ * directory is treated as a page table as well as a page directory.
+ *
+ * One result of treating the page directory as a page table is that all PTEs
+ * can be accessed though a "virtual page table" at virtual address VPT. And the
+ * PTE for number n is stored in vpt[n].
+ *
+ * A second consequence is that the contents of the current page directory will
+ * always available at virtual address PGADDR(PDX(VPT), PDX(VPT), 0), to which
+ * vpd is set bellow.
+ * */
+pte_t * const vpt = (pte_t *)VPT;
+pde_t * const vpd = (pde_t *)PGADDR(PDX(VPT), PDX(VPT), 0);
+
+/* *
+ * Global Descriptor Table:
+ *
+ * The kernel and user segments are identical (except for the DPL). To load
+ * the %ss register, the CPL must equal the DPL. Thus, we must duplicate the
+ * segments for the user and the kernel. Defined as follows:
+ *   - 0x0 :  unused (always faults -- for trapping NULL far pointers)
+ *   - 0x8 :  kernel code segment
+ *   - 0x10:  kernel data segment
+ *   - 0x18:  user code segment
+ *   - 0x20:  user data segment
+ *   - 0x28:  defined for tss, initialized in gdt_init
+ * */
+static struct segdesc gdt[] = {
+    SEG_NULL,
+    [SEG_KTEXT] = SEG(STA_X | STA_R, 0x0, 0xFFFFFFFF, DPL_KERNEL),
+    [SEG_KDATA] = SEG(STA_W, 0x0, 0xFFFFFFFF, DPL_KERNEL),
+    [SEG_UTEXT] = SEG(STA_X | STA_R, 0x0, 0xFFFFFFFF, DPL_USER),
+    [SEG_UDATA] = SEG(STA_W, 0x0, 0xFFFFFFFF, DPL_USER),
+    [SEG_TSS]   = SEG_NULL,
+};
+
+static struct pseudodesc gdt_pd = {
+    sizeof(gdt) - 1, (uintptr_t)gdt
+};
+
+static void check_alloc_page(void);
+static void check_pgdir(void);
+static void check_boot_pgdir(void);
+
+/* *
+ * lgdt - load the global descriptor table register and reset the
+ * data/code segement registers for kernel.
+ * */
+static inline void
+lgdt(struct pseudodesc *pd) {
+    asm volatile ("lgdt (%0)" :: "r" (pd));
+    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
+    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
+    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
+    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
+    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
+    // reload cs
+    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
+}
+
+/* *
+ * load_esp0 - change the ESP0 in default task state segment,
+ * so that we can use different kernel stack when we trap frame
+ * user to kernel.
+ * */
+void
+load_esp0(uintptr_t esp0) {
+    ts.ts_esp0 = esp0;
+}
+
+/* gdt_init - initialize the default GDT and TSS */
+static void
+gdt_init(void) {
+    // set boot kernel stack and default SS0
+    load_esp0((uintptr_t)bootstacktop);
+    ts.ts_ss0 = KERNEL_DS;
+
+    // initialize the TSS filed of the gdt
+    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
+
+    // reload all segment registers
+    lgdt(&gdt_pd);
+
+    // load the TSS
+    ltr(GD_TSS);
+}
+
+//init_pmm_manager - initialize a pmm_manager instance
+static void
+init_pmm_manager(void) {
+    pmm_manager = &default_pmm_manager;
+    cprintf("memory management: %s\n", pmm_manager->name);
+    pmm_manager->init();
+}
+
+//init_memmap - call pmm->init_memmap to build Page struct for free memory  
+static void
+init_memmap(struct Page *base, size_t n) {
+    pmm_manager->init_memmap(base, n);
+}
+
+//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
+struct Page *
+alloc_pages(size_t n) {
+    struct Page *page=NULL;
+    bool intr_flag;
+    
+    while (1)
+    {
+         local_intr_save(intr_flag);
+         {
+              page = pmm_manager->alloc_pages(n);
+         }
+         local_intr_restore(intr_flag);
+
+         if (page != NULL || n > 1 || swap_init_ok == 0) break;
+         
+         extern struct mm_struct *check_mm_struct;
+         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
+         swap_out(check_mm_struct, n, 0);
+    }
+    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
+    return page;
+}
+
+//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
+void
+free_pages(struct Page *base, size_t n) {
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        pmm_manager->free_pages(base, n);
+    }
+    local_intr_restore(intr_flag);
+}
+
+//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
+//of current free memory
+size_t
+nr_free_pages(void) {
+    size_t ret;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        ret = pmm_manager->nr_free_pages();
+    }
+    local_intr_restore(intr_flag);
+    return ret;
+}
+
+/* pmm_init - initialize the physical memory management */
+static void
+page_init(void) {
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+    uint64_t maxpa = 0;
+
+    cprintf("e820map:\n");
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
+                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
+        if (memmap->map[i].type == E820_ARM) {
+            if (maxpa < end && begin < KMEMSIZE) {
+                maxpa = end;
+            }
+        }
+    }
+    if (maxpa > KMEMSIZE) {
+        maxpa = KMEMSIZE;
+    }
+
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+
+    for (i = 0; i < npage; i ++) {
+        SetPageReserved(pages + i);
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+
+    for (i = 0; i < memmap->nr_map; i ++) {
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+        if (memmap->map[i].type == E820_ARM) {
+            if (begin < freemem) {
+                begin = freemem;
+            }
+            if (end > KMEMSIZE) {
+                end = KMEMSIZE;
+            }
+            if (begin < end) {
+                begin = ROUNDUP(begin, PGSIZE);
+                end = ROUNDDOWN(end, PGSIZE);
+                if (begin < end) {
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+                }
+            }
+        }
+    }
+}
+
+static void
+enable_paging(void) {
+    lcr3(boot_cr3);
+
+    // turn on paging
+    uint32_t cr0 = rcr0();
+    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
+    cr0 &= ~(CR0_TS | CR0_EM);
+    lcr0(cr0);
+}
+
+//boot_map_segment - setup&enable the paging mechanism
+// parameters
+//  la:   linear address of this memory need to map (after x86 segment map)
+//  size: memory size
+//  pa:   physical address of this memory
+//  perm: permission of this memory  
+static void
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+    assert(PGOFF(la) == PGOFF(pa));
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+    la = ROUNDDOWN(la, PGSIZE);
+    pa = ROUNDDOWN(pa, PGSIZE);
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+        pte_t *ptep = get_pte(pgdir, la, 1);
+        assert(ptep != NULL);
+        *ptep = pa | PTE_P | perm;
+    }
+}
+
+//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
+// return value: the kernel virtual address of this allocated page
+//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
+static void *
+boot_alloc_page(void) {
+    struct Page *p = alloc_page();
+    if (p == NULL) {
+        panic("boot_alloc_page failed.\n");
+    }
+    return page2kva(p);
+}
+
+//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
+//         - check the correctness of pmm & paging mechanism, print PDT&PT
+void
+pmm_init(void) {
+    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
+    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
+    //First we should init a physical memory manager(pmm) based on the framework.
+    //Then pmm can alloc/free the physical memory. 
+    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
+    init_pmm_manager();
+
+    // detect physical memory space, reserve already used memory,
+    // then use pmm->init_memmap to create free page list
+    page_init();
+
+    //use pmm->check to verify the correctness of the alloc/free function in a pmm
+    check_alloc_page();
+
+    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
+    boot_pgdir = boot_alloc_page();
+    memset(boot_pgdir, 0, PGSIZE);
+    boot_cr3 = PADDR(boot_pgdir);
+
+    check_pgdir();
+
+    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
+
+    // recursively insert boot_pgdir in itself
+    // to form a virtual page table at virtual address VPT
+    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
+
+    // map all physical memory to linear memory with base linear addr KERNBASE
+    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
+    //But shouldn't use this map until enable_paging() & gdt_init() finished.
+    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
+
+    //temporary map: 
+    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
+    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
+
+    enable_paging();
+
+    //reload gdt(third time,the last time) to map all physical memory
+    //virtual_addr 0~4G=liear_addr 0~4G
+    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
+    gdt_init();
+
+    //disable the map of virtual_addr 0~4M
+    boot_pgdir[0] = 0;
+
+    //now the basic virtual memory map(see memalyout.h) is established.
+    //check the correctness of the basic virtual memory map.
+    check_boot_pgdir();
+
+    print_pgdir();
+
+}
+
+//get_pte - get pte and return the kernel virtual address of this pte for la
+//        - if the PT contians this pte didn't exist, alloc a page for PT
+// parameter:
+//  pgdir:  the kernel virtual base address of PDT
+//  la:     the linear address need to map
+//  create: a logical value to decide if alloc a page for PT
+// return vaule: the kernel virtual address of this pte
+pte_t *
+get_pte(pde_t *pgdir, uintptr_t la, bool create) {
+    /* LAB2 EXERCISE 2: YOUR CODE
+     *
+     * If you need to visit a physical address, please use KADDR()
+     * please read pmm.h for useful macros
+     *
+     * Maybe you want help comment, BELOW comments can help you finish the code
+     *
+     * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+     * MACROs or Functions:
+     *   PDX(la) = the index of page directory entry of VIRTUAL ADDRESS la.
+     *   KADDR(pa) : takes a physical address and returns the corresponding kernel virtual address.
+     *   set_page_ref(page,1) : means the page be referenced by one time
+     *   page2pa(page): get the physical address of memory which this (struct Page *) page  manages
+     *   struct Page * alloc_page() : allocation a page
+     *   memset(void *s, char c, size_t n) : sets the first n bytes of the memory area pointed by s
+     *                                       to the specified value c.
+     * DEFINEs:
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
+     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
+     */
+#if 0
+    pde_t *pdep = NULL;   // (1) find page directory entry
+    if (0) {              // (2) check if entry is not present
+                          // (3) check if creating is needed, then alloc page for page table
+                          // CAUTION: this page is used for page table, not for common data page
+                          // (4) set page reference
+        uintptr_t pa = 0; // (5) get linear address of page
+                          // (6) clear page content using memset
+                          // (7) set page directory entry's permission
+    }
+    return NULL;          // (8) return page table entry
+#endif
+}
+
+//get_page - get related Page struct for linear address la using PDT pgdir
+struct Page *
+get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
+    pte_t *ptep = get_pte(pgdir, la, 0);
+    if (ptep_store != NULL) {
+        *ptep_store = ptep;
+    }
+    if (ptep != NULL && *ptep & PTE_P) {
+        return pte2page(*ptep);
+    }
+    return NULL;
+}
+
+//page_remove_pte - free an Page sturct which is related linear address la
+//                - and clean(invalidate) pte which is related linear address la
+//note: PT is changed, so the TLB need to be invalidate 
+static inline void
+page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
+    /* LAB2 EXERCISE 3: YOUR CODE
+     *
+     * Please check if ptep is valid, and tlb must be manually updated if mapping is updated
+     *
+     * Maybe you want help comment, BELOW comments can help you finish the code
+     *
+     * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+     * MACROs or Functions:
+     *   struct Page *page pte2page(*ptep): get the according page from the value of a ptep
+     *   free_page : free a page
+     *   page_ref_dec(page) : decrease page->ref. NOTICE: ff page->ref == 0 , then this page should be free.
+     *   tlb_invalidate(pde_t *pgdir, uintptr_t la) : Invalidate a TLB entry, but only if the page tables being
+     *                        edited are the ones currently in use by the processor.
+     * DEFINEs:
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     */
+#if 0
+    if (0) {                      //(1) check if this page table entry is present
+        struct Page *page = NULL; //(2) find corresponding page to pte
+                                  //(3) decrease page reference
+                                  //(4) and free this page when page reference reachs 0
+                                  //(5) clear second page table entry
+                                  //(6) flush tlb
+    }
+#endif
+}
+
+//page_remove - free an Page which is related linear address la and has an validated pte
+void
+page_remove(pde_t *pgdir, uintptr_t la) {
+    pte_t *ptep = get_pte(pgdir, la, 0);
+    if (ptep != NULL) {
+        page_remove_pte(pgdir, la, ptep);
+    }
+}
+
+//page_insert - build the map of phy addr of an Page with the linear addr la
+// paramemters:
+//  pgdir: the kernel virtual base address of PDT
+//  page:  the Page which need to map
+//  la:    the linear address need to map
+//  perm:  the permission of this Page which is setted in related pte
+// return value: always 0
+//note: PT is changed, so the TLB need to be invalidate 
+int
+page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
+    pte_t *ptep = get_pte(pgdir, la, 1);
+    if (ptep == NULL) {
+        return -E_NO_MEM;
+    }
+    page_ref_inc(page);
+    if (*ptep & PTE_P) {
+        struct Page *p = pte2page(*ptep);
+        if (p == page) {
+            page_ref_dec(page);
+        }
+        else {
+            page_remove_pte(pgdir, la, ptep);
+        }
+    }
+    *ptep = page2pa(page) | PTE_P | perm;
+    tlb_invalidate(pgdir, la);
+    return 0;
+}
+
+// invalidate a TLB entry, but only if the page tables being
+// edited are the ones currently in use by the processor.
+void
+tlb_invalidate(pde_t *pgdir, uintptr_t la) {
+    if (rcr3() == PADDR(pgdir)) {
+        invlpg((void *)la);
+    }
+}
+
+// pgdir_alloc_page - call alloc_page & page_insert functions to 
+//                  - allocate a page size memory & setup an addr map
+//                  - pa<->la with linear address la and the PDT pgdir
+struct Page *
+pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
+    struct Page *page = alloc_page();
+    if (page != NULL) {
+        if (page_insert(pgdir, page, la, perm) != 0) {
+            free_page(page);
+            return NULL;
+        }
+        if (swap_init_ok){
+            swap_map_swappable(check_mm_struct, la, page, 0);
+            page->pra_vaddr=la;
+            assert(page_ref(page) == 1);
+            //cprintf("get No. %d  page: pra_vaddr %x, pra_link.prev %x, pra_link_next %x in pgdir_alloc_page\n", (page-pages), page->pra_vaddr,page->pra_page_link.prev, page->pra_page_link.next);
+        }
+
+    }
+
+    return page;
+}
+
+static void
+check_alloc_page(void) {
+    pmm_manager->check();
+    cprintf("check_alloc_page() succeeded!\n");
+}
+
+static void
+check_pgdir(void) {
+    assert(npage <= KMEMSIZE / PGSIZE);
+    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
+    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
+
+    struct Page *p1, *p2;
+    p1 = alloc_page();
+    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
+
+    pte_t *ptep;
+    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
+    assert(pte2page(*ptep) == p1);
+    assert(page_ref(p1) == 1);
+
+    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
+    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
+
+    p2 = alloc_page();
+    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+    assert(*ptep & PTE_U);
+    assert(*ptep & PTE_W);
+    assert(boot_pgdir[0] & PTE_U);
+    assert(page_ref(p2) == 1);
+
+    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
+    assert(page_ref(p1) == 2);
+    assert(page_ref(p2) == 0);
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+    assert(pte2page(*ptep) == p1);
+    assert((*ptep & PTE_U) == 0);
+
+    page_remove(boot_pgdir, 0x0);
+    assert(page_ref(p1) == 1);
+    assert(page_ref(p2) == 0);
+
+    page_remove(boot_pgdir, PGSIZE);
+    assert(page_ref(p1) == 0);
+    assert(page_ref(p2) == 0);
+
+    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
+    free_page(pde2page(boot_pgdir[0]));
+    boot_pgdir[0] = 0;
+
+    cprintf("check_pgdir() succeeded!\n");
+}
+
+static void
+check_boot_pgdir(void) {
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+        assert(PTE_ADDR(*ptep) == i);
+    }
+
+    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
+
+    assert(boot_pgdir[0] == 0);
+
+    struct Page *p;
+    p = alloc_page();
+    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
+    assert(page_ref(p) == 1);
+    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
+    assert(page_ref(p) == 2);
+
+    const char *str = "ucore: Hello world!!";
+    strcpy((void *)0x100, str);
+    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
+
+    *(char *)(page2kva(p) + 0x100) = '\0';
+    assert(strlen((const char *)0x100) == 0);
+
+    free_page(p);
+    free_page(pde2page(boot_pgdir[0]));
+    boot_pgdir[0] = 0;
+
+    cprintf("check_boot_pgdir() succeeded!\n");
+}
+
+//perm2str - use string 'u,r,w,-' to present the permission
+static const char *
+perm2str(int perm) {
+    static char str[4];
+    str[0] = (perm & PTE_U) ? 'u' : '-';
+    str[1] = 'r';
+    str[2] = (perm & PTE_W) ? 'w' : '-';
+    str[3] = '\0';
+    return str;
+}
+
+//get_pgtable_items - In [left, right] range of PDT or PT, find a continuous linear addr space
+//                  - (left_store*X_SIZE~right_store*X_SIZE) for PDT or PT
+//                  - X_SIZE=PTSIZE=4M, if PDT; X_SIZE=PGSIZE=4K, if PT
+// paramemters:
+//  left:        no use ???
+//  right:       the high side of table's range
+//  start:       the low side of table's range
+//  table:       the beginning addr of table
+//  left_store:  the pointer of the high side of table's next range
+//  right_store: the pointer of the low side of table's next range
+// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+    if (start >= right) {
+        return 0;
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+        start ++;
+    }
+    if (start < right) {
+        if (left_store != NULL) {
+            *left_store = start;
+        }
+        int perm = (table[start ++] & PTE_USER);
+        while (start < right && (table[start] & PTE_USER) == perm) {
+            start ++;
+        }
+        if (right_store != NULL) {
+            *right_store = start;
+        }
+        return perm;
+    }
+    return 0;
+}
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+        }
+    }
+    cprintf("--------------------- END ---------------------\n");
+}
+
+void *
+kmalloc(size_t n) {
+    void * ptr=NULL;
+    struct Page *base=NULL;
+    assert(n > 0 && n < 1024*0124);
+    int num_pages=(n+PGSIZE-1)/PGSIZE;
+    base = alloc_pages(num_pages);
+    assert(base != NULL);
+    ptr=page2kva(base);
+    return ptr;
+}
+
+void 
+kfree(void *ptr, size_t n) {
+    assert(n > 0 && n < 1024*0124);
+    assert(ptr != NULL);
+    struct Page *base=NULL;
+    int num_pages=(n+PGSIZE-1)/PGSIZE;
+    base = kva2page(ptr);
+    free_pages(base, num_pages);
+}
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/kern/mm/swap_fifo.c lab3/kern/mm/swap_fifo.c
--- /home/amadeus/ucore_os_lab/labcodes/lab3/kern/mm/swap_fifo.c	2018-03-15 16:55:42.064056596 +0800
+++ lab3/kern/mm/swap_fifo.c	2018-03-16 22:02:38.820387425 +0800
@@ -49,8 +49,9 @@
  
     assert(entry != NULL && head != NULL);
     //record the page access situlation
-    /*LAB3 EXERCISE 2: YOUR CODE*/ 
+    /*LAB3 EXERCISE 2: 2015011358*/ 
     //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add_before(head, entry);
     return 0;
 }
 /*
@@ -64,9 +65,14 @@
          assert(head != NULL);
      assert(in_tick==0);
      /* Select the victim */
-     /*LAB3 EXERCISE 2: YOUR CODE*/ 
+     /*LAB3 EXERCISE 2: 2015011358*/ 
      //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
      //(2)  set the addr of addr of this page to ptr_page
+     list_entry_t *le = list_next(head);
+     assert(le != head); // assert that the queue is not empty
+     struct Page *page = le2page(le, pra_page_link);
+     list_del(le);
+     *ptr_page = page;
      return 0;
 }
 
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/kern/mm/vmm.c lab3/kern/mm/vmm.c
--- /home/amadeus/ucore_os_lab/labcodes/lab3/kern/mm/vmm.c	2018-03-15 16:55:42.064056596 +0800
+++ lab3/kern/mm/vmm.c	2018-03-16 22:12:26.110930873 +0800
@@ -347,13 +347,13 @@
     ret = -E_NO_MEM;
 
     pte_t *ptep=NULL;
-    /*LAB3 EXERCISE 1: YOUR CODE
+    /*LAB3 EXERCISE 1: 2015011358
     * Maybe you want help comment, BELOW comments can help you finish the code
     *
     * Some Useful MACROs and DEFINEs, you can use them in below implementation.
     * MACROs or Functions:
     *   get_pte : get an pte and return the kernel virtual address of this pte for la
-    *             if the PT contians this pte didn't exist, alloc a page for PT (notice the 3th parameter '1')
+    *             if the PT contains this pte didn't exist, alloc a page for PT (notice the 3th parameter '1')
     *   pgdir_alloc_page : call alloc_page & page_insert functions to allocate a page size memory & setup
     *             an addr map pa<--->la with linear address la and the PDT pgdir
     * DEFINES:
@@ -365,14 +365,14 @@
     *
     */
 #if 0
-    /*LAB3 EXERCISE 1: YOUR CODE*/
+    /*LAB3 EXERCISE 1: 2015011358*/
     ptep = ???              //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
     if (*ptep == 0) {
                             //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
 
     }
     else {
-    /*LAB3 EXERCISE 2: YOUR CODE
+    /*LAB3 EXERCISE 2: 2015011358
     * Now we think this pte is a  swap entry, we should load data from disk to a page with phy addr,
     * and map the phy addr with logical addr, trigger swap manager to record the access situation of this page.
     *
@@ -396,6 +396,22 @@
         }
    }
 #endif
+    ptep = get_pte(mm->pgdir, addr, 1);
+    if (*ptep == 0) {
+	    struct Page* page = pgdir_alloc_page(mm->pgdir, addr, perm);
+    } else {
+	    if (swap_init_ok) {
+		    struct Page *page = NULL;
+		    swap_in(mm, addr, &page);
+		    page_insert(mm->pgdir, page, addr, perm);
+		    swap_map_swappable(mm, addr, page, 1);
+		    page->pra_vaddr = addr; // it seems not reasonble that this statement doesn't exist in page_insert() function
+	    } else {
+            	cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            	goto failed;
+	    }
+    }
+
    ret = 0;
 failed:
     return ret;
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/kern/trap/trap.c lab3/kern/trap/trap.c
--- /home/amadeus/ucore_os_lab/labcodes/lab3/kern/trap/trap.c	2018-03-15 16:55:42.064056596 +0800
+++ lab3/kern/trap/trap.c	2018-03-16 23:03:47.177045618 +0800
@@ -36,7 +36,7 @@
 /* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
 void
 idt_init(void) {
-     /* LAB1 YOUR CODE : STEP 2 */
+     /* LAB1 2015011358: STEP 2 */
      /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
       *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
       *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
@@ -48,6 +48,18 @@
       *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
       *     Notice: the argument of lidt is idt_pd. try to find it!
       */
+	extern uintptr_t __vectors[];
+	uint32_t kcs = GD_KTEXT; // kernel OS code segment selector
+	for (int i = 0; i < 256; ++ i) {
+		if (i == T_SYSCALL) {
+			SETGATE(idt[i], 1, kcs, __vectors[i], DPL_USER);
+		} else {
+			SETGATE(idt[i], 0, kcs, __vectors[i], DPL_KERNEL);
+		}
+	}
+	// challenge 1: 
+	SETGATE(idt[T_SWITCH_TOK], 1, kcs, __vectors[T_SWITCH_TOK], DPL_USER);
+	lidt(&idt_pd);
 }
 
 static const char *
@@ -162,6 +174,8 @@
 static volatile int in_swap_tick_event = 0;
 extern struct mm_struct *check_mm_struct;
 
+static uint32_t clock_count = 0;
+
 static void
 trap_dispatch(struct trapframe *tf) {
     char c;
@@ -180,12 +194,18 @@
     LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages, 
     then you can add code here. 
 #endif
-        /* LAB1 YOUR CODE : STEP 3 */
+        /* LAB1 2015011358 : STEP 3 */
         /* handle the timer interrupt */
         /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
          * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
          * (3) Too Simple? Yes, I think so!
          */
+	    clock_count ++;
+	    if (clock_count == TICK_NUM) {
+		    clock_count = 0;
+		    print_ticks();
+		    //print_trapframe(tf);
+	    }
         break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/kern/trap/trap.c.orig lab3/kern/trap/trap.c.orig
--- /home/amadeus/ucore_os_lab/labcodes/lab3/kern/trap/trap.c.orig	1970-01-01 08:00:00.000000000 +0800
+++ lab3/kern/trap/trap.c.orig	2018-03-15 16:42:56.093367245 +0800
@@ -0,0 +1,226 @@
+#include <defs.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <clock.h>
+#include <trap.h>
+#include <x86.h>
+#include <stdio.h>
+#include <assert.h>
+#include <console.h>
+#include <vmm.h>
+#include <swap.h>
+#include <kdebug.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+    cprintf("%d ticks\n",TICK_NUM);
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+    panic("EOT: kernel seems ok.");
+#endif
+}
+
+/* *
+ * Interrupt descriptor table:
+ *
+ * Must be built at run time because shifted function addresses can't
+ * be represented in relocation records.
+ * */
+static struct gatedesc idt[256] = {{0}};
+
+static struct pseudodesc idt_pd = {
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+     /* LAB1 YOUR CODE : STEP 2 */
+     /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
+      *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
+      *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
+      *     (try "make" command in lab1, then you will find vector.S in kern/trap DIR)
+      *     You can use  "extern uintptr_t __vectors[];" to define this extern variable which will be used later.
+      * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).
+      *     Can you see idt[256] in this file? Yes, it's IDT! you can use SETGATE macro to setup each item of IDT
+      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+}
+
+static const char *
+trapname(int trapno) {
+    static const char * const excnames[] = {
+        "Divide error",
+        "Debug",
+        "Non-Maskable Interrupt",
+        "Breakpoint",
+        "Overflow",
+        "BOUND Range Exceeded",
+        "Invalid Opcode",
+        "Device Not Available",
+        "Double Fault",
+        "Coprocessor Segment Overrun",
+        "Invalid TSS",
+        "Segment Not Present",
+        "Stack Fault",
+        "General Protection",
+        "Page Fault",
+        "(unknown trap)",
+        "x87 FPU Floating-Point Error",
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+        return excnames[trapno];
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+        return "Hardware Interrupt";
+    }
+    return "(unknown trap)";
+}
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+}
+
+static const char *IA32flags[] = {
+    "CF", NULL, "PF", NULL, "AF", NULL, "ZF", "SF",
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+    cprintf("trapframe at %p\n", tf);
+    print_regs(&tf->tf_regs);
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+    cprintf("  err  0x%08x\n", tf->tf_err);
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+
+    if (!trap_in_kernel(tf)) {
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+    }
+}
+
+void
+print_regs(struct pushregs *regs) {
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+}
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+
+static int
+pgfault_handler(struct trapframe *tf) {
+    extern struct mm_struct *check_mm_struct;
+    print_pgfault(tf);
+    if (check_mm_struct != NULL) {
+        return do_pgfault(check_mm_struct, tf->tf_err, rcr2());
+    }
+    panic("unhandled page fault.\n");
+}
+
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+
+static void
+trap_dispatch(struct trapframe *tf) {
+    char c;
+
+    int ret;
+
+    switch (tf->tf_trapno) {
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+            print_trapframe(tf);
+            panic("handle pgfault failed. %e\n", ret);
+        }
+        break;
+    case IRQ_OFFSET + IRQ_TIMER:
+#if 0
+    LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages, 
+    then you can add code here. 
+#endif
+        /* LAB1 YOUR CODE : STEP 3 */
+        /* handle the timer interrupt */
+        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+         * (3) Too Simple? Yes, I think so!
+         */
+        break;
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+        cprintf("serial [%03d] %c\n", c, c);
+        break;
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+        cprintf("kbd [%03d] %c\n", c, c);
+        break;
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    case T_SWITCH_TOK:
+        panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        // in kernel, it must be a mistake
+        if ((tf->tf_cs & 3) == 0) {
+            print_trapframe(tf);
+            panic("unexpected trap in kernel.\n");
+        }
+    }
+}
+
+/* *
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+    // dispatch based on what type of trap occurred
+    trap_dispatch(tf);
+}
+
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/kern/trap/trap.c.rej lab3/kern/trap/trap.c.rej
--- /home/amadeus/ucore_os_lab/labcodes/lab3/kern/trap/trap.c.rej	1970-01-01 08:00:00.000000000 +0800
+++ lab3/kern/trap/trap.c.rej	2018-03-15 16:57:30.318792273 +0800
@@ -0,0 +1,31 @@
+--- home/amadeus/ucore_os_lab/labcodes/lab2/kern/trap/trap.c	2018-03-15 16:55:42.060056646 +0800
++++ kern/trap/trap.c	2018-03-15 16:25:42.563288871 +0800
+@@ -146,6 +158,8 @@
+     cprintf("  eax  0x%08x\n", regs->reg_eax);
+ }
+ 
++static uint32_t clock_count = 0;
++
+ /* trap_dispatch - dispatch based on what type of trap occurred */
+ static void
+ trap_dispatch(struct trapframe *tf) {
+@@ -153,12 +167,18 @@
+ 
+     switch (tf->tf_trapno) {
+     case IRQ_OFFSET + IRQ_TIMER:
+-        /* LAB1 YOUR CODE : STEP 3 */
++        /* LAB1 2015011358 : STEP 3 */
+         /* handle the timer interrupt */
+         /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+          * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+          * (3) Too Simple? Yes, I think so!
+          */
++	    clock_count ++;
++	    if (clock_count == TICK_NUM) {
++		    clock_count = 0;
++		    print_ticks();
++		    //print_trapframe(tf);
++	    }
+         break;
+     case IRQ_OFFSET + IRQ_COM1:
+         c = cons_getc();
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/boot/bootasm.d lab3/obj/boot/bootasm.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/boot/bootasm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/boot/bootasm.d	2018-03-16 23:03:47.329045906 +0800
@@ -0,0 +1 @@
+obj/boot/bootasm.o obj/boot/bootasm.d: boot/bootasm.S boot/asm.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/boot/bootasm.o and lab3/obj/boot/bootasm.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/boot/bootmain.d lab3/obj/boot/bootmain.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/boot/bootmain.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/boot/bootmain.d	2018-03-16 23:03:47.325045898 +0800
@@ -0,0 +1,2 @@
+obj/boot/bootmain.o obj/boot/bootmain.d: boot/bootmain.c libs/defs.h \
+ libs/x86.h libs/elf.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/boot/bootmain.o and lab3/obj/boot/bootmain.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/bootblock.asm lab3/obj/bootblock.asm
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/bootblock.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/bootblock.asm	2018-03-16 23:03:48.161047479 +0800
@@ -0,0 +1,406 @@
+
+obj/bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .startup:
+
+00007c00 <start>:
+
+# start address should be 0:7c00, in real mode, the beginning address of the running bootloader
+.globl start
+start:
+.code16                                             # Assemble for 16-bit mode
+    cli                                             # Disable interrupts
+    7c00:	fa                   	cli    
+    cld                                             # String operations increment
+    7c01:	fc                   	cld    
+
+    # Set up the important data segment registers (DS, ES, SS).
+    xorw %ax, %ax                                   # Segment number zero
+    7c02:	31 c0                	xor    %eax,%eax
+    movw %ax, %ds                                   # -> Data Segment
+    7c04:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> Extra Segment
+    7c06:	8e c0                	mov    %eax,%es
+    movw %ax, %ss                                   # -> Stack Segment
+    7c08:	8e d0                	mov    %eax,%ss
+
+00007c0a <seta20.1>:
+    # Enable A20:
+    #  For backwards compatibility with the earliest PCs, physical
+    #  address line 20 is tied low, so that addresses higher than
+    #  1MB wrap around to zero by default. This code undoes this.
+seta20.1:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c0a:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c0c:	a8 02                	test   $0x2,%al
+    jnz seta20.1
+    7c0e:	75 fa                	jne    7c0a <seta20.1>
+
+    movb $0xd1, %al                                 # 0xd1 -> port 0x64
+    7c10:	b0 d1                	mov    $0xd1,%al
+    outb %al, $0x64                                 # 0xd1 means: write data to 8042's P2 port
+    7c12:	e6 64                	out    %al,$0x64
+
+00007c14 <seta20.2>:
+
+seta20.2:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c14:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c16:	a8 02                	test   $0x2,%al
+    jnz seta20.2
+    7c18:	75 fa                	jne    7c14 <seta20.2>
+
+    movb $0xdf, %al                                 # 0xdf -> port 0x60
+    7c1a:	b0 df                	mov    $0xdf,%al
+    outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
+    7c1c:	e6 60                	out    %al,$0x60
+
+00007c1e <probe_memory>:
+
+probe_memory:
+    movl $0, 0x8000
+    7c1e:	66 c7 06 00 80       	movw   $0x8000,(%esi)
+    7c23:	00 00                	add    %al,(%eax)
+    7c25:	00 00                	add    %al,(%eax)
+    xorl %ebx, %ebx
+    7c27:	66 31 db             	xor    %bx,%bx
+    movw $0x8004, %di
+    7c2a:	bf                   	.byte 0xbf
+    7c2b:	04 80                	add    $0x80,%al
+
+00007c2d <start_probe>:
+start_probe:
+    movl $0xE820, %eax
+    7c2d:	66 b8 20 e8          	mov    $0xe820,%ax
+    7c31:	00 00                	add    %al,(%eax)
+    movl $20, %ecx
+    7c33:	66 b9 14 00          	mov    $0x14,%cx
+    7c37:	00 00                	add    %al,(%eax)
+    movl $SMAP, %edx
+    7c39:	66 ba 50 41          	mov    $0x4150,%dx
+    7c3d:	4d                   	dec    %ebp
+    7c3e:	53                   	push   %ebx
+    int $0x15
+    7c3f:	cd 15                	int    $0x15
+    jnc cont
+    7c41:	73 08                	jae    7c4b <cont>
+    movw $12345, 0x8000
+    7c43:	c7 06 00 80 39 30    	movl   $0x30398000,(%esi)
+    jmp finish_probe
+    7c49:	eb 0e                	jmp    7c59 <finish_probe>
+
+00007c4b <cont>:
+cont:
+    addw $20, %di
+    7c4b:	83 c7 14             	add    $0x14,%edi
+    incl 0x8000
+    7c4e:	66 ff 06             	incw   (%esi)
+    7c51:	00 80 66 83 fb 00    	add    %al,0xfb8366(%eax)
+    cmpl $0, %ebx
+    jnz start_probe
+    7c57:	75 d4                	jne    7c2d <start_probe>
+
+00007c59 <finish_probe>:
+
+    # Switch from real to protected mode, using a bootstrap GDT
+    # and segment translation that makes virtual addresses
+    # identical to physical addresses, so that the
+    # effective memory map does not change during the switch.
+    lgdt gdtdesc
+    7c59:	0f 01 16             	lgdtl  (%esi)
+    7c5c:	b4 7d                	mov    $0x7d,%ah
+    movl %cr0, %eax
+    7c5e:	0f 20 c0             	mov    %cr0,%eax
+    orl $CR0_PE_ON, %eax
+    7c61:	66 83 c8 01          	or     $0x1,%ax
+    movl %eax, %cr0
+    7c65:	0f 22 c0             	mov    %eax,%cr0
+
+    # Jump to next instruction, but in 32-bit code segment.
+    # Switches processor into 32-bit mode.
+    ljmp $PROT_MODE_CSEG, $protcseg
+    7c68:	ea                   	.byte 0xea
+    7c69:	6d                   	insl   (%dx),%es:(%edi)
+    7c6a:	7c 08                	jl     7c74 <protcseg+0x7>
+	...
+
+00007c6d <protcseg>:
+
+.code32                                             # Assemble for 32-bit mode
+protcseg:
+    # Set up the protected-mode data segment registers
+    movw $PROT_MODE_DSEG, %ax                       # Our data segment selector
+    7c6d:	66 b8 10 00          	mov    $0x10,%ax
+    movw %ax, %ds                                   # -> DS: Data Segment
+    7c71:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> ES: Extra Segment
+    7c73:	8e c0                	mov    %eax,%es
+    movw %ax, %fs                                   # -> FS
+    7c75:	8e e0                	mov    %eax,%fs
+    movw %ax, %gs                                   # -> GS
+    7c77:	8e e8                	mov    %eax,%gs
+    movw %ax, %ss                                   # -> SS: Stack Segment
+    7c79:	8e d0                	mov    %eax,%ss
+
+    # Set up the stack pointer and call into C. The stack region is from 0--start(0x7c00)
+    movl $0x0, %ebp
+    7c7b:	bd 00 00 00 00       	mov    $0x0,%ebp
+    movl $start, %esp
+    7c80:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+    call bootmain
+    7c85:	e8 9d 00 00 00       	call   7d27 <bootmain>
+
+00007c8a <spin>:
+
+    # If bootmain returns (it shouldn't), loop.
+spin:
+    jmp spin
+    7c8a:	eb fe                	jmp    7c8a <spin>
+
+Disassembly of section .text:
+
+00007c8c <readseg>:
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7c8c:	55                   	push   %ebp
+    7c8d:	89 e5                	mov    %esp,%ebp
+    7c8f:	57                   	push   %edi
+    uintptr_t end_va = va + count;
+    7c90:	8d 3c 10             	lea    (%eax,%edx,1),%edi
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7c93:	89 ca                	mov    %ecx,%edx
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7c95:	c1 e9 09             	shr    $0x9,%ecx
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7c98:	56                   	push   %esi
+    uintptr_t end_va = va + count;
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7c99:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7c9f:	8d 71 01             	lea    0x1(%ecx),%esi
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7ca2:	53                   	push   %ebx
+    uintptr_t end_va = va + count;
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7ca3:	29 d0                	sub    %edx,%eax
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7ca5:	53                   	push   %ebx
+    uintptr_t end_va = va + count;
+    7ca6:	89 7d f0             	mov    %edi,-0x10(%ebp)
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7ca9:	89 c3                	mov    %eax,%ebx
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7cab:	3b 5d f0             	cmp    -0x10(%ebp),%ebx
+    7cae:	73 71                	jae    7d21 <readseg+0x95>
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7cb0:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7cb5:	ec                   	in     (%dx),%al
+#define ELFHDR          ((struct elfhdr *)0x10000)      // scratch space
+
+/* waitdisk - wait for disk ready */
+static void
+waitdisk(void) {
+    while ((inb(0x1F7) & 0xC0) != 0x40)
+    7cb6:	83 e0 c0             	and    $0xffffffc0,%eax
+    7cb9:	3c 40                	cmp    $0x40,%al
+    7cbb:	75 f3                	jne    7cb0 <readseg+0x24>
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+    7cbd:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7cc2:	b0 01                	mov    $0x1,%al
+    7cc4:	ee                   	out    %al,(%dx)
+    7cc5:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7cca:	89 f0                	mov    %esi,%eax
+    7ccc:	ee                   	out    %al,(%dx)
+    7ccd:	89 f0                	mov    %esi,%eax
+    7ccf:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cd4:	c1 e8 08             	shr    $0x8,%eax
+    7cd7:	ee                   	out    %al,(%dx)
+    7cd8:	89 f0                	mov    %esi,%eax
+    7cda:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7cdf:	c1 e8 10             	shr    $0x10,%eax
+    7ce2:	ee                   	out    %al,(%dx)
+    7ce3:	89 f0                	mov    %esi,%eax
+    7ce5:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7cea:	c1 e8 18             	shr    $0x18,%eax
+    7ced:	83 e0 0f             	and    $0xf,%eax
+    7cf0:	83 c8 e0             	or     $0xffffffe0,%eax
+    7cf3:	ee                   	out    %al,(%dx)
+    7cf4:	b0 20                	mov    $0x20,%al
+    7cf6:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7cfb:	ee                   	out    %al,(%dx)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7cfc:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7d01:	ec                   	in     (%dx),%al
+    7d02:	83 e0 c0             	and    $0xffffffc0,%eax
+    7d05:	3c 40                	cmp    $0x40,%al
+    7d07:	75 f3                	jne    7cfc <readseg+0x70>
+    return data;
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+    7d09:	89 df                	mov    %ebx,%edi
+    7d0b:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7d10:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7d15:	fc                   	cld    
+    7d16:	f2 6d                	repnz insl (%dx),%es:(%edi)
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d18:	81 c3 00 02 00 00    	add    $0x200,%ebx
+    7d1e:	46                   	inc    %esi
+    7d1f:	eb 8a                	jmp    7cab <readseg+0x1f>
+        readsect((void *)va, secno);
+    }
+}
+    7d21:	58                   	pop    %eax
+    7d22:	5b                   	pop    %ebx
+    7d23:	5e                   	pop    %esi
+    7d24:	5f                   	pop    %edi
+    7d25:	5d                   	pop    %ebp
+    7d26:	c3                   	ret    
+
+00007d27 <bootmain>:
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7d27:	55                   	push   %ebp
+    // read the 1st page off disk
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+    7d28:	31 c9                	xor    %ecx,%ecx
+    7d2a:	ba 00 10 00 00       	mov    $0x1000,%edx
+    7d2f:	b8 00 00 01 00       	mov    $0x10000,%eax
+    }
+}
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7d34:	89 e5                	mov    %esp,%ebp
+    7d36:	56                   	push   %esi
+    7d37:	53                   	push   %ebx
+    // read the 1st page off disk
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+    7d38:	e8 4f ff ff ff       	call   7c8c <readseg>
+
+    // is this a valid ELF?
+    if (ELFHDR->e_magic != ELF_MAGIC) {
+    7d3d:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d44:	45 4c 46 
+    7d47:	75 3f                	jne    7d88 <bootmain+0x61>
+    }
+
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    7d49:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    eph = ph + ELFHDR->e_phnum;
+    7d4e:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    }
+
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    7d55:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+    eph = ph + ELFHDR->e_phnum;
+    7d5b:	c1 e6 05             	shl    $0x5,%esi
+    7d5e:	01 de                	add    %ebx,%esi
+    for (; ph < eph; ph ++) {
+    7d60:	39 f3                	cmp    %esi,%ebx
+    7d62:	73 18                	jae    7d7c <bootmain+0x55>
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d64:	8b 43 08             	mov    0x8(%ebx),%eax
+    7d67:	8b 4b 04             	mov    0x4(%ebx),%ecx
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    eph = ph + ELFHDR->e_phnum;
+    for (; ph < eph; ph ++) {
+    7d6a:	83 c3 20             	add    $0x20,%ebx
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d6d:	8b 53 f4             	mov    -0xc(%ebx),%edx
+    7d70:	25 ff ff ff 00       	and    $0xffffff,%eax
+    7d75:	e8 12 ff ff ff       	call   7c8c <readseg>
+    7d7a:	eb e4                	jmp    7d60 <bootmain+0x39>
+    }
+
+    // call the entry point from the ELF header
+    // note: does not return
+    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
+    7d7c:	a1 18 00 01 00       	mov    0x10018,%eax
+    7d81:	25 ff ff ff 00       	and    $0xffffff,%eax
+    7d86:	ff d0                	call   *%eax
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outw(uint16_t port, uint16_t data) {
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+    7d88:	ba 00 8a ff ff       	mov    $0xffff8a00,%edx
+    7d8d:	89 d0                	mov    %edx,%eax
+    7d8f:	66 ef                	out    %ax,(%dx)
+    7d91:	b8 00 8e ff ff       	mov    $0xffff8e00,%eax
+    7d96:	66 ef                	out    %ax,(%dx)
+    7d98:	eb fe                	jmp    7d98 <bootmain+0x71>
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/bootblock.o and lab3/obj/bootblock.o differ
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/bootblock.out and lab3/obj/bootblock.out differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/debug/kdebug.d lab3/obj/kern/debug/kdebug.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/debug/kdebug.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/debug/kdebug.d	2018-03-16 23:03:47.233045724 +0800
@@ -0,0 +1,5 @@
+obj/kern/debug/kdebug.o obj/kern/debug/kdebug.d: kern/debug/kdebug.c \
+ libs/defs.h libs/x86.h kern/debug/stab.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/sync/sync.h kern/driver/intr.h kern/mm/mmu.h \
+ kern/debug/kdebug.h kern/trap/trap.h kern/debug/kmonitor.h \
+ kern/debug/assert.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/debug/kdebug.o and lab3/obj/kern/debug/kdebug.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/debug/kmonitor.d lab3/obj/kern/debug/kmonitor.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/debug/kmonitor.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/debug/kmonitor.d	2018-03-16 23:03:47.237045732 +0800
@@ -0,0 +1,4 @@
+obj/kern/debug/kmonitor.o obj/kern/debug/kmonitor.d: \
+ kern/debug/kmonitor.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ libs/string.h kern/mm/mmu.h kern/trap/trap.h kern/debug/kmonitor.h \
+ kern/debug/kdebug.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/debug/kmonitor.o and lab3/obj/kern/debug/kmonitor.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/debug/panic.d lab3/obj/kern/debug/panic.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/debug/panic.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/debug/panic.d	2018-03-16 23:03:47.245045746 +0800
@@ -0,0 +1,3 @@
+obj/kern/debug/panic.o obj/kern/debug/panic.d: kern/debug/panic.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/intr.h \
+ kern/debug/kmonitor.h kern/trap/trap.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/debug/panic.o and lab3/obj/kern/debug/panic.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/clock.d lab3/obj/kern/driver/clock.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/clock.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/driver/clock.d	2018-03-16 23:03:47.305045860 +0800
@@ -0,0 +1,3 @@
+obj/kern/driver/clock.o obj/kern/driver/clock.d: kern/driver/clock.c \
+ libs/x86.h libs/defs.h kern/trap/trap.h libs/stdio.h libs/stdarg.h \
+ kern/driver/picirq.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/clock.o and lab3/obj/kern/driver/clock.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/console.d lab3/obj/kern/driver/console.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/console.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/driver/console.d	2018-03-16 23:03:47.329045906 +0800
@@ -0,0 +1,5 @@
+obj/kern/driver/console.o obj/kern/driver/console.d: \
+ kern/driver/console.c libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/driver/kbdreg.h kern/driver/picirq.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/sync/sync.h \
+ kern/driver/intr.h kern/mm/mmu.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/console.o and lab3/obj/kern/driver/console.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/ide.d lab3/obj/kern/driver/ide.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/ide.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/driver/ide.d	2018-03-16 23:03:47.297045845 +0800
@@ -0,0 +1,4 @@
+obj/kern/driver/ide.o obj/kern/driver/ide.d: kern/driver/ide.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/trap/trap.h \
+ kern/driver/picirq.h kern/fs/fs.h kern/mm/mmu.h kern/driver/ide.h \
+ libs/x86.h kern/debug/assert.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/ide.o and lab3/obj/kern/driver/ide.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/intr.d lab3/obj/kern/driver/intr.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/intr.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/driver/intr.d	2018-03-16 23:03:47.281045815 +0800
@@ -0,0 +1,2 @@
+obj/kern/driver/intr.o obj/kern/driver/intr.d: kern/driver/intr.c \
+ libs/x86.h libs/defs.h kern/driver/intr.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/intr.o and lab3/obj/kern/driver/intr.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/picirq.d lab3/obj/kern/driver/picirq.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/picirq.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/driver/picirq.d	2018-03-16 23:03:47.285045822 +0800
@@ -0,0 +1,2 @@
+obj/kern/driver/picirq.o obj/kern/driver/picirq.d: kern/driver/picirq.c \
+ libs/defs.h libs/x86.h kern/driver/picirq.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/driver/picirq.o and lab3/obj/kern/driver/picirq.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/fs/swapfs.d lab3/obj/kern/fs/swapfs.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/fs/swapfs.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/fs/swapfs.d	2018-03-16 23:03:47.309045867 +0800
@@ -0,0 +1,5 @@
+obj/kern/fs/swapfs.o obj/kern/fs/swapfs.d: kern/fs/swapfs.c \
+ kern/mm/swap.h libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/fs/swapfs.h \
+ kern/fs/fs.h kern/driver/ide.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/fs/swapfs.o and lab3/obj/kern/fs/swapfs.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/init/entry.d lab3/obj/kern/init/entry.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/init/entry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/init/entry.d	2018-03-16 23:03:47.301045853 +0800
@@ -0,0 +1,2 @@
+obj/kern/init/entry.o obj/kern/init/entry.d: kern/init/entry.S \
+ kern/mm/mmu.h kern/mm/memlayout.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/init/entry.o and lab3/obj/kern/init/entry.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/init/init.d lab3/obj/kern/init/init.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/init/init.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/init/init.d	2018-03-16 23:03:47.289045830 +0800
@@ -0,0 +1,7 @@
+obj/kern/init/init.o obj/kern/init/init.d: kern/init/init.c libs/defs.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/driver/console.h \
+ kern/debug/kdebug.h kern/trap/trap.h kern/driver/picirq.h \
+ kern/driver/clock.h kern/driver/intr.h kern/mm/pmm.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ kern/mm/vmm.h kern/sync/sync.h libs/x86.h kern/driver/ide.h \
+ kern/mm/swap.h kern/debug/kmonitor.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/init/init.o and lab3/obj/kern/init/init.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/libs/readline.d lab3/obj/kern/libs/readline.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/libs/readline.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/libs/readline.d	2018-03-16 23:03:47.225045709 +0800
@@ -0,0 +1,2 @@
+obj/kern/libs/readline.o obj/kern/libs/readline.d: kern/libs/readline.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/libs/readline.o and lab3/obj/kern/libs/readline.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/libs/stdio.d lab3/obj/kern/libs/stdio.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/libs/stdio.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/libs/stdio.d	2018-03-16 23:03:47.277045807 +0800
@@ -0,0 +1,2 @@
+obj/kern/libs/stdio.o obj/kern/libs/stdio.d: kern/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/console.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/libs/stdio.o and lab3/obj/kern/libs/stdio.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/default_pmm.d lab3/obj/kern/mm/default_pmm.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/default_pmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/mm/default_pmm.d	2018-03-16 23:03:47.257045769 +0800
@@ -0,0 +1,4 @@
+obj/kern/mm/default_pmm.o obj/kern/mm/default_pmm.d: \
+ kern/mm/default_pmm.c kern/mm/pmm.h libs/defs.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ libs/string.h kern/mm/default_pmm.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/default_pmm.o and lab3/obj/kern/mm/default_pmm.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/pmm.d lab3/obj/kern/mm/pmm.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/pmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/mm/pmm.d	2018-03-16 23:03:47.309045867 +0800
@@ -0,0 +1,5 @@
+obj/kern/mm/pmm.o obj/kern/mm/pmm.d: kern/mm/pmm.c libs/defs.h libs/x86.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/debug/assert.h kern/mm/default_pmm.h kern/sync/sync.h \
+ kern/driver/intr.h libs/error.h kern/mm/swap.h kern/mm/vmm.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/pmm.o and lab3/obj/kern/mm/pmm.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/swap.d lab3/obj/kern/mm/swap.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/swap.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/mm/swap.d	2018-03-16 23:03:47.249045754 +0800
@@ -0,0 +1,5 @@
+obj/kern/mm/swap.o obj/kern/mm/swap.d: kern/mm/swap.c kern/mm/swap.h \
+ libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/fs/swapfs.h kern/mm/swap_fifo.h \
+ libs/stdio.h libs/stdarg.h libs/string.h
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/swap_fifo.d lab3/obj/kern/mm/swap_fifo.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/swap_fifo.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/mm/swap_fifo.d	2018-03-16 23:03:47.253045762 +0800
@@ -0,0 +1,5 @@
+obj/kern/mm/swap_fifo.o obj/kern/mm/swap_fifo.d: kern/mm/swap_fifo.c \
+ libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h libs/string.h \
+ kern/mm/swap.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/mm/swap_fifo.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/swap_fifo.o and lab3/obj/kern/mm/swap_fifo.o differ
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/swap.o and lab3/obj/kern/mm/swap.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/vmm.d lab3/obj/kern/mm/vmm.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/vmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/mm/vmm.d	2018-03-16 23:03:47.325045898 +0800
@@ -0,0 +1,5 @@
+obj/kern/mm/vmm.o obj/kern/mm/vmm.d: kern/mm/vmm.c kern/mm/vmm.h \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/mm/mmu.h \
+ libs/string.h kern/debug/assert.h libs/stdio.h libs/stdarg.h \
+ libs/error.h kern/mm/pmm.h kern/mm/swap.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/mm/vmm.o and lab3/obj/kern/mm/vmm.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/trap/trap.d lab3/obj/kern/trap/trap.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/trap/trap.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/trap/trap.d	2018-03-16 23:03:47.293045837 +0800
@@ -0,0 +1,6 @@
+obj/kern/trap/trap.o obj/kern/trap/trap.d: kern/trap/trap.c libs/defs.h \
+ kern/mm/mmu.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/driver/clock.h kern/trap/trap.h libs/x86.h libs/stdio.h \
+ libs/stdarg.h kern/debug/assert.h kern/driver/console.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/mm/swap.h kern/mm/pmm.h \
+ kern/debug/kdebug.h
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/trap/trapentry.d lab3/obj/kern/trap/trapentry.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/trap/trapentry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/trap/trapentry.d	2018-03-16 23:03:47.305045860 +0800
@@ -0,0 +1,2 @@
+obj/kern/trap/trapentry.o obj/kern/trap/trapentry.d: \
+ kern/trap/trapentry.S kern/mm/memlayout.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/trap/trapentry.o and lab3/obj/kern/trap/trapentry.o differ
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/trap/trap.o and lab3/obj/kern/trap/trap.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/trap/vectors.d lab3/obj/kern/trap/vectors.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/trap/vectors.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kern/trap/vectors.d	2018-03-16 23:03:47.269045792 +0800
@@ -0,0 +1 @@
+obj/kern/trap/vectors.o obj/kern/trap/vectors.d: kern/trap/vectors.S
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kern/trap/vectors.o and lab3/obj/kern/trap/vectors.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kernel.asm lab3/obj/kernel.asm
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kernel.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kernel.asm	2018-03-16 23:03:48.181047517 +0800
@@ -0,0 +1,17767 @@
+
+bin/kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+c0100000 <kern_entry>:
+.text
+.globl kern_entry
+kern_entry:
+    # reload temperate gdt (second time) to remap all physical memory
+    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
+    lgdt REALLOC(__gdtdesc)
+c0100000:	0f 01 15 18 00 12 00 	lgdtl  0x120018
+    movl $KERNEL_DS, %eax
+c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
+    movw %ax, %ds
+c010000c:	8e d8                	mov    %eax,%ds
+    movw %ax, %es
+c010000e:	8e c0                	mov    %eax,%es
+    movw %ax, %ss
+c0100010:	8e d0                	mov    %eax,%ss
+
+    ljmp $KERNEL_CS, $relocated
+c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019
+
+c0100019 <relocated>:
+
+relocated:
+
+    # set ebp, esp
+    movl $0x0, %ebp
+c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
+    # the kernel stack region is from bootstack -- bootstacktop,
+    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
+    movl $bootstacktop, %esp
+c010001e:	bc 00 00 12 c0       	mov    $0xc0120000,%esp
+    # now kernel stack is ready , call the first C function
+    call kern_init
+c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>
+
+c0100028 <spin>:
+
+# should never get here
+spin:
+    jmp spin
+c0100028:	eb fe                	jmp    c0100028 <spin>
+
+c010002a <kern_init>:
+int kern_init(void) __attribute__((noreturn));
+void grade_backtrace(void);
+static void lab1_switch_test(void);
+
+int
+kern_init(void) {
+c010002a:	55                   	push   %ebp
+c010002b:	89 e5                	mov    %esp,%ebp
+c010002d:	83 ec 18             	sub    $0x18,%esp
+    extern char edata[], end[];
+    memset(edata, 0, end - edata);
+c0100030:	ba 5c 1b 12 c0       	mov    $0xc0121b5c,%edx
+c0100035:	b8 60 0a 12 c0       	mov    $0xc0120a60,%eax
+c010003a:	29 c2                	sub    %eax,%edx
+c010003c:	89 d0                	mov    %edx,%eax
+c010003e:	83 ec 04             	sub    $0x4,%esp
+c0100041:	50                   	push   %eax
+c0100042:	6a 00                	push   $0x0
+c0100044:	68 60 0a 12 c0       	push   $0xc0120a60
+c0100049:	e8 dc 7f 00 00       	call   c010802a <memset>
+c010004e:	83 c4 10             	add    $0x10,%esp
+
+    cons_init();                // init the console
+c0100051:	e8 a2 1d 00 00       	call   c0101df8 <cons_init>
+
+    const char *message = "(THU.CST) os is loading ...";
+c0100056:	c7 45 f4 a0 88 10 c0 	movl   $0xc01088a0,-0xc(%ebp)
+    cprintf("%s\n\n", message);
+c010005d:	83 ec 08             	sub    $0x8,%esp
+c0100060:	ff 75 f4             	pushl  -0xc(%ebp)
+c0100063:	68 bc 88 10 c0       	push   $0xc01088bc
+c0100068:	e8 09 02 00 00       	call   c0100276 <cprintf>
+c010006d:	83 c4 10             	add    $0x10,%esp
+
+    print_kerninfo();
+c0100070:	e8 8b 08 00 00       	call   c0100900 <print_kerninfo>
+
+    grade_backtrace();
+c0100075:	e8 83 00 00 00       	call   c01000fd <grade_backtrace>
+
+    pmm_init();                 // init physical memory management
+c010007a:	e8 ff 68 00 00       	call   c010697e <pmm_init>
+
+    pic_init();                 // init interrupt controller
+c010007f:	e8 e6 1e 00 00       	call   c0101f6a <pic_init>
+    idt_init();                 // init interrupt descriptor table
+c0100084:	e8 6d 20 00 00       	call   c01020f6 <idt_init>
+
+    vmm_init();                 // init virtual memory management
+c0100089:	e8 7c 36 00 00       	call   c010370a <vmm_init>
+
+    ide_init();                 // init ide devices
+c010008e:	e8 1b 0d 00 00       	call   c0100dae <ide_init>
+    swap_init();                // init swap
+c0100093:	e8 3f 44 00 00       	call   c01044d7 <swap_init>
+
+    clock_init();               // init clock interrupt
+c0100098:	e8 02 15 00 00       	call   c010159f <clock_init>
+    intr_enable();              // enable irq interrupt
+c010009d:	e8 05 20 00 00       	call   c01020a7 <intr_enable>
+    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
+    // user/kernel mode switch test
+    //lab1_switch_test();
+
+    /* do nothing */
+    while (1);
+c01000a2:	eb fe                	jmp    c01000a2 <kern_init+0x78>
+
+c01000a4 <grade_backtrace2>:
+}
+
+void __attribute__((noinline))
+grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
+c01000a4:	55                   	push   %ebp
+c01000a5:	89 e5                	mov    %esp,%ebp
+c01000a7:	83 ec 08             	sub    $0x8,%esp
+    mon_backtrace(0, NULL, NULL);
+c01000aa:	83 ec 04             	sub    $0x4,%esp
+c01000ad:	6a 00                	push   $0x0
+c01000af:	6a 00                	push   $0x0
+c01000b1:	6a 00                	push   $0x0
+c01000b3:	e8 8a 0c 00 00       	call   c0100d42 <mon_backtrace>
+c01000b8:	83 c4 10             	add    $0x10,%esp
+}
+c01000bb:	90                   	nop
+c01000bc:	c9                   	leave  
+c01000bd:	c3                   	ret    
+
+c01000be <grade_backtrace1>:
+
+void __attribute__((noinline))
+grade_backtrace1(int arg0, int arg1) {
+c01000be:	55                   	push   %ebp
+c01000bf:	89 e5                	mov    %esp,%ebp
+c01000c1:	53                   	push   %ebx
+c01000c2:	83 ec 04             	sub    $0x4,%esp
+    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
+c01000c5:	8d 4d 0c             	lea    0xc(%ebp),%ecx
+c01000c8:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01000cb:	8d 5d 08             	lea    0x8(%ebp),%ebx
+c01000ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c01000d1:	51                   	push   %ecx
+c01000d2:	52                   	push   %edx
+c01000d3:	53                   	push   %ebx
+c01000d4:	50                   	push   %eax
+c01000d5:	e8 ca ff ff ff       	call   c01000a4 <grade_backtrace2>
+c01000da:	83 c4 10             	add    $0x10,%esp
+}
+c01000dd:	90                   	nop
+c01000de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c01000e1:	c9                   	leave  
+c01000e2:	c3                   	ret    
+
+c01000e3 <grade_backtrace0>:
+
+void __attribute__((noinline))
+grade_backtrace0(int arg0, int arg1, int arg2) {
+c01000e3:	55                   	push   %ebp
+c01000e4:	89 e5                	mov    %esp,%ebp
+c01000e6:	83 ec 08             	sub    $0x8,%esp
+    grade_backtrace1(arg0, arg2);
+c01000e9:	83 ec 08             	sub    $0x8,%esp
+c01000ec:	ff 75 10             	pushl  0x10(%ebp)
+c01000ef:	ff 75 08             	pushl  0x8(%ebp)
+c01000f2:	e8 c7 ff ff ff       	call   c01000be <grade_backtrace1>
+c01000f7:	83 c4 10             	add    $0x10,%esp
+}
+c01000fa:	90                   	nop
+c01000fb:	c9                   	leave  
+c01000fc:	c3                   	ret    
+
+c01000fd <grade_backtrace>:
+
+void
+grade_backtrace(void) {
+c01000fd:	55                   	push   %ebp
+c01000fe:	89 e5                	mov    %esp,%ebp
+c0100100:	83 ec 08             	sub    $0x8,%esp
+    grade_backtrace0(0, (int)kern_init, 0xffff0000);
+c0100103:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
+c0100108:	83 ec 04             	sub    $0x4,%esp
+c010010b:	68 00 00 ff ff       	push   $0xffff0000
+c0100110:	50                   	push   %eax
+c0100111:	6a 00                	push   $0x0
+c0100113:	e8 cb ff ff ff       	call   c01000e3 <grade_backtrace0>
+c0100118:	83 c4 10             	add    $0x10,%esp
+}
+c010011b:	90                   	nop
+c010011c:	c9                   	leave  
+c010011d:	c3                   	ret    
+
+c010011e <lab1_print_cur_status>:
+
+static void
+lab1_print_cur_status(void) {
+c010011e:	55                   	push   %ebp
+c010011f:	89 e5                	mov    %esp,%ebp
+c0100121:	83 ec 18             	sub    $0x18,%esp
+    static int round = 0;
+    uint16_t reg1, reg2, reg3, reg4;
+    asm volatile (
+c0100124:	8c 4d f6             	mov    %cs,-0xa(%ebp)
+c0100127:	8c 5d f4             	mov    %ds,-0xc(%ebp)
+c010012a:	8c 45 f2             	mov    %es,-0xe(%ebp)
+c010012d:	8c 55 f0             	mov    %ss,-0x10(%ebp)
+            "mov %%cs, %0;"
+            "mov %%ds, %1;"
+            "mov %%es, %2;"
+            "mov %%ss, %3;"
+            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
+    cprintf("%d: @ring %d\n", round, reg1 & 3);
+c0100130:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100134:	0f b7 c0             	movzwl %ax,%eax
+c0100137:	83 e0 03             	and    $0x3,%eax
+c010013a:	89 c2                	mov    %eax,%edx
+c010013c:	a1 60 0a 12 c0       	mov    0xc0120a60,%eax
+c0100141:	83 ec 04             	sub    $0x4,%esp
+c0100144:	52                   	push   %edx
+c0100145:	50                   	push   %eax
+c0100146:	68 c1 88 10 c0       	push   $0xc01088c1
+c010014b:	e8 26 01 00 00       	call   c0100276 <cprintf>
+c0100150:	83 c4 10             	add    $0x10,%esp
+    cprintf("%d:  cs = %x\n", round, reg1);
+c0100153:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100157:	0f b7 d0             	movzwl %ax,%edx
+c010015a:	a1 60 0a 12 c0       	mov    0xc0120a60,%eax
+c010015f:	83 ec 04             	sub    $0x4,%esp
+c0100162:	52                   	push   %edx
+c0100163:	50                   	push   %eax
+c0100164:	68 cf 88 10 c0       	push   $0xc01088cf
+c0100169:	e8 08 01 00 00       	call   c0100276 <cprintf>
+c010016e:	83 c4 10             	add    $0x10,%esp
+    cprintf("%d:  ds = %x\n", round, reg2);
+c0100171:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c0100175:	0f b7 d0             	movzwl %ax,%edx
+c0100178:	a1 60 0a 12 c0       	mov    0xc0120a60,%eax
+c010017d:	83 ec 04             	sub    $0x4,%esp
+c0100180:	52                   	push   %edx
+c0100181:	50                   	push   %eax
+c0100182:	68 dd 88 10 c0       	push   $0xc01088dd
+c0100187:	e8 ea 00 00 00       	call   c0100276 <cprintf>
+c010018c:	83 c4 10             	add    $0x10,%esp
+    cprintf("%d:  es = %x\n", round, reg3);
+c010018f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0100193:	0f b7 d0             	movzwl %ax,%edx
+c0100196:	a1 60 0a 12 c0       	mov    0xc0120a60,%eax
+c010019b:	83 ec 04             	sub    $0x4,%esp
+c010019e:	52                   	push   %edx
+c010019f:	50                   	push   %eax
+c01001a0:	68 eb 88 10 c0       	push   $0xc01088eb
+c01001a5:	e8 cc 00 00 00       	call   c0100276 <cprintf>
+c01001aa:	83 c4 10             	add    $0x10,%esp
+    cprintf("%d:  ss = %x\n", round, reg4);
+c01001ad:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c01001b1:	0f b7 d0             	movzwl %ax,%edx
+c01001b4:	a1 60 0a 12 c0       	mov    0xc0120a60,%eax
+c01001b9:	83 ec 04             	sub    $0x4,%esp
+c01001bc:	52                   	push   %edx
+c01001bd:	50                   	push   %eax
+c01001be:	68 f9 88 10 c0       	push   $0xc01088f9
+c01001c3:	e8 ae 00 00 00       	call   c0100276 <cprintf>
+c01001c8:	83 c4 10             	add    $0x10,%esp
+    round ++;
+c01001cb:	a1 60 0a 12 c0       	mov    0xc0120a60,%eax
+c01001d0:	83 c0 01             	add    $0x1,%eax
+c01001d3:	a3 60 0a 12 c0       	mov    %eax,0xc0120a60
+}
+c01001d8:	90                   	nop
+c01001d9:	c9                   	leave  
+c01001da:	c3                   	ret    
+
+c01001db <lab1_switch_to_user>:
+
+static void
+lab1_switch_to_user(void) {
+c01001db:	55                   	push   %ebp
+c01001dc:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 : TODO
+}
+c01001de:	90                   	nop
+c01001df:	5d                   	pop    %ebp
+c01001e0:	c3                   	ret    
+
+c01001e1 <lab1_switch_to_kernel>:
+
+static void
+lab1_switch_to_kernel(void) {
+c01001e1:	55                   	push   %ebp
+c01001e2:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 :  TODO
+}
+c01001e4:	90                   	nop
+c01001e5:	5d                   	pop    %ebp
+c01001e6:	c3                   	ret    
+
+c01001e7 <lab1_switch_test>:
+
+static void
+lab1_switch_test(void) {
+c01001e7:	55                   	push   %ebp
+c01001e8:	89 e5                	mov    %esp,%ebp
+c01001ea:	83 ec 08             	sub    $0x8,%esp
+    lab1_print_cur_status();
+c01001ed:	e8 2c ff ff ff       	call   c010011e <lab1_print_cur_status>
+    cprintf("+++ switch to  user  mode +++\n");
+c01001f2:	83 ec 0c             	sub    $0xc,%esp
+c01001f5:	68 08 89 10 c0       	push   $0xc0108908
+c01001fa:	e8 77 00 00 00       	call   c0100276 <cprintf>
+c01001ff:	83 c4 10             	add    $0x10,%esp
+    lab1_switch_to_user();
+c0100202:	e8 d4 ff ff ff       	call   c01001db <lab1_switch_to_user>
+    lab1_print_cur_status();
+c0100207:	e8 12 ff ff ff       	call   c010011e <lab1_print_cur_status>
+    cprintf("+++ switch to kernel mode +++\n");
+c010020c:	83 ec 0c             	sub    $0xc,%esp
+c010020f:	68 28 89 10 c0       	push   $0xc0108928
+c0100214:	e8 5d 00 00 00       	call   c0100276 <cprintf>
+c0100219:	83 c4 10             	add    $0x10,%esp
+    lab1_switch_to_kernel();
+c010021c:	e8 c0 ff ff ff       	call   c01001e1 <lab1_switch_to_kernel>
+    lab1_print_cur_status();
+c0100221:	e8 f8 fe ff ff       	call   c010011e <lab1_print_cur_status>
+}
+c0100226:	90                   	nop
+c0100227:	c9                   	leave  
+c0100228:	c3                   	ret    
+
+c0100229 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+c0100229:	55                   	push   %ebp
+c010022a:	89 e5                	mov    %esp,%ebp
+c010022c:	83 ec 08             	sub    $0x8,%esp
+    cons_putc(c);
+c010022f:	83 ec 0c             	sub    $0xc,%esp
+c0100232:	ff 75 08             	pushl  0x8(%ebp)
+c0100235:	e8 ef 1b 00 00       	call   c0101e29 <cons_putc>
+c010023a:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+c010023d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100240:	8b 00                	mov    (%eax),%eax
+c0100242:	8d 50 01             	lea    0x1(%eax),%edx
+c0100245:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100248:	89 10                	mov    %edx,(%eax)
+}
+c010024a:	90                   	nop
+c010024b:	c9                   	leave  
+c010024c:	c3                   	ret    
+
+c010024d <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+c010024d:	55                   	push   %ebp
+c010024e:	89 e5                	mov    %esp,%ebp
+c0100250:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+c0100253:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+c010025a:	ff 75 0c             	pushl  0xc(%ebp)
+c010025d:	ff 75 08             	pushl  0x8(%ebp)
+c0100260:	8d 45 f4             	lea    -0xc(%ebp),%eax
+c0100263:	50                   	push   %eax
+c0100264:	68 29 02 10 c0       	push   $0xc0100229
+c0100269:	e8 f2 80 00 00       	call   c0108360 <vprintfmt>
+c010026e:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+c0100271:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100274:	c9                   	leave  
+c0100275:	c3                   	ret    
+
+c0100276 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+c0100276:	55                   	push   %ebp
+c0100277:	89 e5                	mov    %esp,%ebp
+c0100279:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c010027c:	8d 45 0c             	lea    0xc(%ebp),%eax
+c010027f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vcprintf(fmt, ap);
+c0100282:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100285:	83 ec 08             	sub    $0x8,%esp
+c0100288:	50                   	push   %eax
+c0100289:	ff 75 08             	pushl  0x8(%ebp)
+c010028c:	e8 bc ff ff ff       	call   c010024d <vcprintf>
+c0100291:	83 c4 10             	add    $0x10,%esp
+c0100294:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c0100297:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010029a:	c9                   	leave  
+c010029b:	c3                   	ret    
+
+c010029c <cputchar>:
+
+/* cputchar - writes a single character to stdout */
+void
+cputchar(int c) {
+c010029c:	55                   	push   %ebp
+c010029d:	89 e5                	mov    %esp,%ebp
+c010029f:	83 ec 08             	sub    $0x8,%esp
+    cons_putc(c);
+c01002a2:	83 ec 0c             	sub    $0xc,%esp
+c01002a5:	ff 75 08             	pushl  0x8(%ebp)
+c01002a8:	e8 7c 1b 00 00       	call   c0101e29 <cons_putc>
+c01002ad:	83 c4 10             	add    $0x10,%esp
+}
+c01002b0:	90                   	nop
+c01002b1:	c9                   	leave  
+c01002b2:	c3                   	ret    
+
+c01002b3 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+c01002b3:	55                   	push   %ebp
+c01002b4:	89 e5                	mov    %esp,%ebp
+c01002b6:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+c01002b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+c01002c0:	eb 14                	jmp    c01002d6 <cputs+0x23>
+        cputch(c, &cnt);
+c01002c2:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+c01002c6:	83 ec 08             	sub    $0x8,%esp
+c01002c9:	8d 55 f0             	lea    -0x10(%ebp),%edx
+c01002cc:	52                   	push   %edx
+c01002cd:	50                   	push   %eax
+c01002ce:	e8 56 ff ff ff       	call   c0100229 <cputch>
+c01002d3:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+c01002d6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01002d9:	8d 50 01             	lea    0x1(%eax),%edx
+c01002dc:	89 55 08             	mov    %edx,0x8(%ebp)
+c01002df:	0f b6 00             	movzbl (%eax),%eax
+c01002e2:	88 45 f7             	mov    %al,-0x9(%ebp)
+c01002e5:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+c01002e9:	75 d7                	jne    c01002c2 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+c01002eb:	83 ec 08             	sub    $0x8,%esp
+c01002ee:	8d 45 f0             	lea    -0x10(%ebp),%eax
+c01002f1:	50                   	push   %eax
+c01002f2:	6a 0a                	push   $0xa
+c01002f4:	e8 30 ff ff ff       	call   c0100229 <cputch>
+c01002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+c01002fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c01002ff:	c9                   	leave  
+c0100300:	c3                   	ret    
+
+c0100301 <getchar>:
+
+/* getchar - reads a single non-zero character from stdin */
+int
+getchar(void) {
+c0100301:	55                   	push   %ebp
+c0100302:	89 e5                	mov    %esp,%ebp
+c0100304:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = cons_getc()) == 0)
+c0100307:	e8 66 1b 00 00       	call   c0101e72 <cons_getc>
+c010030c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010030f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100313:	74 f2                	je     c0100307 <getchar+0x6>
+        /* do nothing */;
+    return c;
+c0100315:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100318:	c9                   	leave  
+c0100319:	c3                   	ret    
+
+c010031a <readline>:
+ * The readline() function returns the text of the line read. If some errors
+ * are happened, NULL is returned. The return value is a global variable,
+ * thus it should be copied before it is used.
+ * */
+char *
+readline(const char *prompt) {
+c010031a:	55                   	push   %ebp
+c010031b:	89 e5                	mov    %esp,%ebp
+c010031d:	83 ec 18             	sub    $0x18,%esp
+    if (prompt != NULL) {
+c0100320:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100324:	74 13                	je     c0100339 <readline+0x1f>
+        cprintf("%s", prompt);
+c0100326:	83 ec 08             	sub    $0x8,%esp
+c0100329:	ff 75 08             	pushl  0x8(%ebp)
+c010032c:	68 47 89 10 c0       	push   $0xc0108947
+c0100331:	e8 40 ff ff ff       	call   c0100276 <cprintf>
+c0100336:	83 c4 10             	add    $0x10,%esp
+    }
+    int i = 0, c;
+c0100339:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        c = getchar();
+c0100340:	e8 bc ff ff ff       	call   c0100301 <getchar>
+c0100345:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (c < 0) {
+c0100348:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010034c:	79 0a                	jns    c0100358 <readline+0x3e>
+            return NULL;
+c010034e:	b8 00 00 00 00       	mov    $0x0,%eax
+c0100353:	e9 82 00 00 00       	jmp    c01003da <readline+0xc0>
+        }
+        else if (c >= ' ' && i < BUFSIZE - 1) {
+c0100358:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
+c010035c:	7e 2b                	jle    c0100389 <readline+0x6f>
+c010035e:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
+c0100365:	7f 22                	jg     c0100389 <readline+0x6f>
+            cputchar(c);
+c0100367:	83 ec 0c             	sub    $0xc,%esp
+c010036a:	ff 75 f0             	pushl  -0x10(%ebp)
+c010036d:	e8 2a ff ff ff       	call   c010029c <cputchar>
+c0100372:	83 c4 10             	add    $0x10,%esp
+            buf[i ++] = c;
+c0100375:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100378:	8d 50 01             	lea    0x1(%eax),%edx
+c010037b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c010037e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100381:	88 90 80 0a 12 c0    	mov    %dl,-0x3fedf580(%eax)
+c0100387:	eb 4c                	jmp    c01003d5 <readline+0xbb>
+        }
+        else if (c == '\b' && i > 0) {
+c0100389:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
+c010038d:	75 1a                	jne    c01003a9 <readline+0x8f>
+c010038f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100393:	7e 14                	jle    c01003a9 <readline+0x8f>
+            cputchar(c);
+c0100395:	83 ec 0c             	sub    $0xc,%esp
+c0100398:	ff 75 f0             	pushl  -0x10(%ebp)
+c010039b:	e8 fc fe ff ff       	call   c010029c <cputchar>
+c01003a0:	83 c4 10             	add    $0x10,%esp
+            i --;
+c01003a3:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c01003a7:	eb 2c                	jmp    c01003d5 <readline+0xbb>
+        }
+        else if (c == '\n' || c == '\r') {
+c01003a9:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
+c01003ad:	74 06                	je     c01003b5 <readline+0x9b>
+c01003af:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
+c01003b3:	75 8b                	jne    c0100340 <readline+0x26>
+            cputchar(c);
+c01003b5:	83 ec 0c             	sub    $0xc,%esp
+c01003b8:	ff 75 f0             	pushl  -0x10(%ebp)
+c01003bb:	e8 dc fe ff ff       	call   c010029c <cputchar>
+c01003c0:	83 c4 10             	add    $0x10,%esp
+            buf[i] = '\0';
+c01003c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01003c6:	05 80 0a 12 c0       	add    $0xc0120a80,%eax
+c01003cb:	c6 00 00             	movb   $0x0,(%eax)
+            return buf;
+c01003ce:	b8 80 0a 12 c0       	mov    $0xc0120a80,%eax
+c01003d3:	eb 05                	jmp    c01003da <readline+0xc0>
+        }
+    }
+c01003d5:	e9 66 ff ff ff       	jmp    c0100340 <readline+0x26>
+}
+c01003da:	c9                   	leave  
+c01003db:	c3                   	ret    
+
+c01003dc <__panic>:
+/* *
+ * __panic - __panic is called on unresolvable fatal errors. it prints
+ * "panic: 'message'", and then enters the kernel monitor.
+ * */
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+c01003dc:	55                   	push   %ebp
+c01003dd:	89 e5                	mov    %esp,%ebp
+c01003df:	83 ec 18             	sub    $0x18,%esp
+    if (is_panic) {
+c01003e2:	a1 80 0e 12 c0       	mov    0xc0120e80,%eax
+c01003e7:	85 c0                	test   %eax,%eax
+c01003e9:	75 4a                	jne    c0100435 <__panic+0x59>
+        goto panic_dead;
+    }
+    is_panic = 1;
+c01003eb:	c7 05 80 0e 12 c0 01 	movl   $0x1,0xc0120e80
+c01003f2:	00 00 00 
+
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+c01003f5:	8d 45 14             	lea    0x14(%ebp),%eax
+c01003f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel panic at %s:%d:\n    ", file, line);
+c01003fb:	83 ec 04             	sub    $0x4,%esp
+c01003fe:	ff 75 0c             	pushl  0xc(%ebp)
+c0100401:	ff 75 08             	pushl  0x8(%ebp)
+c0100404:	68 4a 89 10 c0       	push   $0xc010894a
+c0100409:	e8 68 fe ff ff       	call   c0100276 <cprintf>
+c010040e:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+c0100411:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100414:	83 ec 08             	sub    $0x8,%esp
+c0100417:	50                   	push   %eax
+c0100418:	ff 75 10             	pushl  0x10(%ebp)
+c010041b:	e8 2d fe ff ff       	call   c010024d <vcprintf>
+c0100420:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+c0100423:	83 ec 0c             	sub    $0xc,%esp
+c0100426:	68 66 89 10 c0       	push   $0xc0108966
+c010042b:	e8 46 fe ff ff       	call   c0100276 <cprintf>
+c0100430:	83 c4 10             	add    $0x10,%esp
+c0100433:	eb 01                	jmp    c0100436 <__panic+0x5a>
+ * "panic: 'message'", and then enters the kernel monitor.
+ * */
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+    if (is_panic) {
+        goto panic_dead;
+c0100435:	90                   	nop
+    vcprintf(fmt, ap);
+    cprintf("\n");
+    va_end(ap);
+
+panic_dead:
+    intr_disable();
+c0100436:	e8 73 1c 00 00       	call   c01020ae <intr_disable>
+    while (1) {
+        kmonitor(NULL);
+c010043b:	83 ec 0c             	sub    $0xc,%esp
+c010043e:	6a 00                	push   $0x0
+c0100440:	e8 23 08 00 00       	call   c0100c68 <kmonitor>
+c0100445:	83 c4 10             	add    $0x10,%esp
+    }
+c0100448:	eb f1                	jmp    c010043b <__panic+0x5f>
+
+c010044a <__warn>:
+}
+
+/* __warn - like panic, but don't */
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+c010044a:	55                   	push   %ebp
+c010044b:	89 e5                	mov    %esp,%ebp
+c010044d:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+c0100450:	8d 45 14             	lea    0x14(%ebp),%eax
+c0100453:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel warning at %s:%d:\n    ", file, line);
+c0100456:	83 ec 04             	sub    $0x4,%esp
+c0100459:	ff 75 0c             	pushl  0xc(%ebp)
+c010045c:	ff 75 08             	pushl  0x8(%ebp)
+c010045f:	68 68 89 10 c0       	push   $0xc0108968
+c0100464:	e8 0d fe ff ff       	call   c0100276 <cprintf>
+c0100469:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+c010046c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010046f:	83 ec 08             	sub    $0x8,%esp
+c0100472:	50                   	push   %eax
+c0100473:	ff 75 10             	pushl  0x10(%ebp)
+c0100476:	e8 d2 fd ff ff       	call   c010024d <vcprintf>
+c010047b:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+c010047e:	83 ec 0c             	sub    $0xc,%esp
+c0100481:	68 66 89 10 c0       	push   $0xc0108966
+c0100486:	e8 eb fd ff ff       	call   c0100276 <cprintf>
+c010048b:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+c010048e:	90                   	nop
+c010048f:	c9                   	leave  
+c0100490:	c3                   	ret    
+
+c0100491 <is_kernel_panic>:
+
+bool
+is_kernel_panic(void) {
+c0100491:	55                   	push   %ebp
+c0100492:	89 e5                	mov    %esp,%ebp
+    return is_panic;
+c0100494:	a1 80 0e 12 c0       	mov    0xc0120e80,%eax
+}
+c0100499:	5d                   	pop    %ebp
+c010049a:	c3                   	ret    
+
+c010049b <stab_binsearch>:
+ *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
+ * will exit setting left = 118, right = 554.
+ * */
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+c010049b:	55                   	push   %ebp
+c010049c:	89 e5                	mov    %esp,%ebp
+c010049e:	83 ec 20             	sub    $0x20,%esp
+    int l = *region_left, r = *region_right, any_matches = 0;
+c01004a1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01004a4:	8b 00                	mov    (%eax),%eax
+c01004a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01004a9:	8b 45 10             	mov    0x10(%ebp),%eax
+c01004ac:	8b 00                	mov    (%eax),%eax
+c01004ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c01004b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+    while (l <= r) {
+c01004b8:	e9 d2 00 00 00       	jmp    c010058f <stab_binsearch+0xf4>
+        int true_m = (l + r) / 2, m = true_m;
+c01004bd:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01004c0:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01004c3:	01 d0                	add    %edx,%eax
+c01004c5:	89 c2                	mov    %eax,%edx
+c01004c7:	c1 ea 1f             	shr    $0x1f,%edx
+c01004ca:	01 d0                	add    %edx,%eax
+c01004cc:	d1 f8                	sar    %eax
+c01004ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01004d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01004d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c01004d7:	eb 04                	jmp    c01004dd <stab_binsearch+0x42>
+            m --;
+c01004d9:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
+
+    while (l <= r) {
+        int true_m = (l + r) / 2, m = true_m;
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c01004dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01004e0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c01004e3:	7c 1f                	jl     c0100504 <stab_binsearch+0x69>
+c01004e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01004e8:	89 d0                	mov    %edx,%eax
+c01004ea:	01 c0                	add    %eax,%eax
+c01004ec:	01 d0                	add    %edx,%eax
+c01004ee:	c1 e0 02             	shl    $0x2,%eax
+c01004f1:	89 c2                	mov    %eax,%edx
+c01004f3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01004f6:	01 d0                	add    %edx,%eax
+c01004f8:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c01004fc:	0f b6 c0             	movzbl %al,%eax
+c01004ff:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0100502:	75 d5                	jne    c01004d9 <stab_binsearch+0x3e>
+            m --;
+        }
+        if (m < l) {    // no match in [l, m]
+c0100504:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100507:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c010050a:	7d 0b                	jge    c0100517 <stab_binsearch+0x7c>
+            l = true_m + 1;
+c010050c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010050f:	83 c0 01             	add    $0x1,%eax
+c0100512:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            continue;
+c0100515:	eb 78                	jmp    c010058f <stab_binsearch+0xf4>
+        }
+
+        // actual binary search
+        any_matches = 1;
+c0100517:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+        if (stabs[m].n_value < addr) {
+c010051e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100521:	89 d0                	mov    %edx,%eax
+c0100523:	01 c0                	add    %eax,%eax
+c0100525:	01 d0                	add    %edx,%eax
+c0100527:	c1 e0 02             	shl    $0x2,%eax
+c010052a:	89 c2                	mov    %eax,%edx
+c010052c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010052f:	01 d0                	add    %edx,%eax
+c0100531:	8b 40 08             	mov    0x8(%eax),%eax
+c0100534:	3b 45 18             	cmp    0x18(%ebp),%eax
+c0100537:	73 13                	jae    c010054c <stab_binsearch+0xb1>
+            *region_left = m;
+c0100539:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010053c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010053f:	89 10                	mov    %edx,(%eax)
+            l = true_m + 1;
+c0100541:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100544:	83 c0 01             	add    $0x1,%eax
+c0100547:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c010054a:	eb 43                	jmp    c010058f <stab_binsearch+0xf4>
+        } else if (stabs[m].n_value > addr) {
+c010054c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010054f:	89 d0                	mov    %edx,%eax
+c0100551:	01 c0                	add    %eax,%eax
+c0100553:	01 d0                	add    %edx,%eax
+c0100555:	c1 e0 02             	shl    $0x2,%eax
+c0100558:	89 c2                	mov    %eax,%edx
+c010055a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010055d:	01 d0                	add    %edx,%eax
+c010055f:	8b 40 08             	mov    0x8(%eax),%eax
+c0100562:	3b 45 18             	cmp    0x18(%ebp),%eax
+c0100565:	76 16                	jbe    c010057d <stab_binsearch+0xe2>
+            *region_right = m - 1;
+c0100567:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010056a:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010056d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100570:	89 10                	mov    %edx,(%eax)
+            r = m - 1;
+c0100572:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100575:	83 e8 01             	sub    $0x1,%eax
+c0100578:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c010057b:	eb 12                	jmp    c010058f <stab_binsearch+0xf4>
+        } else {
+            // exact match for 'addr', but continue loop to find
+            // *region_right
+            *region_left = m;
+c010057d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100580:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100583:	89 10                	mov    %edx,(%eax)
+            l = m;
+c0100585:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100588:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            addr ++;
+c010058b:	83 45 18 01          	addl   $0x1,0x18(%ebp)
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+    int l = *region_left, r = *region_right, any_matches = 0;
+
+    while (l <= r) {
+c010058f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100592:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c0100595:	0f 8e 22 ff ff ff    	jle    c01004bd <stab_binsearch+0x22>
+            l = m;
+            addr ++;
+        }
+    }
+
+    if (!any_matches) {
+c010059b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010059f:	75 0f                	jne    c01005b0 <stab_binsearch+0x115>
+        *region_right = *region_left - 1;
+c01005a1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01005a4:	8b 00                	mov    (%eax),%eax
+c01005a6:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01005a9:	8b 45 10             	mov    0x10(%ebp),%eax
+c01005ac:	89 10                	mov    %edx,(%eax)
+        l = *region_right;
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+            /* do nothing */;
+        *region_left = l;
+    }
+}
+c01005ae:	eb 3f                	jmp    c01005ef <stab_binsearch+0x154>
+    if (!any_matches) {
+        *region_right = *region_left - 1;
+    }
+    else {
+        // find rightmost region containing 'addr'
+        l = *region_right;
+c01005b0:	8b 45 10             	mov    0x10(%ebp),%eax
+c01005b3:	8b 00                	mov    (%eax),%eax
+c01005b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+c01005b8:	eb 04                	jmp    c01005be <stab_binsearch+0x123>
+c01005ba:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
+c01005be:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01005c1:	8b 00                	mov    (%eax),%eax
+c01005c3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c01005c6:	7d 1f                	jge    c01005e7 <stab_binsearch+0x14c>
+c01005c8:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01005cb:	89 d0                	mov    %edx,%eax
+c01005cd:	01 c0                	add    %eax,%eax
+c01005cf:	01 d0                	add    %edx,%eax
+c01005d1:	c1 e0 02             	shl    $0x2,%eax
+c01005d4:	89 c2                	mov    %eax,%edx
+c01005d6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01005d9:	01 d0                	add    %edx,%eax
+c01005db:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c01005df:	0f b6 c0             	movzbl %al,%eax
+c01005e2:	3b 45 14             	cmp    0x14(%ebp),%eax
+c01005e5:	75 d3                	jne    c01005ba <stab_binsearch+0x11f>
+            /* do nothing */;
+        *region_left = l;
+c01005e7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01005ea:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01005ed:	89 10                	mov    %edx,(%eax)
+    }
+}
+c01005ef:	90                   	nop
+c01005f0:	c9                   	leave  
+c01005f1:	c3                   	ret    
+
+c01005f2 <debuginfo_eip>:
+ * the specified instruction address, @addr.  Returns 0 if information
+ * was found, and negative if not.  But even if it returns negative it
+ * has stored some information into '*info'.
+ * */
+int
+debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
+c01005f2:	55                   	push   %ebp
+c01005f3:	89 e5                	mov    %esp,%ebp
+c01005f5:	83 ec 38             	sub    $0x38,%esp
+    const struct stab *stabs, *stab_end;
+    const char *stabstr, *stabstr_end;
+
+    info->eip_file = "<unknown>";
+c01005f8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01005fb:	c7 00 88 89 10 c0    	movl   $0xc0108988,(%eax)
+    info->eip_line = 0;
+c0100601:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100604:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    info->eip_fn_name = "<unknown>";
+c010060b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010060e:	c7 40 08 88 89 10 c0 	movl   $0xc0108988,0x8(%eax)
+    info->eip_fn_namelen = 9;
+c0100615:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100618:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
+    info->eip_fn_addr = addr;
+c010061f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100622:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100625:	89 50 10             	mov    %edx,0x10(%eax)
+    info->eip_fn_narg = 0;
+c0100628:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010062b:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+
+    stabs = __STAB_BEGIN__;
+c0100632:	c7 45 f4 48 a8 10 c0 	movl   $0xc010a848,-0xc(%ebp)
+    stab_end = __STAB_END__;
+c0100639:	c7 45 f0 fc 9b 11 c0 	movl   $0xc0119bfc,-0x10(%ebp)
+    stabstr = __STABSTR_BEGIN__;
+c0100640:	c7 45 ec fd 9b 11 c0 	movl   $0xc0119bfd,-0x14(%ebp)
+    stabstr_end = __STABSTR_END__;
+c0100647:	c7 45 e8 45 d5 11 c0 	movl   $0xc011d545,-0x18(%ebp)
+
+    // String table validity checks
+    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
+c010064e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100651:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0100654:	76 0d                	jbe    c0100663 <debuginfo_eip+0x71>
+c0100656:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100659:	83 e8 01             	sub    $0x1,%eax
+c010065c:	0f b6 00             	movzbl (%eax),%eax
+c010065f:	84 c0                	test   %al,%al
+c0100661:	74 0a                	je     c010066d <debuginfo_eip+0x7b>
+        return -1;
+c0100663:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100668:	e9 91 02 00 00       	jmp    c01008fe <debuginfo_eip+0x30c>
+    // 'eip'.  First, we find the basic source file containing 'eip'.
+    // Then, we look in that source file for the function.  Then we look
+    // for the line number.
+
+    // Search the entire set of stabs for the source file (type N_SO).
+    int lfile = 0, rfile = (stab_end - stabs) - 1;
+c010066d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+c0100674:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100677:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010067a:	29 c2                	sub    %eax,%edx
+c010067c:	89 d0                	mov    %edx,%eax
+c010067e:	c1 f8 02             	sar    $0x2,%eax
+c0100681:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
+c0100687:	83 e8 01             	sub    $0x1,%eax
+c010068a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
+c010068d:	ff 75 08             	pushl  0x8(%ebp)
+c0100690:	6a 64                	push   $0x64
+c0100692:	8d 45 e0             	lea    -0x20(%ebp),%eax
+c0100695:	50                   	push   %eax
+c0100696:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+c0100699:	50                   	push   %eax
+c010069a:	ff 75 f4             	pushl  -0xc(%ebp)
+c010069d:	e8 f9 fd ff ff       	call   c010049b <stab_binsearch>
+c01006a2:	83 c4 14             	add    $0x14,%esp
+    if (lfile == 0)
+c01006a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006a8:	85 c0                	test   %eax,%eax
+c01006aa:	75 0a                	jne    c01006b6 <debuginfo_eip+0xc4>
+        return -1;
+c01006ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01006b1:	e9 48 02 00 00       	jmp    c01008fe <debuginfo_eip+0x30c>
+
+    // Search within that file's stabs for the function definition
+    // (N_FUN).
+    int lfun = lfile, rfun = rfile;
+c01006b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006b9:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01006bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01006bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    int lline, rline;
+    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
+c01006c2:	ff 75 08             	pushl  0x8(%ebp)
+c01006c5:	6a 24                	push   $0x24
+c01006c7:	8d 45 d8             	lea    -0x28(%ebp),%eax
+c01006ca:	50                   	push   %eax
+c01006cb:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c01006ce:	50                   	push   %eax
+c01006cf:	ff 75 f4             	pushl  -0xc(%ebp)
+c01006d2:	e8 c4 fd ff ff       	call   c010049b <stab_binsearch>
+c01006d7:	83 c4 14             	add    $0x14,%esp
+
+    if (lfun <= rfun) {
+c01006da:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01006dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01006e0:	39 c2                	cmp    %eax,%edx
+c01006e2:	7f 7c                	jg     c0100760 <debuginfo_eip+0x16e>
+        // stabs[lfun] points to the function name
+        // in the string table, but check bounds just in case.
+        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
+c01006e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01006e7:	89 c2                	mov    %eax,%edx
+c01006e9:	89 d0                	mov    %edx,%eax
+c01006eb:	01 c0                	add    %eax,%eax
+c01006ed:	01 d0                	add    %edx,%eax
+c01006ef:	c1 e0 02             	shl    $0x2,%eax
+c01006f2:	89 c2                	mov    %eax,%edx
+c01006f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01006f7:	01 d0                	add    %edx,%eax
+c01006f9:	8b 00                	mov    (%eax),%eax
+c01006fb:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c01006fe:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0100701:	29 d1                	sub    %edx,%ecx
+c0100703:	89 ca                	mov    %ecx,%edx
+c0100705:	39 d0                	cmp    %edx,%eax
+c0100707:	73 22                	jae    c010072b <debuginfo_eip+0x139>
+            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
+c0100709:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010070c:	89 c2                	mov    %eax,%edx
+c010070e:	89 d0                	mov    %edx,%eax
+c0100710:	01 c0                	add    %eax,%eax
+c0100712:	01 d0                	add    %edx,%eax
+c0100714:	c1 e0 02             	shl    $0x2,%eax
+c0100717:	89 c2                	mov    %eax,%edx
+c0100719:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010071c:	01 d0                	add    %edx,%eax
+c010071e:	8b 10                	mov    (%eax),%edx
+c0100720:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100723:	01 c2                	add    %eax,%edx
+c0100725:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100728:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+        info->eip_fn_addr = stabs[lfun].n_value;
+c010072b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010072e:	89 c2                	mov    %eax,%edx
+c0100730:	89 d0                	mov    %edx,%eax
+c0100732:	01 c0                	add    %eax,%eax
+c0100734:	01 d0                	add    %edx,%eax
+c0100736:	c1 e0 02             	shl    $0x2,%eax
+c0100739:	89 c2                	mov    %eax,%edx
+c010073b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010073e:	01 d0                	add    %edx,%eax
+c0100740:	8b 50 08             	mov    0x8(%eax),%edx
+c0100743:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100746:	89 50 10             	mov    %edx,0x10(%eax)
+        addr -= info->eip_fn_addr;
+c0100749:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010074c:	8b 40 10             	mov    0x10(%eax),%eax
+c010074f:	29 45 08             	sub    %eax,0x8(%ebp)
+        // Search within the function definition for the line number.
+        lline = lfun;
+c0100752:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100755:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        rline = rfun;
+c0100758:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010075b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010075e:	eb 15                	jmp    c0100775 <debuginfo_eip+0x183>
+    } else {
+        // Couldn't find function stab!  Maybe we're in an assembly
+        // file.  Search the whole file for the line number.
+        info->eip_fn_addr = addr;
+c0100760:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100763:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100766:	89 50 10             	mov    %edx,0x10(%eax)
+        lline = lfile;
+c0100769:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010076c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        rline = rfile;
+c010076f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0100772:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    }
+    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
+c0100775:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100778:	8b 40 08             	mov    0x8(%eax),%eax
+c010077b:	83 ec 08             	sub    $0x8,%esp
+c010077e:	6a 3a                	push   $0x3a
+c0100780:	50                   	push   %eax
+c0100781:	e8 18 77 00 00       	call   c0107e9e <strfind>
+c0100786:	83 c4 10             	add    $0x10,%esp
+c0100789:	89 c2                	mov    %eax,%edx
+c010078b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010078e:	8b 40 08             	mov    0x8(%eax),%eax
+c0100791:	29 c2                	sub    %eax,%edx
+c0100793:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100796:	89 50 0c             	mov    %edx,0xc(%eax)
+
+    // Search within [lline, rline] for the line number stab.
+    // If found, set info->eip_line to the right line number.
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+c0100799:	83 ec 0c             	sub    $0xc,%esp
+c010079c:	ff 75 08             	pushl  0x8(%ebp)
+c010079f:	6a 44                	push   $0x44
+c01007a1:	8d 45 d0             	lea    -0x30(%ebp),%eax
+c01007a4:	50                   	push   %eax
+c01007a5:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+c01007a8:	50                   	push   %eax
+c01007a9:	ff 75 f4             	pushl  -0xc(%ebp)
+c01007ac:	e8 ea fc ff ff       	call   c010049b <stab_binsearch>
+c01007b1:	83 c4 20             	add    $0x20,%esp
+    if (lline <= rline) {
+c01007b4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01007b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01007ba:	39 c2                	cmp    %eax,%edx
+c01007bc:	7f 24                	jg     c01007e2 <debuginfo_eip+0x1f0>
+        info->eip_line = stabs[rline].n_desc;
+c01007be:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01007c1:	89 c2                	mov    %eax,%edx
+c01007c3:	89 d0                	mov    %edx,%eax
+c01007c5:	01 c0                	add    %eax,%eax
+c01007c7:	01 d0                	add    %edx,%eax
+c01007c9:	c1 e0 02             	shl    $0x2,%eax
+c01007cc:	89 c2                	mov    %eax,%edx
+c01007ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01007d1:	01 d0                	add    %edx,%eax
+c01007d3:	0f b7 40 06          	movzwl 0x6(%eax),%eax
+c01007d7:	0f b7 d0             	movzwl %ax,%edx
+c01007da:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01007dd:	89 50 04             	mov    %edx,0x4(%eax)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c01007e0:	eb 13                	jmp    c01007f5 <debuginfo_eip+0x203>
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+    if (lline <= rline) {
+        info->eip_line = stabs[rline].n_desc;
+    } else {
+        return -1;
+c01007e2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01007e7:	e9 12 01 00 00       	jmp    c01008fe <debuginfo_eip+0x30c>
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+           && stabs[lline].n_type != N_SOL
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+        lline --;
+c01007ec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01007ef:	83 e8 01             	sub    $0x1,%eax
+c01007f2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c01007f5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01007f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01007fb:	39 c2                	cmp    %eax,%edx
+c01007fd:	7c 56                	jl     c0100855 <debuginfo_eip+0x263>
+           && stabs[lline].n_type != N_SOL
+c01007ff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100802:	89 c2                	mov    %eax,%edx
+c0100804:	89 d0                	mov    %edx,%eax
+c0100806:	01 c0                	add    %eax,%eax
+c0100808:	01 d0                	add    %edx,%eax
+c010080a:	c1 e0 02             	shl    $0x2,%eax
+c010080d:	89 c2                	mov    %eax,%edx
+c010080f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100812:	01 d0                	add    %edx,%eax
+c0100814:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100818:	3c 84                	cmp    $0x84,%al
+c010081a:	74 39                	je     c0100855 <debuginfo_eip+0x263>
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+c010081c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010081f:	89 c2                	mov    %eax,%edx
+c0100821:	89 d0                	mov    %edx,%eax
+c0100823:	01 c0                	add    %eax,%eax
+c0100825:	01 d0                	add    %edx,%eax
+c0100827:	c1 e0 02             	shl    $0x2,%eax
+c010082a:	89 c2                	mov    %eax,%edx
+c010082c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010082f:	01 d0                	add    %edx,%eax
+c0100831:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100835:	3c 64                	cmp    $0x64,%al
+c0100837:	75 b3                	jne    c01007ec <debuginfo_eip+0x1fa>
+c0100839:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010083c:	89 c2                	mov    %eax,%edx
+c010083e:	89 d0                	mov    %edx,%eax
+c0100840:	01 c0                	add    %eax,%eax
+c0100842:	01 d0                	add    %edx,%eax
+c0100844:	c1 e0 02             	shl    $0x2,%eax
+c0100847:	89 c2                	mov    %eax,%edx
+c0100849:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010084c:	01 d0                	add    %edx,%eax
+c010084e:	8b 40 08             	mov    0x8(%eax),%eax
+c0100851:	85 c0                	test   %eax,%eax
+c0100853:	74 97                	je     c01007ec <debuginfo_eip+0x1fa>
+        lline --;
+    }
+    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
+c0100855:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0100858:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010085b:	39 c2                	cmp    %eax,%edx
+c010085d:	7c 46                	jl     c01008a5 <debuginfo_eip+0x2b3>
+c010085f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100862:	89 c2                	mov    %eax,%edx
+c0100864:	89 d0                	mov    %edx,%eax
+c0100866:	01 c0                	add    %eax,%eax
+c0100868:	01 d0                	add    %edx,%eax
+c010086a:	c1 e0 02             	shl    $0x2,%eax
+c010086d:	89 c2                	mov    %eax,%edx
+c010086f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100872:	01 d0                	add    %edx,%eax
+c0100874:	8b 00                	mov    (%eax),%eax
+c0100876:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c0100879:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010087c:	29 d1                	sub    %edx,%ecx
+c010087e:	89 ca                	mov    %ecx,%edx
+c0100880:	39 d0                	cmp    %edx,%eax
+c0100882:	73 21                	jae    c01008a5 <debuginfo_eip+0x2b3>
+        info->eip_file = stabstr + stabs[lline].n_strx;
+c0100884:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100887:	89 c2                	mov    %eax,%edx
+c0100889:	89 d0                	mov    %edx,%eax
+c010088b:	01 c0                	add    %eax,%eax
+c010088d:	01 d0                	add    %edx,%eax
+c010088f:	c1 e0 02             	shl    $0x2,%eax
+c0100892:	89 c2                	mov    %eax,%edx
+c0100894:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100897:	01 d0                	add    %edx,%eax
+c0100899:	8b 10                	mov    (%eax),%edx
+c010089b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010089e:	01 c2                	add    %eax,%edx
+c01008a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01008a3:	89 10                	mov    %edx,(%eax)
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+c01008a5:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01008a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01008ab:	39 c2                	cmp    %eax,%edx
+c01008ad:	7d 4a                	jge    c01008f9 <debuginfo_eip+0x307>
+        for (lline = lfun + 1;
+c01008af:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01008b2:	83 c0 01             	add    $0x1,%eax
+c01008b5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c01008b8:	eb 18                	jmp    c01008d2 <debuginfo_eip+0x2e0>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+            info->eip_fn_narg ++;
+c01008ba:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01008bd:	8b 40 14             	mov    0x14(%eax),%eax
+c01008c0:	8d 50 01             	lea    0x1(%eax),%edx
+c01008c3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01008c6:	89 50 14             	mov    %edx,0x14(%eax)
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+c01008c9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01008cc:	83 c0 01             	add    $0x1,%eax
+c01008cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c01008d2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01008d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+c01008d8:	39 c2                	cmp    %eax,%edx
+c01008da:	7d 1d                	jge    c01008f9 <debuginfo_eip+0x307>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c01008dc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01008df:	89 c2                	mov    %eax,%edx
+c01008e1:	89 d0                	mov    %edx,%eax
+c01008e3:	01 c0                	add    %eax,%eax
+c01008e5:	01 d0                	add    %edx,%eax
+c01008e7:	c1 e0 02             	shl    $0x2,%eax
+c01008ea:	89 c2                	mov    %eax,%edx
+c01008ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008ef:	01 d0                	add    %edx,%eax
+c01008f1:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c01008f5:	3c a0                	cmp    $0xa0,%al
+c01008f7:	74 c1                	je     c01008ba <debuginfo_eip+0x2c8>
+             lline ++) {
+            info->eip_fn_narg ++;
+        }
+    }
+    return 0;
+c01008f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01008fe:	c9                   	leave  
+c01008ff:	c3                   	ret    
+
+c0100900 <print_kerninfo>:
+ * print_kerninfo - print the information about kernel, including the location
+ * of kernel entry, the start addresses of data and text segements, the start
+ * address of free memory and how many memory that kernel has used.
+ * */
+void
+print_kerninfo(void) {
+c0100900:	55                   	push   %ebp
+c0100901:	89 e5                	mov    %esp,%ebp
+c0100903:	83 ec 08             	sub    $0x8,%esp
+    extern char etext[], edata[], end[], kern_init[];
+    cprintf("Special kernel symbols:\n");
+c0100906:	83 ec 0c             	sub    $0xc,%esp
+c0100909:	68 92 89 10 c0       	push   $0xc0108992
+c010090e:	e8 63 f9 ff ff       	call   c0100276 <cprintf>
+c0100913:	83 c4 10             	add    $0x10,%esp
+    cprintf("  entry  0x%08x (phys)\n", kern_init);
+c0100916:	83 ec 08             	sub    $0x8,%esp
+c0100919:	68 2a 00 10 c0       	push   $0xc010002a
+c010091e:	68 ab 89 10 c0       	push   $0xc01089ab
+c0100923:	e8 4e f9 ff ff       	call   c0100276 <cprintf>
+c0100928:	83 c4 10             	add    $0x10,%esp
+    cprintf("  etext  0x%08x (phys)\n", etext);
+c010092b:	83 ec 08             	sub    $0x8,%esp
+c010092e:	68 99 88 10 c0       	push   $0xc0108899
+c0100933:	68 c3 89 10 c0       	push   $0xc01089c3
+c0100938:	e8 39 f9 ff ff       	call   c0100276 <cprintf>
+c010093d:	83 c4 10             	add    $0x10,%esp
+    cprintf("  edata  0x%08x (phys)\n", edata);
+c0100940:	83 ec 08             	sub    $0x8,%esp
+c0100943:	68 60 0a 12 c0       	push   $0xc0120a60
+c0100948:	68 db 89 10 c0       	push   $0xc01089db
+c010094d:	e8 24 f9 ff ff       	call   c0100276 <cprintf>
+c0100952:	83 c4 10             	add    $0x10,%esp
+    cprintf("  end    0x%08x (phys)\n", end);
+c0100955:	83 ec 08             	sub    $0x8,%esp
+c0100958:	68 5c 1b 12 c0       	push   $0xc0121b5c
+c010095d:	68 f3 89 10 c0       	push   $0xc01089f3
+c0100962:	e8 0f f9 ff ff       	call   c0100276 <cprintf>
+c0100967:	83 c4 10             	add    $0x10,%esp
+    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
+c010096a:	b8 5c 1b 12 c0       	mov    $0xc0121b5c,%eax
+c010096f:	05 ff 03 00 00       	add    $0x3ff,%eax
+c0100974:	ba 2a 00 10 c0       	mov    $0xc010002a,%edx
+c0100979:	29 d0                	sub    %edx,%eax
+c010097b:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
+c0100981:	85 c0                	test   %eax,%eax
+c0100983:	0f 48 c2             	cmovs  %edx,%eax
+c0100986:	c1 f8 0a             	sar    $0xa,%eax
+c0100989:	83 ec 08             	sub    $0x8,%esp
+c010098c:	50                   	push   %eax
+c010098d:	68 0c 8a 10 c0       	push   $0xc0108a0c
+c0100992:	e8 df f8 ff ff       	call   c0100276 <cprintf>
+c0100997:	83 c4 10             	add    $0x10,%esp
+}
+c010099a:	90                   	nop
+c010099b:	c9                   	leave  
+c010099c:	c3                   	ret    
+
+c010099d <print_debuginfo>:
+/* *
+ * print_debuginfo - read and print the stat information for the address @eip,
+ * and info.eip_fn_addr should be the first address of the related function.
+ * */
+void
+print_debuginfo(uintptr_t eip) {
+c010099d:	55                   	push   %ebp
+c010099e:	89 e5                	mov    %esp,%ebp
+c01009a0:	81 ec 28 01 00 00    	sub    $0x128,%esp
+    struct eipdebuginfo info;
+    if (debuginfo_eip(eip, &info) != 0) {
+c01009a6:	83 ec 08             	sub    $0x8,%esp
+c01009a9:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c01009ac:	50                   	push   %eax
+c01009ad:	ff 75 08             	pushl  0x8(%ebp)
+c01009b0:	e8 3d fc ff ff       	call   c01005f2 <debuginfo_eip>
+c01009b5:	83 c4 10             	add    $0x10,%esp
+c01009b8:	85 c0                	test   %eax,%eax
+c01009ba:	74 15                	je     c01009d1 <print_debuginfo+0x34>
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+c01009bc:	83 ec 08             	sub    $0x8,%esp
+c01009bf:	ff 75 08             	pushl  0x8(%ebp)
+c01009c2:	68 36 8a 10 c0       	push   $0xc0108a36
+c01009c7:	e8 aa f8 ff ff       	call   c0100276 <cprintf>
+c01009cc:	83 c4 10             	add    $0x10,%esp
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+c01009cf:	eb 65                	jmp    c0100a36 <print_debuginfo+0x99>
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c01009d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01009d8:	eb 1c                	jmp    c01009f6 <print_debuginfo+0x59>
+            fnname[j] = info.eip_fn_name[j];
+c01009da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01009e0:	01 d0                	add    %edx,%eax
+c01009e2:	0f b6 00             	movzbl (%eax),%eax
+c01009e5:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c01009eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01009ee:	01 ca                	add    %ecx,%edx
+c01009f0:	88 02                	mov    %al,(%edx)
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c01009f2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c01009f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01009f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01009fc:	7f dc                	jg     c01009da <print_debuginfo+0x3d>
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+c01009fe:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
+c0100a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100a07:	01 d0                	add    %edx,%eax
+c0100a09:	c6 00 00             	movb   $0x0,(%eax)
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+c0100a0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+c0100a0f:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100a12:	89 d1                	mov    %edx,%ecx
+c0100a14:	29 c1                	sub    %eax,%ecx
+c0100a16:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0100a19:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100a1c:	83 ec 0c             	sub    $0xc,%esp
+c0100a1f:	51                   	push   %ecx
+c0100a20:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100a26:	51                   	push   %ecx
+c0100a27:	52                   	push   %edx
+c0100a28:	50                   	push   %eax
+c0100a29:	68 52 8a 10 c0       	push   $0xc0108a52
+c0100a2e:	e8 43 f8 ff ff       	call   c0100276 <cprintf>
+c0100a33:	83 c4 20             	add    $0x20,%esp
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+c0100a36:	90                   	nop
+c0100a37:	c9                   	leave  
+c0100a38:	c3                   	ret    
+
+c0100a39 <read_eip>:
+
+static __noinline uint32_t
+read_eip(void) {
+c0100a39:	55                   	push   %ebp
+c0100a3a:	89 e5                	mov    %esp,%ebp
+c0100a3c:	83 ec 10             	sub    $0x10,%esp
+    uint32_t eip;
+    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
+c0100a3f:	8b 45 04             	mov    0x4(%ebp),%eax
+c0100a42:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return eip;
+c0100a45:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0100a48:	c9                   	leave  
+c0100a49:	c3                   	ret    
+
+c0100a4a <print_stackframe>:
+ *
+ * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
+ * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
+ * */
+void
+print_stackframe(void) {
+c0100a4a:	55                   	push   %ebp
+c0100a4b:	89 e5                	mov    %esp,%ebp
+c0100a4d:	53                   	push   %ebx
+c0100a4e:	83 ec 24             	sub    $0x24,%esp
+}
+
+static inline uint32_t
+read_ebp(void) {
+    uint32_t ebp;
+    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
+c0100a51:	89 e8                	mov    %ebp,%eax
+c0100a53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return ebp;
+c0100a56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
+      *    (3.5) popup a calling stackframe
+      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+	uint32_t ebp = read_ebp();
+c0100a59:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	uint32_t ra = read_eip(); 
+c0100a5c:	e8 d8 ff ff ff       	call   c0100a39 <read_eip>
+c0100a61:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	for (int i = 0; i < STACKFRAME_DEPTH && ebp != 0; ++ i) {
+c0100a64:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0100a6b:	eb 79                	jmp    c0100ae6 <print_stackframe+0x9c>
+		cprintf("ebp:0x%08x eip:0x%08x ", ebp, ra);
+c0100a6d:	83 ec 04             	sub    $0x4,%esp
+c0100a70:	ff 75 f0             	pushl  -0x10(%ebp)
+c0100a73:	ff 75 f4             	pushl  -0xc(%ebp)
+c0100a76:	68 64 8a 10 c0       	push   $0xc0108a64
+c0100a7b:	e8 f6 f7 ff ff       	call   c0100276 <cprintf>
+c0100a80:	83 c4 10             	add    $0x10,%esp
+		uint32_t* ptr = (uint32_t *) (ebp + 8);
+c0100a83:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100a86:	83 c0 08             	add    $0x8,%eax
+c0100a89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+		cprintf("args:0x%08x 0x%08x 0x%08x 0x%08x\n", ptr[0], ptr[1], ptr[2], ptr[3]);
+c0100a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100a8f:	83 c0 0c             	add    $0xc,%eax
+c0100a92:	8b 18                	mov    (%eax),%ebx
+c0100a94:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100a97:	83 c0 08             	add    $0x8,%eax
+c0100a9a:	8b 08                	mov    (%eax),%ecx
+c0100a9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100a9f:	83 c0 04             	add    $0x4,%eax
+c0100aa2:	8b 10                	mov    (%eax),%edx
+c0100aa4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100aa7:	8b 00                	mov    (%eax),%eax
+c0100aa9:	83 ec 0c             	sub    $0xc,%esp
+c0100aac:	53                   	push   %ebx
+c0100aad:	51                   	push   %ecx
+c0100aae:	52                   	push   %edx
+c0100aaf:	50                   	push   %eax
+c0100ab0:	68 7c 8a 10 c0       	push   $0xc0108a7c
+c0100ab5:	e8 bc f7 ff ff       	call   c0100276 <cprintf>
+c0100aba:	83 c4 20             	add    $0x20,%esp
+		print_debuginfo(ra - 1);
+c0100abd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100ac0:	83 e8 01             	sub    $0x1,%eax
+c0100ac3:	83 ec 0c             	sub    $0xc,%esp
+c0100ac6:	50                   	push   %eax
+c0100ac7:	e8 d1 fe ff ff       	call   c010099d <print_debuginfo>
+c0100acc:	83 c4 10             	add    $0x10,%esp
+		ra = *((uint32_t *) (ebp + 4));
+c0100acf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100ad2:	83 c0 04             	add    $0x4,%eax
+c0100ad5:	8b 00                	mov    (%eax),%eax
+c0100ad7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		ebp = *((uint32_t *) ebp);
+c0100ada:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100add:	8b 00                	mov    (%eax),%eax
+c0100adf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+	uint32_t ebp = read_ebp();
+	uint32_t ra = read_eip(); 
+	for (int i = 0; i < STACKFRAME_DEPTH && ebp != 0; ++ i) {
+c0100ae2:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0100ae6:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
+c0100aea:	7f 0a                	jg     c0100af6 <print_stackframe+0xac>
+c0100aec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100af0:	0f 85 77 ff ff ff    	jne    c0100a6d <print_stackframe+0x23>
+		cprintf("args:0x%08x 0x%08x 0x%08x 0x%08x\n", ptr[0], ptr[1], ptr[2], ptr[3]);
+		print_debuginfo(ra - 1);
+		ra = *((uint32_t *) (ebp + 4));
+		ebp = *((uint32_t *) ebp);
+	}
+}
+c0100af6:	90                   	nop
+c0100af7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c0100afa:	c9                   	leave  
+c0100afb:	c3                   	ret    
+
+c0100afc <parse>:
+#define MAXARGS         16
+#define WHITESPACE      " \t\n\r"
+
+/* parse - parse the command buffer into whitespace-separated arguments */
+static int
+parse(char *buf, char **argv) {
+c0100afc:	55                   	push   %ebp
+c0100afd:	89 e5                	mov    %esp,%ebp
+c0100aff:	83 ec 18             	sub    $0x18,%esp
+    int argc = 0;
+c0100b02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100b09:	eb 0c                	jmp    c0100b17 <parse+0x1b>
+            *buf ++ = '\0';
+c0100b0b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b0e:	8d 50 01             	lea    0x1(%eax),%edx
+c0100b11:	89 55 08             	mov    %edx,0x8(%ebp)
+c0100b14:	c6 00 00             	movb   $0x0,(%eax)
+static int
+parse(char *buf, char **argv) {
+    int argc = 0;
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100b17:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b1a:	0f b6 00             	movzbl (%eax),%eax
+c0100b1d:	84 c0                	test   %al,%al
+c0100b1f:	74 1e                	je     c0100b3f <parse+0x43>
+c0100b21:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b24:	0f b6 00             	movzbl (%eax),%eax
+c0100b27:	0f be c0             	movsbl %al,%eax
+c0100b2a:	83 ec 08             	sub    $0x8,%esp
+c0100b2d:	50                   	push   %eax
+c0100b2e:	68 20 8b 10 c0       	push   $0xc0108b20
+c0100b33:	e8 33 73 00 00       	call   c0107e6b <strchr>
+c0100b38:	83 c4 10             	add    $0x10,%esp
+c0100b3b:	85 c0                	test   %eax,%eax
+c0100b3d:	75 cc                	jne    c0100b0b <parse+0xf>
+            *buf ++ = '\0';
+        }
+        if (*buf == '\0') {
+c0100b3f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b42:	0f b6 00             	movzbl (%eax),%eax
+c0100b45:	84 c0                	test   %al,%al
+c0100b47:	74 69                	je     c0100bb2 <parse+0xb6>
+            break;
+        }
+
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+c0100b49:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+c0100b4d:	75 12                	jne    c0100b61 <parse+0x65>
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+c0100b4f:	83 ec 08             	sub    $0x8,%esp
+c0100b52:	6a 10                	push   $0x10
+c0100b54:	68 25 8b 10 c0       	push   $0xc0108b25
+c0100b59:	e8 18 f7 ff ff       	call   c0100276 <cprintf>
+c0100b5e:	83 c4 10             	add    $0x10,%esp
+        }
+        argv[argc ++] = buf;
+c0100b61:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b64:	8d 50 01             	lea    0x1(%eax),%edx
+c0100b67:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c0100b6a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0100b71:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100b74:	01 c2                	add    %eax,%edx
+c0100b76:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b79:	89 02                	mov    %eax,(%edx)
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100b7b:	eb 04                	jmp    c0100b81 <parse+0x85>
+            buf ++;
+c0100b7d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+        }
+        argv[argc ++] = buf;
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100b81:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b84:	0f b6 00             	movzbl (%eax),%eax
+c0100b87:	84 c0                	test   %al,%al
+c0100b89:	0f 84 7a ff ff ff    	je     c0100b09 <parse+0xd>
+c0100b8f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100b92:	0f b6 00             	movzbl (%eax),%eax
+c0100b95:	0f be c0             	movsbl %al,%eax
+c0100b98:	83 ec 08             	sub    $0x8,%esp
+c0100b9b:	50                   	push   %eax
+c0100b9c:	68 20 8b 10 c0       	push   $0xc0108b20
+c0100ba1:	e8 c5 72 00 00       	call   c0107e6b <strchr>
+c0100ba6:	83 c4 10             	add    $0x10,%esp
+c0100ba9:	85 c0                	test   %eax,%eax
+c0100bab:	74 d0                	je     c0100b7d <parse+0x81>
+            buf ++;
+        }
+    }
+c0100bad:	e9 57 ff ff ff       	jmp    c0100b09 <parse+0xd>
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+            *buf ++ = '\0';
+        }
+        if (*buf == '\0') {
+            break;
+c0100bb2:	90                   	nop
+        argv[argc ++] = buf;
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+            buf ++;
+        }
+    }
+    return argc;
+c0100bb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100bb6:	c9                   	leave  
+c0100bb7:	c3                   	ret    
+
+c0100bb8 <runcmd>:
+/* *
+ * runcmd - parse the input string, split it into separated arguments
+ * and then lookup and invoke some related commands/
+ * */
+static int
+runcmd(char *buf, struct trapframe *tf) {
+c0100bb8:	55                   	push   %ebp
+c0100bb9:	89 e5                	mov    %esp,%ebp
+c0100bbb:	83 ec 58             	sub    $0x58,%esp
+    char *argv[MAXARGS];
+    int argc = parse(buf, argv);
+c0100bbe:	83 ec 08             	sub    $0x8,%esp
+c0100bc1:	8d 45 b0             	lea    -0x50(%ebp),%eax
+c0100bc4:	50                   	push   %eax
+c0100bc5:	ff 75 08             	pushl  0x8(%ebp)
+c0100bc8:	e8 2f ff ff ff       	call   c0100afc <parse>
+c0100bcd:	83 c4 10             	add    $0x10,%esp
+c0100bd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (argc == 0) {
+c0100bd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100bd7:	75 0a                	jne    c0100be3 <runcmd+0x2b>
+        return 0;
+c0100bd9:	b8 00 00 00 00       	mov    $0x0,%eax
+c0100bde:	e9 83 00 00 00       	jmp    c0100c66 <runcmd+0xae>
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100be3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100bea:	eb 59                	jmp    c0100c45 <runcmd+0x8d>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+c0100bec:	8b 4d b0             	mov    -0x50(%ebp),%ecx
+c0100bef:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100bf2:	89 d0                	mov    %edx,%eax
+c0100bf4:	01 c0                	add    %eax,%eax
+c0100bf6:	01 d0                	add    %edx,%eax
+c0100bf8:	c1 e0 02             	shl    $0x2,%eax
+c0100bfb:	05 20 00 12 c0       	add    $0xc0120020,%eax
+c0100c00:	8b 00                	mov    (%eax),%eax
+c0100c02:	83 ec 08             	sub    $0x8,%esp
+c0100c05:	51                   	push   %ecx
+c0100c06:	50                   	push   %eax
+c0100c07:	e8 bf 71 00 00       	call   c0107dcb <strcmp>
+c0100c0c:	83 c4 10             	add    $0x10,%esp
+c0100c0f:	85 c0                	test   %eax,%eax
+c0100c11:	75 2e                	jne    c0100c41 <runcmd+0x89>
+            return commands[i].func(argc - 1, argv + 1, tf);
+c0100c13:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100c16:	89 d0                	mov    %edx,%eax
+c0100c18:	01 c0                	add    %eax,%eax
+c0100c1a:	01 d0                	add    %edx,%eax
+c0100c1c:	c1 e0 02             	shl    $0x2,%eax
+c0100c1f:	05 28 00 12 c0       	add    $0xc0120028,%eax
+c0100c24:	8b 10                	mov    (%eax),%edx
+c0100c26:	8d 45 b0             	lea    -0x50(%ebp),%eax
+c0100c29:	83 c0 04             	add    $0x4,%eax
+c0100c2c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c0100c2f:	83 e9 01             	sub    $0x1,%ecx
+c0100c32:	83 ec 04             	sub    $0x4,%esp
+c0100c35:	ff 75 0c             	pushl  0xc(%ebp)
+c0100c38:	50                   	push   %eax
+c0100c39:	51                   	push   %ecx
+c0100c3a:	ff d2                	call   *%edx
+c0100c3c:	83 c4 10             	add    $0x10,%esp
+c0100c3f:	eb 25                	jmp    c0100c66 <runcmd+0xae>
+    int argc = parse(buf, argv);
+    if (argc == 0) {
+        return 0;
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100c41:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100c48:	83 f8 02             	cmp    $0x2,%eax
+c0100c4b:	76 9f                	jbe    c0100bec <runcmd+0x34>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+            return commands[i].func(argc - 1, argv + 1, tf);
+        }
+    }
+    cprintf("Unknown command '%s'\n", argv[0]);
+c0100c4d:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0100c50:	83 ec 08             	sub    $0x8,%esp
+c0100c53:	50                   	push   %eax
+c0100c54:	68 43 8b 10 c0       	push   $0xc0108b43
+c0100c59:	e8 18 f6 ff ff       	call   c0100276 <cprintf>
+c0100c5e:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c0100c61:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100c66:	c9                   	leave  
+c0100c67:	c3                   	ret    
+
+c0100c68 <kmonitor>:
+
+/***** Implementations of basic kernel monitor commands *****/
+
+void
+kmonitor(struct trapframe *tf) {
+c0100c68:	55                   	push   %ebp
+c0100c69:	89 e5                	mov    %esp,%ebp
+c0100c6b:	83 ec 18             	sub    $0x18,%esp
+    cprintf("Welcome to the kernel debug monitor!!\n");
+c0100c6e:	83 ec 0c             	sub    $0xc,%esp
+c0100c71:	68 5c 8b 10 c0       	push   $0xc0108b5c
+c0100c76:	e8 fb f5 ff ff       	call   c0100276 <cprintf>
+c0100c7b:	83 c4 10             	add    $0x10,%esp
+    cprintf("Type 'help' for a list of commands.\n");
+c0100c7e:	83 ec 0c             	sub    $0xc,%esp
+c0100c81:	68 84 8b 10 c0       	push   $0xc0108b84
+c0100c86:	e8 eb f5 ff ff       	call   c0100276 <cprintf>
+c0100c8b:	83 c4 10             	add    $0x10,%esp
+
+    if (tf != NULL) {
+c0100c8e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100c92:	74 0e                	je     c0100ca2 <kmonitor+0x3a>
+        print_trapframe(tf);
+c0100c94:	83 ec 0c             	sub    $0xc,%esp
+c0100c97:	ff 75 08             	pushl  0x8(%ebp)
+c0100c9a:	e8 e7 16 00 00       	call   c0102386 <print_trapframe>
+c0100c9f:	83 c4 10             	add    $0x10,%esp
+    }
+
+    char *buf;
+    while (1) {
+        if ((buf = readline("K> ")) != NULL) {
+c0100ca2:	83 ec 0c             	sub    $0xc,%esp
+c0100ca5:	68 a9 8b 10 c0       	push   $0xc0108ba9
+c0100caa:	e8 6b f6 ff ff       	call   c010031a <readline>
+c0100caf:	83 c4 10             	add    $0x10,%esp
+c0100cb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0100cb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100cb9:	74 e7                	je     c0100ca2 <kmonitor+0x3a>
+            if (runcmd(buf, tf) < 0) {
+c0100cbb:	83 ec 08             	sub    $0x8,%esp
+c0100cbe:	ff 75 08             	pushl  0x8(%ebp)
+c0100cc1:	ff 75 f4             	pushl  -0xc(%ebp)
+c0100cc4:	e8 ef fe ff ff       	call   c0100bb8 <runcmd>
+c0100cc9:	83 c4 10             	add    $0x10,%esp
+c0100ccc:	85 c0                	test   %eax,%eax
+c0100cce:	78 02                	js     c0100cd2 <kmonitor+0x6a>
+                break;
+            }
+        }
+    }
+c0100cd0:	eb d0                	jmp    c0100ca2 <kmonitor+0x3a>
+
+    char *buf;
+    while (1) {
+        if ((buf = readline("K> ")) != NULL) {
+            if (runcmd(buf, tf) < 0) {
+                break;
+c0100cd2:	90                   	nop
+            }
+        }
+    }
+}
+c0100cd3:	90                   	nop
+c0100cd4:	c9                   	leave  
+c0100cd5:	c3                   	ret    
+
+c0100cd6 <mon_help>:
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+c0100cd6:	55                   	push   %ebp
+c0100cd7:	89 e5                	mov    %esp,%ebp
+c0100cd9:	83 ec 18             	sub    $0x18,%esp
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100cdc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100ce3:	eb 3c                	jmp    c0100d21 <mon_help+0x4b>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+c0100ce5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100ce8:	89 d0                	mov    %edx,%eax
+c0100cea:	01 c0                	add    %eax,%eax
+c0100cec:	01 d0                	add    %edx,%eax
+c0100cee:	c1 e0 02             	shl    $0x2,%eax
+c0100cf1:	05 24 00 12 c0       	add    $0xc0120024,%eax
+c0100cf6:	8b 08                	mov    (%eax),%ecx
+c0100cf8:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100cfb:	89 d0                	mov    %edx,%eax
+c0100cfd:	01 c0                	add    %eax,%eax
+c0100cff:	01 d0                	add    %edx,%eax
+c0100d01:	c1 e0 02             	shl    $0x2,%eax
+c0100d04:	05 20 00 12 c0       	add    $0xc0120020,%eax
+c0100d09:	8b 00                	mov    (%eax),%eax
+c0100d0b:	83 ec 04             	sub    $0x4,%esp
+c0100d0e:	51                   	push   %ecx
+c0100d0f:	50                   	push   %eax
+c0100d10:	68 ad 8b 10 c0       	push   $0xc0108bad
+c0100d15:	e8 5c f5 ff ff       	call   c0100276 <cprintf>
+c0100d1a:	83 c4 10             	add    $0x10,%esp
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100d1d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100d21:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100d24:	83 f8 02             	cmp    $0x2,%eax
+c0100d27:	76 bc                	jbe    c0100ce5 <mon_help+0xf>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+    }
+    return 0;
+c0100d29:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100d2e:	c9                   	leave  
+c0100d2f:	c3                   	ret    
+
+c0100d30 <mon_kerninfo>:
+/* *
+ * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
+ * print the memory occupancy in kernel.
+ * */
+int
+mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
+c0100d30:	55                   	push   %ebp
+c0100d31:	89 e5                	mov    %esp,%ebp
+c0100d33:	83 ec 08             	sub    $0x8,%esp
+    print_kerninfo();
+c0100d36:	e8 c5 fb ff ff       	call   c0100900 <print_kerninfo>
+    return 0;
+c0100d3b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100d40:	c9                   	leave  
+c0100d41:	c3                   	ret    
+
+c0100d42 <mon_backtrace>:
+/* *
+ * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
+ * print a backtrace of the stack.
+ * */
+int
+mon_backtrace(int argc, char **argv, struct trapframe *tf) {
+c0100d42:	55                   	push   %ebp
+c0100d43:	89 e5                	mov    %esp,%ebp
+c0100d45:	83 ec 08             	sub    $0x8,%esp
+    print_stackframe();
+c0100d48:	e8 fd fc ff ff       	call   c0100a4a <print_stackframe>
+    return 0;
+c0100d4d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100d52:	c9                   	leave  
+c0100d53:	c3                   	ret    
+
+c0100d54 <ide_wait_ready>:
+    unsigned int size;          // Size in Sectors
+    unsigned char model[41];    // Model in String
+} ide_devices[MAX_IDE];
+
+static int
+ide_wait_ready(unsigned short iobase, bool check_error) {
+c0100d54:	55                   	push   %ebp
+c0100d55:	89 e5                	mov    %esp,%ebp
+c0100d57:	83 ec 14             	sub    $0x14,%esp
+c0100d5a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100d5d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    int r;
+    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
+c0100d61:	90                   	nop
+c0100d62:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0100d66:	83 c0 07             	add    $0x7,%eax
+c0100d69:	0f b7 c0             	movzwl %ax,%eax
+c0100d6c:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100d70:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0100d74:	89 c2                	mov    %eax,%edx
+c0100d76:	ec                   	in     (%dx),%al
+c0100d77:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c0100d7a:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c0100d7e:	0f b6 c0             	movzbl %al,%eax
+c0100d81:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0100d84:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100d87:	25 80 00 00 00       	and    $0x80,%eax
+c0100d8c:	85 c0                	test   %eax,%eax
+c0100d8e:	75 d2                	jne    c0100d62 <ide_wait_ready+0xe>
+        /* nothing */;
+    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
+c0100d90:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0100d94:	74 11                	je     c0100da7 <ide_wait_ready+0x53>
+c0100d96:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100d99:	83 e0 21             	and    $0x21,%eax
+c0100d9c:	85 c0                	test   %eax,%eax
+c0100d9e:	74 07                	je     c0100da7 <ide_wait_ready+0x53>
+        return -1;
+c0100da0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100da5:	eb 05                	jmp    c0100dac <ide_wait_ready+0x58>
+    }
+    return 0;
+c0100da7:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100dac:	c9                   	leave  
+c0100dad:	c3                   	ret    
+
+c0100dae <ide_init>:
+
+void
+ide_init(void) {
+c0100dae:	55                   	push   %ebp
+c0100daf:	89 e5                	mov    %esp,%ebp
+c0100db1:	57                   	push   %edi
+c0100db2:	53                   	push   %ebx
+c0100db3:	81 ec 40 02 00 00    	sub    $0x240,%esp
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c0100db9:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
+c0100dbf:	e9 c6 02 00 00       	jmp    c010108a <ide_init+0x2dc>
+        /* assume that no device here */
+        ide_devices[ideno].valid = 0;
+c0100dc4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100dc8:	c1 e0 03             	shl    $0x3,%eax
+c0100dcb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0100dd2:	29 c2                	sub    %eax,%edx
+c0100dd4:	89 d0                	mov    %edx,%eax
+c0100dd6:	05 a0 0e 12 c0       	add    $0xc0120ea0,%eax
+c0100ddb:	c6 00 00             	movb   $0x0,(%eax)
+
+        iobase = IO_BASE(ideno);
+c0100dde:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100de2:	66 d1 e8             	shr    %ax
+c0100de5:	0f b7 c0             	movzwl %ax,%eax
+c0100de8:	0f b7 04 85 b8 8b 10 	movzwl -0x3fef7448(,%eax,4),%eax
+c0100def:	c0 
+c0100df0:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+
+        /* wait device ready */
+        ide_wait_ready(iobase, 0);
+c0100df4:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100df8:	6a 00                	push   $0x0
+c0100dfa:	50                   	push   %eax
+c0100dfb:	e8 54 ff ff ff       	call   c0100d54 <ide_wait_ready>
+c0100e00:	83 c4 08             	add    $0x8,%esp
+
+        /* step1: select drive */
+        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
+c0100e03:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100e07:	83 e0 01             	and    $0x1,%eax
+c0100e0a:	c1 e0 04             	shl    $0x4,%eax
+c0100e0d:	83 c8 e0             	or     $0xffffffe0,%eax
+c0100e10:	0f b6 c0             	movzbl %al,%eax
+c0100e13:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0100e17:	83 c2 06             	add    $0x6,%edx
+c0100e1a:	0f b7 d2             	movzwl %dx,%edx
+c0100e1d:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c0100e21:	88 45 c7             	mov    %al,-0x39(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0100e24:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+c0100e28:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0100e2c:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c0100e2d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100e31:	6a 00                	push   $0x0
+c0100e33:	50                   	push   %eax
+c0100e34:	e8 1b ff ff ff       	call   c0100d54 <ide_wait_ready>
+c0100e39:	83 c4 08             	add    $0x8,%esp
+
+        /* step2: send ATA identify command */
+        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
+c0100e3c:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100e40:	83 c0 07             	add    $0x7,%eax
+c0100e43:	0f b7 c0             	movzwl %ax,%eax
+c0100e46:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
+c0100e4a:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
+c0100e4e:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
+c0100e52:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
+c0100e56:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c0100e57:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100e5b:	6a 00                	push   $0x0
+c0100e5d:	50                   	push   %eax
+c0100e5e:	e8 f1 fe ff ff       	call   c0100d54 <ide_wait_ready>
+c0100e63:	83 c4 08             	add    $0x8,%esp
+
+        /* step3: polling */
+        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
+c0100e66:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100e6a:	83 c0 07             	add    $0x7,%eax
+c0100e6d:	0f b7 c0             	movzwl %ax,%eax
+c0100e70:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100e74:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
+c0100e78:	89 c2                	mov    %eax,%edx
+c0100e7a:	ec                   	in     (%dx),%al
+c0100e7b:	88 45 c9             	mov    %al,-0x37(%ebp)
+    return data;
+c0100e7e:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
+c0100e82:	84 c0                	test   %al,%al
+c0100e84:	0f 84 f4 01 00 00    	je     c010107e <ide_init+0x2d0>
+c0100e8a:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100e8e:	6a 01                	push   $0x1
+c0100e90:	50                   	push   %eax
+c0100e91:	e8 be fe ff ff       	call   c0100d54 <ide_wait_ready>
+c0100e96:	83 c4 08             	add    $0x8,%esp
+c0100e99:	85 c0                	test   %eax,%eax
+c0100e9b:	0f 85 dd 01 00 00    	jne    c010107e <ide_init+0x2d0>
+            continue ;
+        }
+
+        /* device is ok */
+        ide_devices[ideno].valid = 1;
+c0100ea1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100ea5:	c1 e0 03             	shl    $0x3,%eax
+c0100ea8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0100eaf:	29 c2                	sub    %eax,%edx
+c0100eb1:	89 d0                	mov    %edx,%eax
+c0100eb3:	05 a0 0e 12 c0       	add    $0xc0120ea0,%eax
+c0100eb8:	c6 00 01             	movb   $0x1,(%eax)
+
+        /* read identification space of the device */
+        unsigned int buffer[128];
+        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
+c0100ebb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100ebf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0100ec2:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0100ec8:	89 45 c0             	mov    %eax,-0x40(%ebp)
+c0100ecb:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+c0100ed2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0100ed5:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+c0100ed8:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0100edb:	89 cb                	mov    %ecx,%ebx
+c0100edd:	89 df                	mov    %ebx,%edi
+c0100edf:	89 c1                	mov    %eax,%ecx
+c0100ee1:	fc                   	cld    
+c0100ee2:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0100ee4:	89 c8                	mov    %ecx,%eax
+c0100ee6:	89 fb                	mov    %edi,%ebx
+c0100ee8:	89 5d c0             	mov    %ebx,-0x40(%ebp)
+c0100eeb:	89 45 bc             	mov    %eax,-0x44(%ebp)
+
+        unsigned char *ident = (unsigned char *)buffer;
+c0100eee:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0100ef4:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        unsigned int sectors;
+        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
+c0100ef7:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100efa:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+c0100f00:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        /* device use 48-bits or 28-bits addressing */
+        if (cmdsets & (1 << 26)) {
+c0100f03:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0100f06:	25 00 00 00 04       	and    $0x4000000,%eax
+c0100f0b:	85 c0                	test   %eax,%eax
+c0100f0d:	74 0e                	je     c0100f1d <ide_init+0x16f>
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
+c0100f0f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100f12:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
+c0100f18:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0100f1b:	eb 09                	jmp    c0100f26 <ide_init+0x178>
+        }
+        else {
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
+c0100f1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100f20:	8b 40 78             	mov    0x78(%eax),%eax
+c0100f23:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        }
+        ide_devices[ideno].sets = cmdsets;
+c0100f26:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100f2a:	c1 e0 03             	shl    $0x3,%eax
+c0100f2d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0100f34:	29 c2                	sub    %eax,%edx
+c0100f36:	89 d0                	mov    %edx,%eax
+c0100f38:	8d 90 a4 0e 12 c0    	lea    -0x3fedf15c(%eax),%edx
+c0100f3e:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0100f41:	89 02                	mov    %eax,(%edx)
+        ide_devices[ideno].size = sectors;
+c0100f43:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100f47:	c1 e0 03             	shl    $0x3,%eax
+c0100f4a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0100f51:	29 c2                	sub    %eax,%edx
+c0100f53:	89 d0                	mov    %edx,%eax
+c0100f55:	8d 90 a8 0e 12 c0    	lea    -0x3fedf158(%eax),%edx
+c0100f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100f5e:	89 02                	mov    %eax,(%edx)
+
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+c0100f60:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100f63:	83 c0 62             	add    $0x62,%eax
+c0100f66:	0f b7 00             	movzwl (%eax),%eax
+c0100f69:	0f b7 c0             	movzwl %ax,%eax
+c0100f6c:	25 00 02 00 00       	and    $0x200,%eax
+c0100f71:	85 c0                	test   %eax,%eax
+c0100f73:	75 1b                	jne    c0100f90 <ide_init+0x1e2>
+c0100f75:	e8 d0 fa ff ff       	call   c0100a4a <print_stackframe>
+c0100f7a:	68 c0 8b 10 c0       	push   $0xc0108bc0
+c0100f7f:	68 03 8c 10 c0       	push   $0xc0108c03
+c0100f84:	6a 7d                	push   $0x7d
+c0100f86:	68 18 8c 10 c0       	push   $0xc0108c18
+c0100f8b:	e8 4c f4 ff ff       	call   c01003dc <__panic>
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+c0100f90:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100f94:	89 c2                	mov    %eax,%edx
+c0100f96:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
+c0100f9d:	89 c2                	mov    %eax,%edx
+c0100f9f:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
+c0100fa6:	29 d0                	sub    %edx,%eax
+c0100fa8:	05 a0 0e 12 c0       	add    $0xc0120ea0,%eax
+c0100fad:	83 c0 0c             	add    $0xc,%eax
+c0100fb0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c0100fb3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100fb6:	83 c0 36             	add    $0x36,%eax
+c0100fb9:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        unsigned int i, length = 40;
+c0100fbc:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
+        for (i = 0; i < length; i += 2) {
+c0100fc3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0100fca:	eb 34                	jmp    c0101000 <ide_init+0x252>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+c0100fcc:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0100fcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100fd2:	01 c2                	add    %eax,%edx
+c0100fd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100fd7:	8d 48 01             	lea    0x1(%eax),%ecx
+c0100fda:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0100fdd:	01 c8                	add    %ecx,%eax
+c0100fdf:	0f b6 00             	movzbl (%eax),%eax
+c0100fe2:	88 02                	mov    %al,(%edx)
+c0100fe4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100fe7:	8d 50 01             	lea    0x1(%eax),%edx
+c0100fea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100fed:	01 c2                	add    %eax,%edx
+c0100fef:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+c0100ff2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100ff5:	01 c8                	add    %ecx,%eax
+c0100ff7:	0f b6 00             	movzbl (%eax),%eax
+c0100ffa:	88 02                	mov    %al,(%edx)
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+        unsigned int i, length = 40;
+        for (i = 0; i < length; i += 2) {
+c0100ffc:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
+c0101000:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101003:	3b 45 cc             	cmp    -0x34(%ebp),%eax
+c0101006:	72 c4                	jb     c0100fcc <ide_init+0x21e>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+        }
+        do {
+            model[i] = '\0';
+c0101008:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010100b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010100e:	01 d0                	add    %edx,%eax
+c0101010:	c6 00 00             	movb   $0x0,(%eax)
+        } while (i -- > 0 && model[i] == ' ');
+c0101013:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101016:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0101019:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010101c:	85 c0                	test   %eax,%eax
+c010101e:	74 0f                	je     c010102f <ide_init+0x281>
+c0101020:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0101023:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101026:	01 d0                	add    %edx,%eax
+c0101028:	0f b6 00             	movzbl (%eax),%eax
+c010102b:	3c 20                	cmp    $0x20,%al
+c010102d:	74 d9                	je     c0101008 <ide_init+0x25a>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+c010102f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101033:	89 c2                	mov    %eax,%edx
+c0101035:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
+c010103c:	89 c2                	mov    %eax,%edx
+c010103e:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
+c0101045:	29 d0                	sub    %edx,%eax
+c0101047:	05 a0 0e 12 c0       	add    $0xc0120ea0,%eax
+c010104c:	8d 48 0c             	lea    0xc(%eax),%ecx
+c010104f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101053:	c1 e0 03             	shl    $0x3,%eax
+c0101056:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010105d:	29 c2                	sub    %eax,%edx
+c010105f:	89 d0                	mov    %edx,%eax
+c0101061:	05 a8 0e 12 c0       	add    $0xc0120ea8,%eax
+c0101066:	8b 10                	mov    (%eax),%edx
+c0101068:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010106c:	51                   	push   %ecx
+c010106d:	52                   	push   %edx
+c010106e:	50                   	push   %eax
+c010106f:	68 2a 8c 10 c0       	push   $0xc0108c2a
+c0101074:	e8 fd f1 ff ff       	call   c0100276 <cprintf>
+c0101079:	83 c4 10             	add    $0x10,%esp
+c010107c:	eb 01                	jmp    c010107f <ide_init+0x2d1>
+        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
+        ide_wait_ready(iobase, 0);
+
+        /* step3: polling */
+        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
+            continue ;
+c010107e:	90                   	nop
+
+void
+ide_init(void) {
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c010107f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101083:	83 c0 01             	add    $0x1,%eax
+c0101086:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+c010108a:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
+c010108f:	0f 86 2f fd ff ff    	jbe    c0100dc4 <ide_init+0x16>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+    }
+
+    // enable ide interrupt
+    pic_enable(IRQ_IDE1);
+c0101095:	83 ec 0c             	sub    $0xc,%esp
+c0101098:	6a 0e                	push   $0xe
+c010109a:	e8 9e 0e 00 00       	call   c0101f3d <pic_enable>
+c010109f:	83 c4 10             	add    $0x10,%esp
+    pic_enable(IRQ_IDE2);
+c01010a2:	83 ec 0c             	sub    $0xc,%esp
+c01010a5:	6a 0f                	push   $0xf
+c01010a7:	e8 91 0e 00 00       	call   c0101f3d <pic_enable>
+c01010ac:	83 c4 10             	add    $0x10,%esp
+}
+c01010af:	90                   	nop
+c01010b0:	8d 65 f8             	lea    -0x8(%ebp),%esp
+c01010b3:	5b                   	pop    %ebx
+c01010b4:	5f                   	pop    %edi
+c01010b5:	5d                   	pop    %ebp
+c01010b6:	c3                   	ret    
+
+c01010b7 <ide_device_valid>:
+
+bool
+ide_device_valid(unsigned short ideno) {
+c01010b7:	55                   	push   %ebp
+c01010b8:	89 e5                	mov    %esp,%ebp
+c01010ba:	83 ec 04             	sub    $0x4,%esp
+c01010bd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01010c0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    return VALID_IDE(ideno);
+c01010c4:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
+c01010c9:	77 25                	ja     c01010f0 <ide_device_valid+0x39>
+c01010cb:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c01010cf:	c1 e0 03             	shl    $0x3,%eax
+c01010d2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c01010d9:	29 c2                	sub    %eax,%edx
+c01010db:	89 d0                	mov    %edx,%eax
+c01010dd:	05 a0 0e 12 c0       	add    $0xc0120ea0,%eax
+c01010e2:	0f b6 00             	movzbl (%eax),%eax
+c01010e5:	84 c0                	test   %al,%al
+c01010e7:	74 07                	je     c01010f0 <ide_device_valid+0x39>
+c01010e9:	b8 01 00 00 00       	mov    $0x1,%eax
+c01010ee:	eb 05                	jmp    c01010f5 <ide_device_valid+0x3e>
+c01010f0:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01010f5:	c9                   	leave  
+c01010f6:	c3                   	ret    
+
+c01010f7 <ide_device_size>:
+
+size_t
+ide_device_size(unsigned short ideno) {
+c01010f7:	55                   	push   %ebp
+c01010f8:	89 e5                	mov    %esp,%ebp
+c01010fa:	83 ec 04             	sub    $0x4,%esp
+c01010fd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101100:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    if (ide_device_valid(ideno)) {
+c0101104:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101108:	50                   	push   %eax
+c0101109:	e8 a9 ff ff ff       	call   c01010b7 <ide_device_valid>
+c010110e:	83 c4 04             	add    $0x4,%esp
+c0101111:	85 c0                	test   %eax,%eax
+c0101113:	74 1b                	je     c0101130 <ide_device_size+0x39>
+        return ide_devices[ideno].size;
+c0101115:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101119:	c1 e0 03             	shl    $0x3,%eax
+c010111c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101123:	29 c2                	sub    %eax,%edx
+c0101125:	89 d0                	mov    %edx,%eax
+c0101127:	05 a8 0e 12 c0       	add    $0xc0120ea8,%eax
+c010112c:	8b 00                	mov    (%eax),%eax
+c010112e:	eb 05                	jmp    c0101135 <ide_device_size+0x3e>
+    }
+    return 0;
+c0101130:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101135:	c9                   	leave  
+c0101136:	c3                   	ret    
+
+c0101137 <ide_read_secs>:
+
+int
+ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
+c0101137:	55                   	push   %ebp
+c0101138:	89 e5                	mov    %esp,%ebp
+c010113a:	57                   	push   %edi
+c010113b:	53                   	push   %ebx
+c010113c:	83 ec 40             	sub    $0x40,%esp
+c010113f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101142:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c0101146:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c010114d:	77 25                	ja     c0101174 <ide_read_secs+0x3d>
+c010114f:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
+c0101154:	77 1e                	ja     c0101174 <ide_read_secs+0x3d>
+c0101156:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c010115a:	c1 e0 03             	shl    $0x3,%eax
+c010115d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101164:	29 c2                	sub    %eax,%edx
+c0101166:	89 d0                	mov    %edx,%eax
+c0101168:	05 a0 0e 12 c0       	add    $0xc0120ea0,%eax
+c010116d:	0f b6 00             	movzbl (%eax),%eax
+c0101170:	84 c0                	test   %al,%al
+c0101172:	75 1e                	jne    c0101192 <ide_read_secs+0x5b>
+c0101174:	e8 d1 f8 ff ff       	call   c0100a4a <print_stackframe>
+c0101179:	68 48 8c 10 c0       	push   $0xc0108c48
+c010117e:	68 03 8c 10 c0       	push   $0xc0108c03
+c0101183:	68 9f 00 00 00       	push   $0x9f
+c0101188:	68 18 8c 10 c0       	push   $0xc0108c18
+c010118d:	e8 4a f2 ff ff       	call   c01003dc <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c0101192:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c0101199:	77 0f                	ja     c01011aa <ide_read_secs+0x73>
+c010119b:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010119e:	8b 45 14             	mov    0x14(%ebp),%eax
+c01011a1:	01 d0                	add    %edx,%eax
+c01011a3:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c01011a8:	76 1e                	jbe    c01011c8 <ide_read_secs+0x91>
+c01011aa:	e8 9b f8 ff ff       	call   c0100a4a <print_stackframe>
+c01011af:	68 70 8c 10 c0       	push   $0xc0108c70
+c01011b4:	68 03 8c 10 c0       	push   $0xc0108c03
+c01011b9:	68 a0 00 00 00       	push   $0xa0
+c01011be:	68 18 8c 10 c0       	push   $0xc0108c18
+c01011c3:	e8 14 f2 ff ff       	call   c01003dc <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c01011c8:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01011cc:	66 d1 e8             	shr    %ax
+c01011cf:	0f b7 c0             	movzwl %ax,%eax
+c01011d2:	0f b7 04 85 b8 8b 10 	movzwl -0x3fef7448(,%eax,4),%eax
+c01011d9:	c0 
+c01011da:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c01011de:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01011e2:	66 d1 e8             	shr    %ax
+c01011e5:	0f b7 c0             	movzwl %ax,%eax
+c01011e8:	0f b7 04 85 ba 8b 10 	movzwl -0x3fef7446(,%eax,4),%eax
+c01011ef:	c0 
+c01011f0:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c01011f4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01011f8:	83 ec 08             	sub    $0x8,%esp
+c01011fb:	6a 00                	push   $0x0
+c01011fd:	50                   	push   %eax
+c01011fe:	e8 51 fb ff ff       	call   c0100d54 <ide_wait_ready>
+c0101203:	83 c4 10             	add    $0x10,%esp
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c0101206:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c010120a:	83 c0 02             	add    $0x2,%eax
+c010120d:	0f b7 c0             	movzwl %ax,%eax
+c0101210:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+c0101214:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101218:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
+c010121c:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101220:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c0101221:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101224:	0f b6 c0             	movzbl %al,%eax
+c0101227:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c010122b:	83 c2 02             	add    $0x2,%edx
+c010122e:	0f b7 d2             	movzwl %dx,%edx
+c0101231:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
+c0101235:	88 45 d8             	mov    %al,-0x28(%ebp)
+c0101238:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
+c010123c:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
+c0101240:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c0101241:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101244:	0f b6 c0             	movzbl %al,%eax
+c0101247:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c010124b:	83 c2 03             	add    $0x3,%edx
+c010124e:	0f b7 d2             	movzwl %dx,%edx
+c0101251:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c0101255:	88 45 d9             	mov    %al,-0x27(%ebp)
+c0101258:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c010125c:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101260:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c0101261:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101264:	c1 e8 08             	shr    $0x8,%eax
+c0101267:	0f b6 c0             	movzbl %al,%eax
+c010126a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c010126e:	83 c2 04             	add    $0x4,%edx
+c0101271:	0f b7 d2             	movzwl %dx,%edx
+c0101274:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
+c0101278:	88 45 da             	mov    %al,-0x26(%ebp)
+c010127b:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
+c010127f:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
+c0101283:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c0101284:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101287:	c1 e8 10             	shr    $0x10,%eax
+c010128a:	0f b6 c0             	movzbl %al,%eax
+c010128d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101291:	83 c2 05             	add    $0x5,%edx
+c0101294:	0f b7 d2             	movzwl %dx,%edx
+c0101297:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c010129b:	88 45 db             	mov    %al,-0x25(%ebp)
+c010129e:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
+c01012a2:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c01012a6:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c01012a7:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01012ab:	83 e0 01             	and    $0x1,%eax
+c01012ae:	c1 e0 04             	shl    $0x4,%eax
+c01012b1:	89 c2                	mov    %eax,%edx
+c01012b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01012b6:	c1 e8 18             	shr    $0x18,%eax
+c01012b9:	83 e0 0f             	and    $0xf,%eax
+c01012bc:	09 d0                	or     %edx,%eax
+c01012be:	83 c8 e0             	or     $0xffffffe0,%eax
+c01012c1:	0f b6 c0             	movzbl %al,%eax
+c01012c4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01012c8:	83 c2 06             	add    $0x6,%edx
+c01012cb:	0f b7 d2             	movzwl %dx,%edx
+c01012ce:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
+c01012d2:	88 45 dc             	mov    %al,-0x24(%ebp)
+c01012d5:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
+c01012d9:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
+c01012dd:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+c01012de:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01012e2:	83 c0 07             	add    $0x7,%eax
+c01012e5:	0f b7 c0             	movzwl %ax,%eax
+c01012e8:	66 89 45 de          	mov    %ax,-0x22(%ebp)
+c01012ec:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
+c01012f0:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c01012f4:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c01012f8:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c01012f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c0101300:	eb 56                	jmp    c0101358 <ide_read_secs+0x221>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c0101302:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101306:	83 ec 08             	sub    $0x8,%esp
+c0101309:	6a 01                	push   $0x1
+c010130b:	50                   	push   %eax
+c010130c:	e8 43 fa ff ff       	call   c0100d54 <ide_wait_ready>
+c0101311:	83 c4 10             	add    $0x10,%esp
+c0101314:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101317:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010131b:	75 43                	jne    c0101360 <ide_read_secs+0x229>
+            goto out;
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+c010131d:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101321:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0101324:	8b 45 10             	mov    0x10(%ebp),%eax
+c0101327:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010132a:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
+    return data;
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+c0101331:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0101334:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+c0101337:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010133a:	89 cb                	mov    %ecx,%ebx
+c010133c:	89 df                	mov    %ebx,%edi
+c010133e:	89 c1                	mov    %eax,%ecx
+c0101340:	fc                   	cld    
+c0101341:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0101343:	89 c8                	mov    %ecx,%eax
+c0101345:	89 fb                	mov    %edi,%ebx
+c0101347:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+c010134a:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+
+    int ret = 0;
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c010134d:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
+c0101351:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c0101358:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c010135c:	75 a4                	jne    c0101302 <ide_read_secs+0x1cb>
+c010135e:	eb 01                	jmp    c0101361 <ide_read_secs+0x22a>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+            goto out;
+c0101360:	90                   	nop
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+    }
+
+out:
+    return ret;
+c0101361:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101364:	8d 65 f8             	lea    -0x8(%ebp),%esp
+c0101367:	5b                   	pop    %ebx
+c0101368:	5f                   	pop    %edi
+c0101369:	5d                   	pop    %ebp
+c010136a:	c3                   	ret    
+
+c010136b <ide_write_secs>:
+
+int
+ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
+c010136b:	55                   	push   %ebp
+c010136c:	89 e5                	mov    %esp,%ebp
+c010136e:	56                   	push   %esi
+c010136f:	53                   	push   %ebx
+c0101370:	83 ec 40             	sub    $0x40,%esp
+c0101373:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101376:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c010137a:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c0101381:	77 25                	ja     c01013a8 <ide_write_secs+0x3d>
+c0101383:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
+c0101388:	77 1e                	ja     c01013a8 <ide_write_secs+0x3d>
+c010138a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c010138e:	c1 e0 03             	shl    $0x3,%eax
+c0101391:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101398:	29 c2                	sub    %eax,%edx
+c010139a:	89 d0                	mov    %edx,%eax
+c010139c:	05 a0 0e 12 c0       	add    $0xc0120ea0,%eax
+c01013a1:	0f b6 00             	movzbl (%eax),%eax
+c01013a4:	84 c0                	test   %al,%al
+c01013a6:	75 1e                	jne    c01013c6 <ide_write_secs+0x5b>
+c01013a8:	e8 9d f6 ff ff       	call   c0100a4a <print_stackframe>
+c01013ad:	68 48 8c 10 c0       	push   $0xc0108c48
+c01013b2:	68 03 8c 10 c0       	push   $0xc0108c03
+c01013b7:	68 bc 00 00 00       	push   $0xbc
+c01013bc:	68 18 8c 10 c0       	push   $0xc0108c18
+c01013c1:	e8 16 f0 ff ff       	call   c01003dc <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c01013c6:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c01013cd:	77 0f                	ja     c01013de <ide_write_secs+0x73>
+c01013cf:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01013d2:	8b 45 14             	mov    0x14(%ebp),%eax
+c01013d5:	01 d0                	add    %edx,%eax
+c01013d7:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c01013dc:	76 1e                	jbe    c01013fc <ide_write_secs+0x91>
+c01013de:	e8 67 f6 ff ff       	call   c0100a4a <print_stackframe>
+c01013e3:	68 70 8c 10 c0       	push   $0xc0108c70
+c01013e8:	68 03 8c 10 c0       	push   $0xc0108c03
+c01013ed:	68 bd 00 00 00       	push   $0xbd
+c01013f2:	68 18 8c 10 c0       	push   $0xc0108c18
+c01013f7:	e8 e0 ef ff ff       	call   c01003dc <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c01013fc:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101400:	66 d1 e8             	shr    %ax
+c0101403:	0f b7 c0             	movzwl %ax,%eax
+c0101406:	0f b7 04 85 b8 8b 10 	movzwl -0x3fef7448(,%eax,4),%eax
+c010140d:	c0 
+c010140e:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0101412:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101416:	66 d1 e8             	shr    %ax
+c0101419:	0f b7 c0             	movzwl %ax,%eax
+c010141c:	0f b7 04 85 ba 8b 10 	movzwl -0x3fef7446(,%eax,4),%eax
+c0101423:	c0 
+c0101424:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c0101428:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010142c:	83 ec 08             	sub    $0x8,%esp
+c010142f:	6a 00                	push   $0x0
+c0101431:	50                   	push   %eax
+c0101432:	e8 1d f9 ff ff       	call   c0100d54 <ide_wait_ready>
+c0101437:	83 c4 10             	add    $0x10,%esp
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c010143a:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c010143e:	83 c0 02             	add    $0x2,%eax
+c0101441:	0f b7 c0             	movzwl %ax,%eax
+c0101444:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+c0101448:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010144c:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
+c0101450:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101454:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c0101455:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101458:	0f b6 c0             	movzbl %al,%eax
+c010145b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c010145f:	83 c2 02             	add    $0x2,%edx
+c0101462:	0f b7 d2             	movzwl %dx,%edx
+c0101465:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
+c0101469:	88 45 d8             	mov    %al,-0x28(%ebp)
+c010146c:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
+c0101470:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
+c0101474:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c0101475:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101478:	0f b6 c0             	movzbl %al,%eax
+c010147b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c010147f:	83 c2 03             	add    $0x3,%edx
+c0101482:	0f b7 d2             	movzwl %dx,%edx
+c0101485:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c0101489:	88 45 d9             	mov    %al,-0x27(%ebp)
+c010148c:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101490:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101494:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c0101495:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101498:	c1 e8 08             	shr    $0x8,%eax
+c010149b:	0f b6 c0             	movzbl %al,%eax
+c010149e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01014a2:	83 c2 04             	add    $0x4,%edx
+c01014a5:	0f b7 d2             	movzwl %dx,%edx
+c01014a8:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
+c01014ac:	88 45 da             	mov    %al,-0x26(%ebp)
+c01014af:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
+c01014b3:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
+c01014b7:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c01014b8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01014bb:	c1 e8 10             	shr    $0x10,%eax
+c01014be:	0f b6 c0             	movzbl %al,%eax
+c01014c1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01014c5:	83 c2 05             	add    $0x5,%edx
+c01014c8:	0f b7 d2             	movzwl %dx,%edx
+c01014cb:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c01014cf:	88 45 db             	mov    %al,-0x25(%ebp)
+c01014d2:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
+c01014d6:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c01014da:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c01014db:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01014df:	83 e0 01             	and    $0x1,%eax
+c01014e2:	c1 e0 04             	shl    $0x4,%eax
+c01014e5:	89 c2                	mov    %eax,%edx
+c01014e7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01014ea:	c1 e8 18             	shr    $0x18,%eax
+c01014ed:	83 e0 0f             	and    $0xf,%eax
+c01014f0:	09 d0                	or     %edx,%eax
+c01014f2:	83 c8 e0             	or     $0xffffffe0,%eax
+c01014f5:	0f b6 c0             	movzbl %al,%eax
+c01014f8:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01014fc:	83 c2 06             	add    $0x6,%edx
+c01014ff:	0f b7 d2             	movzwl %dx,%edx
+c0101502:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
+c0101506:	88 45 dc             	mov    %al,-0x24(%ebp)
+c0101509:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
+c010150d:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
+c0101511:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+c0101512:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101516:	83 c0 07             	add    $0x7,%eax
+c0101519:	0f b7 c0             	movzwl %ax,%eax
+c010151c:	66 89 45 de          	mov    %ax,-0x22(%ebp)
+c0101520:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
+c0101524:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c0101528:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c010152c:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c010152d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0101534:	eb 56                	jmp    c010158c <ide_write_secs+0x221>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c0101536:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010153a:	83 ec 08             	sub    $0x8,%esp
+c010153d:	6a 01                	push   $0x1
+c010153f:	50                   	push   %eax
+c0101540:	e8 0f f8 ff ff       	call   c0100d54 <ide_wait_ready>
+c0101545:	83 c4 10             	add    $0x10,%esp
+c0101548:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010154b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010154f:	75 43                	jne    c0101594 <ide_write_secs+0x229>
+            goto out;
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+c0101551:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101555:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0101558:	8b 45 10             	mov    0x10(%ebp),%eax
+c010155b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010155e:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outsl(uint32_t port, const void *addr, int cnt) {
+    asm volatile (
+c0101565:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0101568:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+c010156b:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010156e:	89 cb                	mov    %ecx,%ebx
+c0101570:	89 de                	mov    %ebx,%esi
+c0101572:	89 c1                	mov    %eax,%ecx
+c0101574:	fc                   	cld    
+c0101575:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
+c0101577:	89 c8                	mov    %ecx,%eax
+c0101579:	89 f3                	mov    %esi,%ebx
+c010157b:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+c010157e:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+
+    int ret = 0;
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0101581:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
+c0101585:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c010158c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0101590:	75 a4                	jne    c0101536 <ide_write_secs+0x1cb>
+c0101592:	eb 01                	jmp    c0101595 <ide_write_secs+0x22a>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+            goto out;
+c0101594:	90                   	nop
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+    }
+
+out:
+    return ret;
+c0101595:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101598:	8d 65 f8             	lea    -0x8(%ebp),%esp
+c010159b:	5b                   	pop    %ebx
+c010159c:	5e                   	pop    %esi
+c010159d:	5d                   	pop    %ebp
+c010159e:	c3                   	ret    
+
+c010159f <clock_init>:
+/* *
+ * clock_init - initialize 8253 clock to interrupt 100 times per second,
+ * and then enable IRQ_TIMER.
+ * */
+void
+clock_init(void) {
+c010159f:	55                   	push   %ebp
+c01015a0:	89 e5                	mov    %esp,%ebp
+c01015a2:	83 ec 18             	sub    $0x18,%esp
+c01015a5:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
+c01015ab:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c01015af:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+c01015b3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c01015b7:	ee                   	out    %al,(%dx)
+c01015b8:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
+c01015be:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
+c01015c2:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
+c01015c6:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
+c01015ca:	ee                   	out    %al,(%dx)
+c01015cb:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
+c01015d1:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
+c01015d5:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c01015d9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01015dd:	ee                   	out    %al,(%dx)
+    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
+    outb(IO_TIMER1, TIMER_DIV(100) % 256);
+    outb(IO_TIMER1, TIMER_DIV(100) / 256);
+
+    // initialize time counter 'ticks' to zero
+    ticks = 0;
+c01015de:	c7 05 6c 1a 12 c0 00 	movl   $0x0,0xc0121a6c
+c01015e5:	00 00 00 
+
+    cprintf("++ setup timer interrupts\n");
+c01015e8:	83 ec 0c             	sub    $0xc,%esp
+c01015eb:	68 aa 8c 10 c0       	push   $0xc0108caa
+c01015f0:	e8 81 ec ff ff       	call   c0100276 <cprintf>
+c01015f5:	83 c4 10             	add    $0x10,%esp
+    pic_enable(IRQ_TIMER);
+c01015f8:	83 ec 0c             	sub    $0xc,%esp
+c01015fb:	6a 00                	push   $0x0
+c01015fd:	e8 3b 09 00 00       	call   c0101f3d <pic_enable>
+c0101602:	83 c4 10             	add    $0x10,%esp
+}
+c0101605:	90                   	nop
+c0101606:	c9                   	leave  
+c0101607:	c3                   	ret    
+
+c0101608 <__intr_save>:
+#include <x86.h>
+#include <intr.h>
+#include <mmu.h>
+
+static inline bool
+__intr_save(void) {
+c0101608:	55                   	push   %ebp
+c0101609:	89 e5                	mov    %esp,%ebp
+c010160b:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c010160e:	9c                   	pushf  
+c010160f:	58                   	pop    %eax
+c0101610:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0101613:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0101616:	25 00 02 00 00       	and    $0x200,%eax
+c010161b:	85 c0                	test   %eax,%eax
+c010161d:	74 0c                	je     c010162b <__intr_save+0x23>
+        intr_disable();
+c010161f:	e8 8a 0a 00 00       	call   c01020ae <intr_disable>
+        return 1;
+c0101624:	b8 01 00 00 00       	mov    $0x1,%eax
+c0101629:	eb 05                	jmp    c0101630 <__intr_save+0x28>
+    }
+    return 0;
+c010162b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101630:	c9                   	leave  
+c0101631:	c3                   	ret    
+
+c0101632 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0101632:	55                   	push   %ebp
+c0101633:	89 e5                	mov    %esp,%ebp
+c0101635:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0101638:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010163c:	74 05                	je     c0101643 <__intr_restore+0x11>
+        intr_enable();
+c010163e:	e8 64 0a 00 00       	call   c01020a7 <intr_enable>
+    }
+}
+c0101643:	90                   	nop
+c0101644:	c9                   	leave  
+c0101645:	c3                   	ret    
+
+c0101646 <delay>:
+#include <memlayout.h>
+#include <sync.h>
+
+/* stupid I/O delay routine necessitated by historical PC design flaws */
+static void
+delay(void) {
+c0101646:	55                   	push   %ebp
+c0101647:	89 e5                	mov    %esp,%ebp
+c0101649:	83 ec 10             	sub    $0x10,%esp
+c010164c:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101652:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c0101656:	89 c2                	mov    %eax,%edx
+c0101658:	ec                   	in     (%dx),%al
+c0101659:	88 45 f4             	mov    %al,-0xc(%ebp)
+c010165c:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
+c0101662:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101666:	89 c2                	mov    %eax,%edx
+c0101668:	ec                   	in     (%dx),%al
+c0101669:	88 45 f5             	mov    %al,-0xb(%ebp)
+c010166c:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
+c0101672:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0101676:	89 c2                	mov    %eax,%edx
+c0101678:	ec                   	in     (%dx),%al
+c0101679:	88 45 f6             	mov    %al,-0xa(%ebp)
+c010167c:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
+c0101682:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
+c0101686:	89 c2                	mov    %eax,%edx
+c0101688:	ec                   	in     (%dx),%al
+c0101689:	88 45 f7             	mov    %al,-0x9(%ebp)
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+}
+c010168c:	90                   	nop
+c010168d:	c9                   	leave  
+c010168e:	c3                   	ret    
+
+c010168f <cga_init>:
+static uint16_t addr_6845;
+
+/* TEXT-mode CGA/VGA display output */
+
+static void
+cga_init(void) {
+c010168f:	55                   	push   %ebp
+c0101690:	89 e5                	mov    %esp,%ebp
+c0101692:	83 ec 20             	sub    $0x20,%esp
+    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
+c0101695:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
+    uint16_t was = *cp;
+c010169c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010169f:	0f b7 00             	movzwl (%eax),%eax
+c01016a2:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+    *cp = (uint16_t) 0xA55A;
+c01016a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01016a9:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
+    if (*cp != 0xA55A) {
+c01016ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01016b1:	0f b7 00             	movzwl (%eax),%eax
+c01016b4:	66 3d 5a a5          	cmp    $0xa55a,%ax
+c01016b8:	74 12                	je     c01016cc <cga_init+0x3d>
+        cp = (uint16_t*)(MONO_BUF + KERNBASE);
+c01016ba:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
+        addr_6845 = MONO_BASE;
+c01016c1:	66 c7 05 86 0f 12 c0 	movw   $0x3b4,0xc0120f86
+c01016c8:	b4 03 
+c01016ca:	eb 13                	jmp    c01016df <cga_init+0x50>
+    } else {
+        *cp = was;
+c01016cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01016cf:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c01016d3:	66 89 10             	mov    %dx,(%eax)
+        addr_6845 = CGA_BASE;
+c01016d6:	66 c7 05 86 0f 12 c0 	movw   $0x3d4,0xc0120f86
+c01016dd:	d4 03 
+    }
+
+    // Extract cursor location
+    uint32_t pos;
+    outb(addr_6845, 14);
+c01016df:	0f b7 05 86 0f 12 c0 	movzwl 0xc0120f86,%eax
+c01016e6:	0f b7 c0             	movzwl %ax,%eax
+c01016e9:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
+c01016ed:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c01016f1:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
+c01016f5:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
+c01016f9:	ee                   	out    %al,(%dx)
+    pos = inb(addr_6845 + 1) << 8;
+c01016fa:	0f b7 05 86 0f 12 c0 	movzwl 0xc0120f86,%eax
+c0101701:	83 c0 01             	add    $0x1,%eax
+c0101704:	0f b7 c0             	movzwl %ax,%eax
+c0101707:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c010170b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010170f:	89 c2                	mov    %eax,%edx
+c0101711:	ec                   	in     (%dx),%al
+c0101712:	88 45 eb             	mov    %al,-0x15(%ebp)
+    return data;
+c0101715:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+c0101719:	0f b6 c0             	movzbl %al,%eax
+c010171c:	c1 e0 08             	shl    $0x8,%eax
+c010171f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    outb(addr_6845, 15);
+c0101722:	0f b7 05 86 0f 12 c0 	movzwl 0xc0120f86,%eax
+c0101729:	0f b7 c0             	movzwl %ax,%eax
+c010172c:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+c0101730:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101734:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
+c0101738:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
+c010173c:	ee                   	out    %al,(%dx)
+    pos |= inb(addr_6845 + 1);
+c010173d:	0f b7 05 86 0f 12 c0 	movzwl 0xc0120f86,%eax
+c0101744:	83 c0 01             	add    $0x1,%eax
+c0101747:	0f b7 c0             	movzwl %ax,%eax
+c010174a:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c010174e:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
+c0101752:	89 c2                	mov    %eax,%edx
+c0101754:	ec                   	in     (%dx),%al
+c0101755:	88 45 ed             	mov    %al,-0x13(%ebp)
+    return data;
+c0101758:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c010175c:	0f b6 c0             	movzbl %al,%eax
+c010175f:	09 45 f4             	or     %eax,-0xc(%ebp)
+
+    crt_buf = (uint16_t*) cp;
+c0101762:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0101765:	a3 80 0f 12 c0       	mov    %eax,0xc0120f80
+    crt_pos = pos;
+c010176a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010176d:	66 a3 84 0f 12 c0    	mov    %ax,0xc0120f84
+}
+c0101773:	90                   	nop
+c0101774:	c9                   	leave  
+c0101775:	c3                   	ret    
+
+c0101776 <serial_init>:
+
+static bool serial_exists = 0;
+
+static void
+serial_init(void) {
+c0101776:	55                   	push   %ebp
+c0101777:	89 e5                	mov    %esp,%ebp
+c0101779:	83 ec 28             	sub    $0x28,%esp
+c010177c:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
+c0101782:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101786:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
+c010178a:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c010178e:	ee                   	out    %al,(%dx)
+c010178f:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
+c0101795:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
+c0101799:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
+c010179d:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
+c01017a1:	ee                   	out    %al,(%dx)
+c01017a2:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
+c01017a8:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
+c01017ac:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
+c01017b0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01017b4:	ee                   	out    %al,(%dx)
+c01017b5:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
+c01017bb:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
+c01017bf:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c01017c3:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
+c01017c7:	ee                   	out    %al,(%dx)
+c01017c8:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
+c01017ce:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
+c01017d2:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
+c01017d6:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c01017da:	ee                   	out    %al,(%dx)
+c01017db:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
+c01017e1:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
+c01017e5:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
+c01017e9:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
+c01017ed:	ee                   	out    %al,(%dx)
+c01017ee:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
+c01017f4:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
+c01017f8:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
+c01017fc:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101800:	ee                   	out    %al,(%dx)
+c0101801:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101807:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
+c010180b:	89 c2                	mov    %eax,%edx
+c010180d:	ec                   	in     (%dx),%al
+c010180e:	88 45 e1             	mov    %al,-0x1f(%ebp)
+    return data;
+c0101811:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+    // Enable rcv interrupts
+    outb(COM1 + COM_IER, COM_IER_RDI);
+
+    // Clear any preexisting overrun indications and interrupts
+    // Serial port doesn't exist if COM_LSR returns 0xFF
+    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
+c0101815:	3c ff                	cmp    $0xff,%al
+c0101817:	0f 95 c0             	setne  %al
+c010181a:	0f b6 c0             	movzbl %al,%eax
+c010181d:	a3 88 0f 12 c0       	mov    %eax,0xc0120f88
+c0101822:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101828:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
+c010182c:	89 c2                	mov    %eax,%edx
+c010182e:	ec                   	in     (%dx),%al
+c010182f:	88 45 e2             	mov    %al,-0x1e(%ebp)
+c0101832:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
+c0101838:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+c010183c:	89 c2                	mov    %eax,%edx
+c010183e:	ec                   	in     (%dx),%al
+c010183f:	88 45 e3             	mov    %al,-0x1d(%ebp)
+    (void) inb(COM1+COM_IIR);
+    (void) inb(COM1+COM_RX);
+
+    if (serial_exists) {
+c0101842:	a1 88 0f 12 c0       	mov    0xc0120f88,%eax
+c0101847:	85 c0                	test   %eax,%eax
+c0101849:	74 0d                	je     c0101858 <serial_init+0xe2>
+        pic_enable(IRQ_COM1);
+c010184b:	83 ec 0c             	sub    $0xc,%esp
+c010184e:	6a 04                	push   $0x4
+c0101850:	e8 e8 06 00 00       	call   c0101f3d <pic_enable>
+c0101855:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0101858:	90                   	nop
+c0101859:	c9                   	leave  
+c010185a:	c3                   	ret    
+
+c010185b <lpt_putc_sub>:
+
+static void
+lpt_putc_sub(int c) {
+c010185b:	55                   	push   %ebp
+c010185c:	89 e5                	mov    %esp,%ebp
+c010185e:	83 ec 10             	sub    $0x10,%esp
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c0101861:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c0101868:	eb 09                	jmp    c0101873 <lpt_putc_sub+0x18>
+        delay();
+c010186a:	e8 d7 fd ff ff       	call   c0101646 <delay>
+}
+
+static void
+lpt_putc_sub(int c) {
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c010186f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c0101873:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
+c0101879:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c010187d:	89 c2                	mov    %eax,%edx
+c010187f:	ec                   	in     (%dx),%al
+c0101880:	88 45 f3             	mov    %al,-0xd(%ebp)
+    return data;
+c0101883:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101887:	84 c0                	test   %al,%al
+c0101889:	78 09                	js     c0101894 <lpt_putc_sub+0x39>
+c010188b:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c0101892:	7e d6                	jle    c010186a <lpt_putc_sub+0xf>
+        delay();
+    }
+    outb(LPTPORT + 0, c);
+c0101894:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101897:	0f b6 c0             	movzbl %al,%eax
+c010189a:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
+c01018a0:	88 45 f0             	mov    %al,-0x10(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c01018a3:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
+c01018a7:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
+c01018ab:	ee                   	out    %al,(%dx)
+c01018ac:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
+c01018b2:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
+c01018b6:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c01018ba:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c01018be:	ee                   	out    %al,(%dx)
+c01018bf:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
+c01018c5:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
+c01018c9:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
+c01018cd:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c01018d1:	ee                   	out    %al,(%dx)
+    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
+    outb(LPTPORT + 2, 0x08);
+}
+c01018d2:	90                   	nop
+c01018d3:	c9                   	leave  
+c01018d4:	c3                   	ret    
+
+c01018d5 <lpt_putc>:
+
+/* lpt_putc - copy console output to parallel port */
+static void
+lpt_putc(int c) {
+c01018d5:	55                   	push   %ebp
+c01018d6:	89 e5                	mov    %esp,%ebp
+    if (c != '\b') {
+c01018d8:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c01018dc:	74 0d                	je     c01018eb <lpt_putc+0x16>
+        lpt_putc_sub(c);
+c01018de:	ff 75 08             	pushl  0x8(%ebp)
+c01018e1:	e8 75 ff ff ff       	call   c010185b <lpt_putc_sub>
+c01018e6:	83 c4 04             	add    $0x4,%esp
+    else {
+        lpt_putc_sub('\b');
+        lpt_putc_sub(' ');
+        lpt_putc_sub('\b');
+    }
+}
+c01018e9:	eb 1e                	jmp    c0101909 <lpt_putc+0x34>
+lpt_putc(int c) {
+    if (c != '\b') {
+        lpt_putc_sub(c);
+    }
+    else {
+        lpt_putc_sub('\b');
+c01018eb:	6a 08                	push   $0x8
+c01018ed:	e8 69 ff ff ff       	call   c010185b <lpt_putc_sub>
+c01018f2:	83 c4 04             	add    $0x4,%esp
+        lpt_putc_sub(' ');
+c01018f5:	6a 20                	push   $0x20
+c01018f7:	e8 5f ff ff ff       	call   c010185b <lpt_putc_sub>
+c01018fc:	83 c4 04             	add    $0x4,%esp
+        lpt_putc_sub('\b');
+c01018ff:	6a 08                	push   $0x8
+c0101901:	e8 55 ff ff ff       	call   c010185b <lpt_putc_sub>
+c0101906:	83 c4 04             	add    $0x4,%esp
+    }
+}
+c0101909:	90                   	nop
+c010190a:	c9                   	leave  
+c010190b:	c3                   	ret    
+
+c010190c <cga_putc>:
+
+/* cga_putc - print character to console */
+static void
+cga_putc(int c) {
+c010190c:	55                   	push   %ebp
+c010190d:	89 e5                	mov    %esp,%ebp
+c010190f:	53                   	push   %ebx
+c0101910:	83 ec 14             	sub    $0x14,%esp
+    // set black on white
+    if (!(c & ~0xFF)) {
+c0101913:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101916:	b0 00                	mov    $0x0,%al
+c0101918:	85 c0                	test   %eax,%eax
+c010191a:	75 07                	jne    c0101923 <cga_putc+0x17>
+        c |= 0x0700;
+c010191c:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
+    }
+
+    switch (c & 0xff) {
+c0101923:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101926:	0f b6 c0             	movzbl %al,%eax
+c0101929:	83 f8 0a             	cmp    $0xa,%eax
+c010192c:	74 4e                	je     c010197c <cga_putc+0x70>
+c010192e:	83 f8 0d             	cmp    $0xd,%eax
+c0101931:	74 59                	je     c010198c <cga_putc+0x80>
+c0101933:	83 f8 08             	cmp    $0x8,%eax
+c0101936:	0f 85 8a 00 00 00    	jne    c01019c6 <cga_putc+0xba>
+    case '\b':
+        if (crt_pos > 0) {
+c010193c:	0f b7 05 84 0f 12 c0 	movzwl 0xc0120f84,%eax
+c0101943:	66 85 c0             	test   %ax,%ax
+c0101946:	0f 84 a0 00 00 00    	je     c01019ec <cga_putc+0xe0>
+            crt_pos --;
+c010194c:	0f b7 05 84 0f 12 c0 	movzwl 0xc0120f84,%eax
+c0101953:	83 e8 01             	sub    $0x1,%eax
+c0101956:	66 a3 84 0f 12 c0    	mov    %ax,0xc0120f84
+            crt_buf[crt_pos] = (c & ~0xff) | ' ';
+c010195c:	a1 80 0f 12 c0       	mov    0xc0120f80,%eax
+c0101961:	0f b7 15 84 0f 12 c0 	movzwl 0xc0120f84,%edx
+c0101968:	0f b7 d2             	movzwl %dx,%edx
+c010196b:	01 d2                	add    %edx,%edx
+c010196d:	01 d0                	add    %edx,%eax
+c010196f:	8b 55 08             	mov    0x8(%ebp),%edx
+c0101972:	b2 00                	mov    $0x0,%dl
+c0101974:	83 ca 20             	or     $0x20,%edx
+c0101977:	66 89 10             	mov    %dx,(%eax)
+        }
+        break;
+c010197a:	eb 70                	jmp    c01019ec <cga_putc+0xe0>
+    case '\n':
+        crt_pos += CRT_COLS;
+c010197c:	0f b7 05 84 0f 12 c0 	movzwl 0xc0120f84,%eax
+c0101983:	83 c0 50             	add    $0x50,%eax
+c0101986:	66 a3 84 0f 12 c0    	mov    %ax,0xc0120f84
+    case '\r':
+        crt_pos -= (crt_pos % CRT_COLS);
+c010198c:	0f b7 1d 84 0f 12 c0 	movzwl 0xc0120f84,%ebx
+c0101993:	0f b7 0d 84 0f 12 c0 	movzwl 0xc0120f84,%ecx
+c010199a:	0f b7 c1             	movzwl %cx,%eax
+c010199d:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
+c01019a3:	c1 e8 10             	shr    $0x10,%eax
+c01019a6:	89 c2                	mov    %eax,%edx
+c01019a8:	66 c1 ea 06          	shr    $0x6,%dx
+c01019ac:	89 d0                	mov    %edx,%eax
+c01019ae:	c1 e0 02             	shl    $0x2,%eax
+c01019b1:	01 d0                	add    %edx,%eax
+c01019b3:	c1 e0 04             	shl    $0x4,%eax
+c01019b6:	29 c1                	sub    %eax,%ecx
+c01019b8:	89 ca                	mov    %ecx,%edx
+c01019ba:	89 d8                	mov    %ebx,%eax
+c01019bc:	29 d0                	sub    %edx,%eax
+c01019be:	66 a3 84 0f 12 c0    	mov    %ax,0xc0120f84
+        break;
+c01019c4:	eb 27                	jmp    c01019ed <cga_putc+0xe1>
+    default:
+        crt_buf[crt_pos ++] = c;     // write the character
+c01019c6:	8b 0d 80 0f 12 c0    	mov    0xc0120f80,%ecx
+c01019cc:	0f b7 05 84 0f 12 c0 	movzwl 0xc0120f84,%eax
+c01019d3:	8d 50 01             	lea    0x1(%eax),%edx
+c01019d6:	66 89 15 84 0f 12 c0 	mov    %dx,0xc0120f84
+c01019dd:	0f b7 c0             	movzwl %ax,%eax
+c01019e0:	01 c0                	add    %eax,%eax
+c01019e2:	01 c8                	add    %ecx,%eax
+c01019e4:	8b 55 08             	mov    0x8(%ebp),%edx
+c01019e7:	66 89 10             	mov    %dx,(%eax)
+        break;
+c01019ea:	eb 01                	jmp    c01019ed <cga_putc+0xe1>
+    case '\b':
+        if (crt_pos > 0) {
+            crt_pos --;
+            crt_buf[crt_pos] = (c & ~0xff) | ' ';
+        }
+        break;
+c01019ec:	90                   	nop
+        crt_buf[crt_pos ++] = c;     // write the character
+        break;
+    }
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+c01019ed:	0f b7 05 84 0f 12 c0 	movzwl 0xc0120f84,%eax
+c01019f4:	66 3d cf 07          	cmp    $0x7cf,%ax
+c01019f8:	76 59                	jbe    c0101a53 <cga_putc+0x147>
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+c01019fa:	a1 80 0f 12 c0       	mov    0xc0120f80,%eax
+c01019ff:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
+c0101a05:	a1 80 0f 12 c0       	mov    0xc0120f80,%eax
+c0101a0a:	83 ec 04             	sub    $0x4,%esp
+c0101a0d:	68 00 0f 00 00       	push   $0xf00
+c0101a12:	52                   	push   %edx
+c0101a13:	50                   	push   %eax
+c0101a14:	e8 51 66 00 00       	call   c010806a <memmove>
+c0101a19:	83 c4 10             	add    $0x10,%esp
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c0101a1c:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
+c0101a23:	eb 15                	jmp    c0101a3a <cga_putc+0x12e>
+            crt_buf[i] = 0x0700 | ' ';
+c0101a25:	a1 80 0f 12 c0       	mov    0xc0120f80,%eax
+c0101a2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101a2d:	01 d2                	add    %edx,%edx
+c0101a2f:	01 d0                	add    %edx,%eax
+c0101a31:	66 c7 00 20 07       	movw   $0x720,(%eax)
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c0101a36:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0101a3a:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
+c0101a41:	7e e2                	jle    c0101a25 <cga_putc+0x119>
+            crt_buf[i] = 0x0700 | ' ';
+        }
+        crt_pos -= CRT_COLS;
+c0101a43:	0f b7 05 84 0f 12 c0 	movzwl 0xc0120f84,%eax
+c0101a4a:	83 e8 50             	sub    $0x50,%eax
+c0101a4d:	66 a3 84 0f 12 c0    	mov    %ax,0xc0120f84
+    }
+
+    // move that little blinky thing
+    outb(addr_6845, 14);
+c0101a53:	0f b7 05 86 0f 12 c0 	movzwl 0xc0120f86,%eax
+c0101a5a:	0f b7 c0             	movzwl %ax,%eax
+c0101a5d:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0101a61:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
+c0101a65:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
+c0101a69:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101a6d:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos >> 8);
+c0101a6e:	0f b7 05 84 0f 12 c0 	movzwl 0xc0120f84,%eax
+c0101a75:	66 c1 e8 08          	shr    $0x8,%ax
+c0101a79:	0f b6 c0             	movzbl %al,%eax
+c0101a7c:	0f b7 15 86 0f 12 c0 	movzwl 0xc0120f86,%edx
+c0101a83:	83 c2 01             	add    $0x1,%edx
+c0101a86:	0f b7 d2             	movzwl %dx,%edx
+c0101a89:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
+c0101a8d:	88 45 e9             	mov    %al,-0x17(%ebp)
+c0101a90:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101a94:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
+c0101a98:	ee                   	out    %al,(%dx)
+    outb(addr_6845, 15);
+c0101a99:	0f b7 05 86 0f 12 c0 	movzwl 0xc0120f86,%eax
+c0101aa0:	0f b7 c0             	movzwl %ax,%eax
+c0101aa3:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c0101aa7:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
+c0101aab:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
+c0101aaf:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101ab3:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos);
+c0101ab4:	0f b7 05 84 0f 12 c0 	movzwl 0xc0120f84,%eax
+c0101abb:	0f b6 c0             	movzbl %al,%eax
+c0101abe:	0f b7 15 86 0f 12 c0 	movzwl 0xc0120f86,%edx
+c0101ac5:	83 c2 01             	add    $0x1,%edx
+c0101ac8:	0f b7 d2             	movzwl %dx,%edx
+c0101acb:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
+c0101acf:	88 45 eb             	mov    %al,-0x15(%ebp)
+c0101ad2:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+c0101ad6:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
+c0101ada:	ee                   	out    %al,(%dx)
+}
+c0101adb:	90                   	nop
+c0101adc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c0101adf:	c9                   	leave  
+c0101ae0:	c3                   	ret    
+
+c0101ae1 <serial_putc_sub>:
+
+static void
+serial_putc_sub(int c) {
+c0101ae1:	55                   	push   %ebp
+c0101ae2:	89 e5                	mov    %esp,%ebp
+c0101ae4:	83 ec 10             	sub    $0x10,%esp
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c0101ae7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c0101aee:	eb 09                	jmp    c0101af9 <serial_putc_sub+0x18>
+        delay();
+c0101af0:	e8 51 fb ff ff       	call   c0101646 <delay>
+}
+
+static void
+serial_putc_sub(int c) {
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c0101af5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c0101af9:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101aff:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
+c0101b03:	89 c2                	mov    %eax,%edx
+c0101b05:	ec                   	in     (%dx),%al
+c0101b06:	88 45 f7             	mov    %al,-0x9(%ebp)
+    return data;
+c0101b09:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+c0101b0d:	0f b6 c0             	movzbl %al,%eax
+c0101b10:	83 e0 20             	and    $0x20,%eax
+c0101b13:	85 c0                	test   %eax,%eax
+c0101b15:	75 09                	jne    c0101b20 <serial_putc_sub+0x3f>
+c0101b17:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c0101b1e:	7e d0                	jle    c0101af0 <serial_putc_sub+0xf>
+        delay();
+    }
+    outb(COM1 + COM_TX, c);
+c0101b20:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101b23:	0f b6 c0             	movzbl %al,%eax
+c0101b26:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
+c0101b2c:	88 45 f6             	mov    %al,-0xa(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101b2f:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
+c0101b33:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0101b37:	ee                   	out    %al,(%dx)
+}
+c0101b38:	90                   	nop
+c0101b39:	c9                   	leave  
+c0101b3a:	c3                   	ret    
+
+c0101b3b <serial_putc>:
+
+/* serial_putc - print character to serial port */
+static void
+serial_putc(int c) {
+c0101b3b:	55                   	push   %ebp
+c0101b3c:	89 e5                	mov    %esp,%ebp
+    if (c != '\b') {
+c0101b3e:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c0101b42:	74 0d                	je     c0101b51 <serial_putc+0x16>
+        serial_putc_sub(c);
+c0101b44:	ff 75 08             	pushl  0x8(%ebp)
+c0101b47:	e8 95 ff ff ff       	call   c0101ae1 <serial_putc_sub>
+c0101b4c:	83 c4 04             	add    $0x4,%esp
+    else {
+        serial_putc_sub('\b');
+        serial_putc_sub(' ');
+        serial_putc_sub('\b');
+    }
+}
+c0101b4f:	eb 1e                	jmp    c0101b6f <serial_putc+0x34>
+serial_putc(int c) {
+    if (c != '\b') {
+        serial_putc_sub(c);
+    }
+    else {
+        serial_putc_sub('\b');
+c0101b51:	6a 08                	push   $0x8
+c0101b53:	e8 89 ff ff ff       	call   c0101ae1 <serial_putc_sub>
+c0101b58:	83 c4 04             	add    $0x4,%esp
+        serial_putc_sub(' ');
+c0101b5b:	6a 20                	push   $0x20
+c0101b5d:	e8 7f ff ff ff       	call   c0101ae1 <serial_putc_sub>
+c0101b62:	83 c4 04             	add    $0x4,%esp
+        serial_putc_sub('\b');
+c0101b65:	6a 08                	push   $0x8
+c0101b67:	e8 75 ff ff ff       	call   c0101ae1 <serial_putc_sub>
+c0101b6c:	83 c4 04             	add    $0x4,%esp
+    }
+}
+c0101b6f:	90                   	nop
+c0101b70:	c9                   	leave  
+c0101b71:	c3                   	ret    
+
+c0101b72 <cons_intr>:
+/* *
+ * cons_intr - called by device interrupt routines to feed input
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+c0101b72:	55                   	push   %ebp
+c0101b73:	89 e5                	mov    %esp,%ebp
+c0101b75:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = (*proc)()) != -1) {
+c0101b78:	eb 33                	jmp    c0101bad <cons_intr+0x3b>
+        if (c != 0) {
+c0101b7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101b7e:	74 2d                	je     c0101bad <cons_intr+0x3b>
+            cons.buf[cons.wpos ++] = c;
+c0101b80:	a1 a4 11 12 c0       	mov    0xc01211a4,%eax
+c0101b85:	8d 50 01             	lea    0x1(%eax),%edx
+c0101b88:	89 15 a4 11 12 c0    	mov    %edx,0xc01211a4
+c0101b8e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101b91:	88 90 a0 0f 12 c0    	mov    %dl,-0x3fedf060(%eax)
+            if (cons.wpos == CONSBUFSIZE) {
+c0101b97:	a1 a4 11 12 c0       	mov    0xc01211a4,%eax
+c0101b9c:	3d 00 02 00 00       	cmp    $0x200,%eax
+c0101ba1:	75 0a                	jne    c0101bad <cons_intr+0x3b>
+                cons.wpos = 0;
+c0101ba3:	c7 05 a4 11 12 c0 00 	movl   $0x0,0xc01211a4
+c0101baa:	00 00 00 
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+    int c;
+    while ((c = (*proc)()) != -1) {
+c0101bad:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101bb0:	ff d0                	call   *%eax
+c0101bb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101bb5:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+c0101bb9:	75 bf                	jne    c0101b7a <cons_intr+0x8>
+            if (cons.wpos == CONSBUFSIZE) {
+                cons.wpos = 0;
+            }
+        }
+    }
+}
+c0101bbb:	90                   	nop
+c0101bbc:	c9                   	leave  
+c0101bbd:	c3                   	ret    
+
+c0101bbe <serial_proc_data>:
+
+/* serial_proc_data - get data from serial port */
+static int
+serial_proc_data(void) {
+c0101bbe:	55                   	push   %ebp
+c0101bbf:	89 e5                	mov    %esp,%ebp
+c0101bc1:	83 ec 10             	sub    $0x10,%esp
+c0101bc4:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101bca:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
+c0101bce:	89 c2                	mov    %eax,%edx
+c0101bd0:	ec                   	in     (%dx),%al
+c0101bd1:	88 45 f7             	mov    %al,-0x9(%ebp)
+    return data;
+c0101bd4:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
+c0101bd8:	0f b6 c0             	movzbl %al,%eax
+c0101bdb:	83 e0 01             	and    $0x1,%eax
+c0101bde:	85 c0                	test   %eax,%eax
+c0101be0:	75 07                	jne    c0101be9 <serial_proc_data+0x2b>
+        return -1;
+c0101be2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0101be7:	eb 2a                	jmp    c0101c13 <serial_proc_data+0x55>
+c0101be9:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101bef:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0101bf3:	89 c2                	mov    %eax,%edx
+c0101bf5:	ec                   	in     (%dx),%al
+c0101bf6:	88 45 f6             	mov    %al,-0xa(%ebp)
+    return data;
+c0101bf9:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
+    }
+    int c = inb(COM1 + COM_RX);
+c0101bfd:	0f b6 c0             	movzbl %al,%eax
+c0101c00:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (c == 127) {
+c0101c03:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
+c0101c07:	75 07                	jne    c0101c10 <serial_proc_data+0x52>
+        c = '\b';
+c0101c09:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
+    }
+    return c;
+c0101c10:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0101c13:	c9                   	leave  
+c0101c14:	c3                   	ret    
+
+c0101c15 <serial_intr>:
+
+/* serial_intr - try to feed input characters from serial port */
+void
+serial_intr(void) {
+c0101c15:	55                   	push   %ebp
+c0101c16:	89 e5                	mov    %esp,%ebp
+c0101c18:	83 ec 08             	sub    $0x8,%esp
+    if (serial_exists) {
+c0101c1b:	a1 88 0f 12 c0       	mov    0xc0120f88,%eax
+c0101c20:	85 c0                	test   %eax,%eax
+c0101c22:	74 10                	je     c0101c34 <serial_intr+0x1f>
+        cons_intr(serial_proc_data);
+c0101c24:	83 ec 0c             	sub    $0xc,%esp
+c0101c27:	68 be 1b 10 c0       	push   $0xc0101bbe
+c0101c2c:	e8 41 ff ff ff       	call   c0101b72 <cons_intr>
+c0101c31:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0101c34:	90                   	nop
+c0101c35:	c9                   	leave  
+c0101c36:	c3                   	ret    
+
+c0101c37 <kbd_proc_data>:
+ *
+ * The kbd_proc_data() function gets data from the keyboard.
+ * If we finish a character, return it, else 0. And return -1 if no data.
+ * */
+static int
+kbd_proc_data(void) {
+c0101c37:	55                   	push   %ebp
+c0101c38:	89 e5                	mov    %esp,%ebp
+c0101c3a:	83 ec 18             	sub    $0x18,%esp
+c0101c3d:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101c43:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0101c47:	89 c2                	mov    %eax,%edx
+c0101c49:	ec                   	in     (%dx),%al
+c0101c4a:	88 45 eb             	mov    %al,-0x15(%ebp)
+    return data;
+c0101c4d:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+    int c;
+    uint8_t data;
+    static uint32_t shift;
+
+    if ((inb(KBSTATP) & KBS_DIB) == 0) {
+c0101c51:	0f b6 c0             	movzbl %al,%eax
+c0101c54:	83 e0 01             	and    $0x1,%eax
+c0101c57:	85 c0                	test   %eax,%eax
+c0101c59:	75 0a                	jne    c0101c65 <kbd_proc_data+0x2e>
+        return -1;
+c0101c5b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0101c60:	e9 5d 01 00 00       	jmp    c0101dc2 <kbd_proc_data+0x18b>
+c0101c65:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101c6b:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101c6f:	89 c2                	mov    %eax,%edx
+c0101c71:	ec                   	in     (%dx),%al
+c0101c72:	88 45 ea             	mov    %al,-0x16(%ebp)
+    return data;
+c0101c75:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
+    }
+
+    data = inb(KBDATAP);
+c0101c79:	88 45 f3             	mov    %al,-0xd(%ebp)
+
+    if (data == 0xE0) {
+c0101c7c:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
+c0101c80:	75 17                	jne    c0101c99 <kbd_proc_data+0x62>
+        // E0 escape character
+        shift |= E0ESC;
+c0101c82:	a1 a8 11 12 c0       	mov    0xc01211a8,%eax
+c0101c87:	83 c8 40             	or     $0x40,%eax
+c0101c8a:	a3 a8 11 12 c0       	mov    %eax,0xc01211a8
+        return 0;
+c0101c8f:	b8 00 00 00 00       	mov    $0x0,%eax
+c0101c94:	e9 29 01 00 00       	jmp    c0101dc2 <kbd_proc_data+0x18b>
+    } else if (data & 0x80) {
+c0101c99:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101c9d:	84 c0                	test   %al,%al
+c0101c9f:	79 47                	jns    c0101ce8 <kbd_proc_data+0xb1>
+        // Key released
+        data = (shift & E0ESC ? data : data & 0x7F);
+c0101ca1:	a1 a8 11 12 c0       	mov    0xc01211a8,%eax
+c0101ca6:	83 e0 40             	and    $0x40,%eax
+c0101ca9:	85 c0                	test   %eax,%eax
+c0101cab:	75 09                	jne    c0101cb6 <kbd_proc_data+0x7f>
+c0101cad:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101cb1:	83 e0 7f             	and    $0x7f,%eax
+c0101cb4:	eb 04                	jmp    c0101cba <kbd_proc_data+0x83>
+c0101cb6:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101cba:	88 45 f3             	mov    %al,-0xd(%ebp)
+        shift &= ~(shiftcode[data] | E0ESC);
+c0101cbd:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101cc1:	0f b6 80 60 00 12 c0 	movzbl -0x3fedffa0(%eax),%eax
+c0101cc8:	83 c8 40             	or     $0x40,%eax
+c0101ccb:	0f b6 c0             	movzbl %al,%eax
+c0101cce:	f7 d0                	not    %eax
+c0101cd0:	89 c2                	mov    %eax,%edx
+c0101cd2:	a1 a8 11 12 c0       	mov    0xc01211a8,%eax
+c0101cd7:	21 d0                	and    %edx,%eax
+c0101cd9:	a3 a8 11 12 c0       	mov    %eax,0xc01211a8
+        return 0;
+c0101cde:	b8 00 00 00 00       	mov    $0x0,%eax
+c0101ce3:	e9 da 00 00 00       	jmp    c0101dc2 <kbd_proc_data+0x18b>
+    } else if (shift & E0ESC) {
+c0101ce8:	a1 a8 11 12 c0       	mov    0xc01211a8,%eax
+c0101ced:	83 e0 40             	and    $0x40,%eax
+c0101cf0:	85 c0                	test   %eax,%eax
+c0101cf2:	74 11                	je     c0101d05 <kbd_proc_data+0xce>
+        // Last character was an E0 escape; or with 0x80
+        data |= 0x80;
+c0101cf4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
+        shift &= ~E0ESC;
+c0101cf8:	a1 a8 11 12 c0       	mov    0xc01211a8,%eax
+c0101cfd:	83 e0 bf             	and    $0xffffffbf,%eax
+c0101d00:	a3 a8 11 12 c0       	mov    %eax,0xc01211a8
+    }
+
+    shift |= shiftcode[data];
+c0101d05:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101d09:	0f b6 80 60 00 12 c0 	movzbl -0x3fedffa0(%eax),%eax
+c0101d10:	0f b6 d0             	movzbl %al,%edx
+c0101d13:	a1 a8 11 12 c0       	mov    0xc01211a8,%eax
+c0101d18:	09 d0                	or     %edx,%eax
+c0101d1a:	a3 a8 11 12 c0       	mov    %eax,0xc01211a8
+    shift ^= togglecode[data];
+c0101d1f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101d23:	0f b6 80 60 01 12 c0 	movzbl -0x3fedfea0(%eax),%eax
+c0101d2a:	0f b6 d0             	movzbl %al,%edx
+c0101d2d:	a1 a8 11 12 c0       	mov    0xc01211a8,%eax
+c0101d32:	31 d0                	xor    %edx,%eax
+c0101d34:	a3 a8 11 12 c0       	mov    %eax,0xc01211a8
+
+    c = charcode[shift & (CTL | SHIFT)][data];
+c0101d39:	a1 a8 11 12 c0       	mov    0xc01211a8,%eax
+c0101d3e:	83 e0 03             	and    $0x3,%eax
+c0101d41:	8b 14 85 60 05 12 c0 	mov    -0x3fedfaa0(,%eax,4),%edx
+c0101d48:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101d4c:	01 d0                	add    %edx,%eax
+c0101d4e:	0f b6 00             	movzbl (%eax),%eax
+c0101d51:	0f b6 c0             	movzbl %al,%eax
+c0101d54:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (shift & CAPSLOCK) {
+c0101d57:	a1 a8 11 12 c0       	mov    0xc01211a8,%eax
+c0101d5c:	83 e0 08             	and    $0x8,%eax
+c0101d5f:	85 c0                	test   %eax,%eax
+c0101d61:	74 22                	je     c0101d85 <kbd_proc_data+0x14e>
+        if ('a' <= c && c <= 'z')
+c0101d63:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
+c0101d67:	7e 0c                	jle    c0101d75 <kbd_proc_data+0x13e>
+c0101d69:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
+c0101d6d:	7f 06                	jg     c0101d75 <kbd_proc_data+0x13e>
+            c += 'A' - 'a';
+c0101d6f:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
+c0101d73:	eb 10                	jmp    c0101d85 <kbd_proc_data+0x14e>
+        else if ('A' <= c && c <= 'Z')
+c0101d75:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
+c0101d79:	7e 0a                	jle    c0101d85 <kbd_proc_data+0x14e>
+c0101d7b:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
+c0101d7f:	7f 04                	jg     c0101d85 <kbd_proc_data+0x14e>
+            c += 'a' - 'A';
+c0101d81:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+    }
+
+    // Process special keys
+    // Ctrl-Alt-Del: reboot
+    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
+c0101d85:	a1 a8 11 12 c0       	mov    0xc01211a8,%eax
+c0101d8a:	f7 d0                	not    %eax
+c0101d8c:	83 e0 06             	and    $0x6,%eax
+c0101d8f:	85 c0                	test   %eax,%eax
+c0101d91:	75 2c                	jne    c0101dbf <kbd_proc_data+0x188>
+c0101d93:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
+c0101d9a:	75 23                	jne    c0101dbf <kbd_proc_data+0x188>
+        cprintf("Rebooting!\n");
+c0101d9c:	83 ec 0c             	sub    $0xc,%esp
+c0101d9f:	68 c5 8c 10 c0       	push   $0xc0108cc5
+c0101da4:	e8 cd e4 ff ff       	call   c0100276 <cprintf>
+c0101da9:	83 c4 10             	add    $0x10,%esp
+c0101dac:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
+c0101db2:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101db6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101dba:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101dbe:	ee                   	out    %al,(%dx)
+        outb(0x92, 0x3); // courtesy of Chris Frost
+    }
+    return c;
+c0101dbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101dc2:	c9                   	leave  
+c0101dc3:	c3                   	ret    
+
+c0101dc4 <kbd_intr>:
+
+/* kbd_intr - try to feed input characters from keyboard */
+static void
+kbd_intr(void) {
+c0101dc4:	55                   	push   %ebp
+c0101dc5:	89 e5                	mov    %esp,%ebp
+c0101dc7:	83 ec 08             	sub    $0x8,%esp
+    cons_intr(kbd_proc_data);
+c0101dca:	83 ec 0c             	sub    $0xc,%esp
+c0101dcd:	68 37 1c 10 c0       	push   $0xc0101c37
+c0101dd2:	e8 9b fd ff ff       	call   c0101b72 <cons_intr>
+c0101dd7:	83 c4 10             	add    $0x10,%esp
+}
+c0101dda:	90                   	nop
+c0101ddb:	c9                   	leave  
+c0101ddc:	c3                   	ret    
+
+c0101ddd <kbd_init>:
+
+static void
+kbd_init(void) {
+c0101ddd:	55                   	push   %ebp
+c0101dde:	89 e5                	mov    %esp,%ebp
+c0101de0:	83 ec 08             	sub    $0x8,%esp
+    // drain the kbd buffer
+    kbd_intr();
+c0101de3:	e8 dc ff ff ff       	call   c0101dc4 <kbd_intr>
+    pic_enable(IRQ_KBD);
+c0101de8:	83 ec 0c             	sub    $0xc,%esp
+c0101deb:	6a 01                	push   $0x1
+c0101ded:	e8 4b 01 00 00       	call   c0101f3d <pic_enable>
+c0101df2:	83 c4 10             	add    $0x10,%esp
+}
+c0101df5:	90                   	nop
+c0101df6:	c9                   	leave  
+c0101df7:	c3                   	ret    
+
+c0101df8 <cons_init>:
+
+/* cons_init - initializes the console devices */
+void
+cons_init(void) {
+c0101df8:	55                   	push   %ebp
+c0101df9:	89 e5                	mov    %esp,%ebp
+c0101dfb:	83 ec 08             	sub    $0x8,%esp
+    cga_init();
+c0101dfe:	e8 8c f8 ff ff       	call   c010168f <cga_init>
+    serial_init();
+c0101e03:	e8 6e f9 ff ff       	call   c0101776 <serial_init>
+    kbd_init();
+c0101e08:	e8 d0 ff ff ff       	call   c0101ddd <kbd_init>
+    if (!serial_exists) {
+c0101e0d:	a1 88 0f 12 c0       	mov    0xc0120f88,%eax
+c0101e12:	85 c0                	test   %eax,%eax
+c0101e14:	75 10                	jne    c0101e26 <cons_init+0x2e>
+        cprintf("serial port does not exist!!\n");
+c0101e16:	83 ec 0c             	sub    $0xc,%esp
+c0101e19:	68 d1 8c 10 c0       	push   $0xc0108cd1
+c0101e1e:	e8 53 e4 ff ff       	call   c0100276 <cprintf>
+c0101e23:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0101e26:	90                   	nop
+c0101e27:	c9                   	leave  
+c0101e28:	c3                   	ret    
+
+c0101e29 <cons_putc>:
+
+/* cons_putc - print a single character @c to console devices */
+void
+cons_putc(int c) {
+c0101e29:	55                   	push   %ebp
+c0101e2a:	89 e5                	mov    %esp,%ebp
+c0101e2c:	83 ec 18             	sub    $0x18,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0101e2f:	e8 d4 f7 ff ff       	call   c0101608 <__intr_save>
+c0101e34:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        lpt_putc(c);
+c0101e37:	83 ec 0c             	sub    $0xc,%esp
+c0101e3a:	ff 75 08             	pushl  0x8(%ebp)
+c0101e3d:	e8 93 fa ff ff       	call   c01018d5 <lpt_putc>
+c0101e42:	83 c4 10             	add    $0x10,%esp
+        cga_putc(c);
+c0101e45:	83 ec 0c             	sub    $0xc,%esp
+c0101e48:	ff 75 08             	pushl  0x8(%ebp)
+c0101e4b:	e8 bc fa ff ff       	call   c010190c <cga_putc>
+c0101e50:	83 c4 10             	add    $0x10,%esp
+        serial_putc(c);
+c0101e53:	83 ec 0c             	sub    $0xc,%esp
+c0101e56:	ff 75 08             	pushl  0x8(%ebp)
+c0101e59:	e8 dd fc ff ff       	call   c0101b3b <serial_putc>
+c0101e5e:	83 c4 10             	add    $0x10,%esp
+    }
+    local_intr_restore(intr_flag);
+c0101e61:	83 ec 0c             	sub    $0xc,%esp
+c0101e64:	ff 75 f4             	pushl  -0xc(%ebp)
+c0101e67:	e8 c6 f7 ff ff       	call   c0101632 <__intr_restore>
+c0101e6c:	83 c4 10             	add    $0x10,%esp
+}
+c0101e6f:	90                   	nop
+c0101e70:	c9                   	leave  
+c0101e71:	c3                   	ret    
+
+c0101e72 <cons_getc>:
+/* *
+ * cons_getc - return the next input character from console,
+ * or 0 if none waiting.
+ * */
+int
+cons_getc(void) {
+c0101e72:	55                   	push   %ebp
+c0101e73:	89 e5                	mov    %esp,%ebp
+c0101e75:	83 ec 18             	sub    $0x18,%esp
+    int c = 0;
+c0101e78:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0101e7f:	e8 84 f7 ff ff       	call   c0101608 <__intr_save>
+c0101e84:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        // poll for any pending input characters,
+        // so that this function works even when interrupts are disabled
+        // (e.g., when called from the kernel monitor).
+        serial_intr();
+c0101e87:	e8 89 fd ff ff       	call   c0101c15 <serial_intr>
+        kbd_intr();
+c0101e8c:	e8 33 ff ff ff       	call   c0101dc4 <kbd_intr>
+
+        // grab the next character from the input buffer.
+        if (cons.rpos != cons.wpos) {
+c0101e91:	8b 15 a0 11 12 c0    	mov    0xc01211a0,%edx
+c0101e97:	a1 a4 11 12 c0       	mov    0xc01211a4,%eax
+c0101e9c:	39 c2                	cmp    %eax,%edx
+c0101e9e:	74 31                	je     c0101ed1 <cons_getc+0x5f>
+            c = cons.buf[cons.rpos ++];
+c0101ea0:	a1 a0 11 12 c0       	mov    0xc01211a0,%eax
+c0101ea5:	8d 50 01             	lea    0x1(%eax),%edx
+c0101ea8:	89 15 a0 11 12 c0    	mov    %edx,0xc01211a0
+c0101eae:	0f b6 80 a0 0f 12 c0 	movzbl -0x3fedf060(%eax),%eax
+c0101eb5:	0f b6 c0             	movzbl %al,%eax
+c0101eb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (cons.rpos == CONSBUFSIZE) {
+c0101ebb:	a1 a0 11 12 c0       	mov    0xc01211a0,%eax
+c0101ec0:	3d 00 02 00 00       	cmp    $0x200,%eax
+c0101ec5:	75 0a                	jne    c0101ed1 <cons_getc+0x5f>
+                cons.rpos = 0;
+c0101ec7:	c7 05 a0 11 12 c0 00 	movl   $0x0,0xc01211a0
+c0101ece:	00 00 00 
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c0101ed1:	83 ec 0c             	sub    $0xc,%esp
+c0101ed4:	ff 75 f0             	pushl  -0x10(%ebp)
+c0101ed7:	e8 56 f7 ff ff       	call   c0101632 <__intr_restore>
+c0101edc:	83 c4 10             	add    $0x10,%esp
+    return c;
+c0101edf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101ee2:	c9                   	leave  
+c0101ee3:	c3                   	ret    
+
+c0101ee4 <pic_setmask>:
+// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
+static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
+static bool did_init = 0;
+
+static void
+pic_setmask(uint16_t mask) {
+c0101ee4:	55                   	push   %ebp
+c0101ee5:	89 e5                	mov    %esp,%ebp
+c0101ee7:	83 ec 14             	sub    $0x14,%esp
+c0101eea:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101eed:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    irq_mask = mask;
+c0101ef1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0101ef5:	66 a3 70 05 12 c0    	mov    %ax,0xc0120570
+    if (did_init) {
+c0101efb:	a1 ac 11 12 c0       	mov    0xc01211ac,%eax
+c0101f00:	85 c0                	test   %eax,%eax
+c0101f02:	74 36                	je     c0101f3a <pic_setmask+0x56>
+        outb(IO_PIC1 + 1, mask);
+c0101f04:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0101f08:	0f b6 c0             	movzbl %al,%eax
+c0101f0b:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
+c0101f11:	88 45 fa             	mov    %al,-0x6(%ebp)
+c0101f14:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
+c0101f18:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c0101f1c:	ee                   	out    %al,(%dx)
+        outb(IO_PIC2 + 1, mask >> 8);
+c0101f1d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0101f21:	66 c1 e8 08          	shr    $0x8,%ax
+c0101f25:	0f b6 c0             	movzbl %al,%eax
+c0101f28:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
+c0101f2e:	88 45 fb             	mov    %al,-0x5(%ebp)
+c0101f31:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
+c0101f35:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+c0101f39:	ee                   	out    %al,(%dx)
+    }
+}
+c0101f3a:	90                   	nop
+c0101f3b:	c9                   	leave  
+c0101f3c:	c3                   	ret    
+
+c0101f3d <pic_enable>:
+
+void
+pic_enable(unsigned int irq) {
+c0101f3d:	55                   	push   %ebp
+c0101f3e:	89 e5                	mov    %esp,%ebp
+    pic_setmask(irq_mask & ~(1 << irq));
+c0101f40:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101f43:	ba 01 00 00 00       	mov    $0x1,%edx
+c0101f48:	89 c1                	mov    %eax,%ecx
+c0101f4a:	d3 e2                	shl    %cl,%edx
+c0101f4c:	89 d0                	mov    %edx,%eax
+c0101f4e:	f7 d0                	not    %eax
+c0101f50:	89 c2                	mov    %eax,%edx
+c0101f52:	0f b7 05 70 05 12 c0 	movzwl 0xc0120570,%eax
+c0101f59:	21 d0                	and    %edx,%eax
+c0101f5b:	0f b7 c0             	movzwl %ax,%eax
+c0101f5e:	50                   	push   %eax
+c0101f5f:	e8 80 ff ff ff       	call   c0101ee4 <pic_setmask>
+c0101f64:	83 c4 04             	add    $0x4,%esp
+}
+c0101f67:	90                   	nop
+c0101f68:	c9                   	leave  
+c0101f69:	c3                   	ret    
+
+c0101f6a <pic_init>:
+
+/* pic_init - initialize the 8259A interrupt controllers */
+void
+pic_init(void) {
+c0101f6a:	55                   	push   %ebp
+c0101f6b:	89 e5                	mov    %esp,%ebp
+c0101f6d:	83 ec 30             	sub    $0x30,%esp
+    did_init = 1;
+c0101f70:	c7 05 ac 11 12 c0 01 	movl   $0x1,0xc01211ac
+c0101f77:	00 00 00 
+c0101f7a:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
+c0101f80:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
+c0101f84:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
+c0101f88:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c0101f8c:	ee                   	out    %al,(%dx)
+c0101f8d:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
+c0101f93:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
+c0101f97:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
+c0101f9b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+c0101f9f:	ee                   	out    %al,(%dx)
+c0101fa0:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
+c0101fa6:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
+c0101faa:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
+c0101fae:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0101fb2:	ee                   	out    %al,(%dx)
+c0101fb3:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
+c0101fb9:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
+c0101fbd:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101fc1:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
+c0101fc5:	ee                   	out    %al,(%dx)
+c0101fc6:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
+c0101fcc:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
+c0101fd0:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
+c0101fd4:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101fd8:	ee                   	out    %al,(%dx)
+c0101fd9:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
+c0101fdf:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
+c0101fe3:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
+c0101fe7:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
+c0101feb:	ee                   	out    %al,(%dx)
+c0101fec:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
+c0101ff2:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
+c0101ff6:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
+c0101ffa:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101ffe:	ee                   	out    %al,(%dx)
+c0101fff:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
+c0102005:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
+c0102009:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c010200d:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
+c0102011:	ee                   	out    %al,(%dx)
+c0102012:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
+c0102018:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
+c010201c:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
+c0102020:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0102024:	ee                   	out    %al,(%dx)
+c0102025:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
+c010202b:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
+c010202f:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
+c0102033:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
+c0102037:	ee                   	out    %al,(%dx)
+c0102038:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
+c010203e:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
+c0102042:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
+c0102046:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c010204a:	ee                   	out    %al,(%dx)
+c010204b:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
+c0102051:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
+c0102055:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c0102059:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
+c010205d:	ee                   	out    %al,(%dx)
+c010205e:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
+c0102064:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
+c0102068:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
+c010206c:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0102070:	ee                   	out    %al,(%dx)
+c0102071:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
+c0102077:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
+c010207b:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
+c010207f:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
+c0102083:	ee                   	out    %al,(%dx)
+    outb(IO_PIC1, 0x0a);    // read IRR by default
+
+    outb(IO_PIC2, 0x68);    // OCW3
+    outb(IO_PIC2, 0x0a);    // OCW3
+
+    if (irq_mask != 0xFFFF) {
+c0102084:	0f b7 05 70 05 12 c0 	movzwl 0xc0120570,%eax
+c010208b:	66 83 f8 ff          	cmp    $0xffff,%ax
+c010208f:	74 13                	je     c01020a4 <pic_init+0x13a>
+        pic_setmask(irq_mask);
+c0102091:	0f b7 05 70 05 12 c0 	movzwl 0xc0120570,%eax
+c0102098:	0f b7 c0             	movzwl %ax,%eax
+c010209b:	50                   	push   %eax
+c010209c:	e8 43 fe ff ff       	call   c0101ee4 <pic_setmask>
+c01020a1:	83 c4 04             	add    $0x4,%esp
+    }
+}
+c01020a4:	90                   	nop
+c01020a5:	c9                   	leave  
+c01020a6:	c3                   	ret    
+
+c01020a7 <intr_enable>:
+#include <x86.h>
+#include <intr.h>
+
+/* intr_enable - enable irq interrupt */
+void
+intr_enable(void) {
+c01020a7:	55                   	push   %ebp
+c01020a8:	89 e5                	mov    %esp,%ebp
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+}
+
+static inline void
+sti(void) {
+    asm volatile ("sti");
+c01020aa:	fb                   	sti    
+    sti();
+}
+c01020ab:	90                   	nop
+c01020ac:	5d                   	pop    %ebp
+c01020ad:	c3                   	ret    
+
+c01020ae <intr_disable>:
+
+/* intr_disable - disable irq interrupt */
+void
+intr_disable(void) {
+c01020ae:	55                   	push   %ebp
+c01020af:	89 e5                	mov    %esp,%ebp
+}
+
+static inline void
+cli(void) {
+    asm volatile ("cli" ::: "memory");
+c01020b1:	fa                   	cli    
+    cli();
+}
+c01020b2:	90                   	nop
+c01020b3:	5d                   	pop    %ebp
+c01020b4:	c3                   	ret    
+
+c01020b5 <print_ticks>:
+#include <swap.h>
+#include <kdebug.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+c01020b5:	55                   	push   %ebp
+c01020b6:	89 e5                	mov    %esp,%ebp
+c01020b8:	83 ec 08             	sub    $0x8,%esp
+    cprintf("%d ticks\n",TICK_NUM);
+c01020bb:	83 ec 08             	sub    $0x8,%esp
+c01020be:	6a 64                	push   $0x64
+c01020c0:	68 00 8d 10 c0       	push   $0xc0108d00
+c01020c5:	e8 ac e1 ff ff       	call   c0100276 <cprintf>
+c01020ca:	83 c4 10             	add    $0x10,%esp
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+c01020cd:	83 ec 0c             	sub    $0xc,%esp
+c01020d0:	68 0a 8d 10 c0       	push   $0xc0108d0a
+c01020d5:	e8 9c e1 ff ff       	call   c0100276 <cprintf>
+c01020da:	83 c4 10             	add    $0x10,%esp
+    panic("EOT: kernel seems ok.");
+c01020dd:	e8 68 e9 ff ff       	call   c0100a4a <print_stackframe>
+c01020e2:	83 ec 04             	sub    $0x4,%esp
+c01020e5:	68 18 8d 10 c0       	push   $0xc0108d18
+c01020ea:	6a 14                	push   $0x14
+c01020ec:	68 2e 8d 10 c0       	push   $0xc0108d2e
+c01020f1:	e8 e6 e2 ff ff       	call   c01003dc <__panic>
+
+c01020f6 <idt_init>:
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+c01020f6:	55                   	push   %ebp
+c01020f7:	89 e5                	mov    %esp,%ebp
+c01020f9:	83 ec 10             	sub    $0x10,%esp
+      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+	extern uintptr_t __vectors[];
+	uint32_t kcs = GD_KTEXT; // kernel OS code segment selector
+c01020fc:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
+	for (int i = 0; i < 256; ++ i) {
+c0102103:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c010210a:	e9 97 01 00 00       	jmp    c01022a6 <idt_init+0x1b0>
+		if (i == T_SYSCALL) {
+c010210f:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
+c0102116:	0f 85 c4 00 00 00    	jne    c01021e0 <idt_init+0xea>
+			SETGATE(idt[i], 1, kcs, __vectors[i], DPL_USER);
+c010211c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010211f:	8b 04 85 00 06 12 c0 	mov    -0x3fedfa00(,%eax,4),%eax
+c0102126:	89 c2                	mov    %eax,%edx
+c0102128:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010212b:	66 89 14 c5 c0 11 12 	mov    %dx,-0x3fedee40(,%eax,8)
+c0102132:	c0 
+c0102133:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0102136:	89 c2                	mov    %eax,%edx
+c0102138:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010213b:	66 89 14 c5 c2 11 12 	mov    %dx,-0x3fedee3e(,%eax,8)
+c0102142:	c0 
+c0102143:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102146:	0f b6 14 c5 c4 11 12 	movzbl -0x3fedee3c(,%eax,8),%edx
+c010214d:	c0 
+c010214e:	83 e2 e0             	and    $0xffffffe0,%edx
+c0102151:	88 14 c5 c4 11 12 c0 	mov    %dl,-0x3fedee3c(,%eax,8)
+c0102158:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010215b:	0f b6 14 c5 c4 11 12 	movzbl -0x3fedee3c(,%eax,8),%edx
+c0102162:	c0 
+c0102163:	83 e2 1f             	and    $0x1f,%edx
+c0102166:	88 14 c5 c4 11 12 c0 	mov    %dl,-0x3fedee3c(,%eax,8)
+c010216d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102170:	0f b6 14 c5 c5 11 12 	movzbl -0x3fedee3b(,%eax,8),%edx
+c0102177:	c0 
+c0102178:	83 ca 0f             	or     $0xf,%edx
+c010217b:	88 14 c5 c5 11 12 c0 	mov    %dl,-0x3fedee3b(,%eax,8)
+c0102182:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102185:	0f b6 14 c5 c5 11 12 	movzbl -0x3fedee3b(,%eax,8),%edx
+c010218c:	c0 
+c010218d:	83 e2 ef             	and    $0xffffffef,%edx
+c0102190:	88 14 c5 c5 11 12 c0 	mov    %dl,-0x3fedee3b(,%eax,8)
+c0102197:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010219a:	0f b6 14 c5 c5 11 12 	movzbl -0x3fedee3b(,%eax,8),%edx
+c01021a1:	c0 
+c01021a2:	83 ca 60             	or     $0x60,%edx
+c01021a5:	88 14 c5 c5 11 12 c0 	mov    %dl,-0x3fedee3b(,%eax,8)
+c01021ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01021af:	0f b6 14 c5 c5 11 12 	movzbl -0x3fedee3b(,%eax,8),%edx
+c01021b6:	c0 
+c01021b7:	83 ca 80             	or     $0xffffff80,%edx
+c01021ba:	88 14 c5 c5 11 12 c0 	mov    %dl,-0x3fedee3b(,%eax,8)
+c01021c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01021c4:	8b 04 85 00 06 12 c0 	mov    -0x3fedfa00(,%eax,4),%eax
+c01021cb:	c1 e8 10             	shr    $0x10,%eax
+c01021ce:	89 c2                	mov    %eax,%edx
+c01021d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01021d3:	66 89 14 c5 c6 11 12 	mov    %dx,-0x3fedee3a(,%eax,8)
+c01021da:	c0 
+c01021db:	e9 c2 00 00 00       	jmp    c01022a2 <idt_init+0x1ac>
+		} else {
+			SETGATE(idt[i], 0, kcs, __vectors[i], DPL_KERNEL);
+c01021e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01021e3:	8b 04 85 00 06 12 c0 	mov    -0x3fedfa00(,%eax,4),%eax
+c01021ea:	89 c2                	mov    %eax,%edx
+c01021ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01021ef:	66 89 14 c5 c0 11 12 	mov    %dx,-0x3fedee40(,%eax,8)
+c01021f6:	c0 
+c01021f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01021fa:	89 c2                	mov    %eax,%edx
+c01021fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01021ff:	66 89 14 c5 c2 11 12 	mov    %dx,-0x3fedee3e(,%eax,8)
+c0102206:	c0 
+c0102207:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010220a:	0f b6 14 c5 c4 11 12 	movzbl -0x3fedee3c(,%eax,8),%edx
+c0102211:	c0 
+c0102212:	83 e2 e0             	and    $0xffffffe0,%edx
+c0102215:	88 14 c5 c4 11 12 c0 	mov    %dl,-0x3fedee3c(,%eax,8)
+c010221c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010221f:	0f b6 14 c5 c4 11 12 	movzbl -0x3fedee3c(,%eax,8),%edx
+c0102226:	c0 
+c0102227:	83 e2 1f             	and    $0x1f,%edx
+c010222a:	88 14 c5 c4 11 12 c0 	mov    %dl,-0x3fedee3c(,%eax,8)
+c0102231:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102234:	0f b6 14 c5 c5 11 12 	movzbl -0x3fedee3b(,%eax,8),%edx
+c010223b:	c0 
+c010223c:	83 e2 f0             	and    $0xfffffff0,%edx
+c010223f:	83 ca 0e             	or     $0xe,%edx
+c0102242:	88 14 c5 c5 11 12 c0 	mov    %dl,-0x3fedee3b(,%eax,8)
+c0102249:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010224c:	0f b6 14 c5 c5 11 12 	movzbl -0x3fedee3b(,%eax,8),%edx
+c0102253:	c0 
+c0102254:	83 e2 ef             	and    $0xffffffef,%edx
+c0102257:	88 14 c5 c5 11 12 c0 	mov    %dl,-0x3fedee3b(,%eax,8)
+c010225e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102261:	0f b6 14 c5 c5 11 12 	movzbl -0x3fedee3b(,%eax,8),%edx
+c0102268:	c0 
+c0102269:	83 e2 9f             	and    $0xffffff9f,%edx
+c010226c:	88 14 c5 c5 11 12 c0 	mov    %dl,-0x3fedee3b(,%eax,8)
+c0102273:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102276:	0f b6 14 c5 c5 11 12 	movzbl -0x3fedee3b(,%eax,8),%edx
+c010227d:	c0 
+c010227e:	83 ca 80             	or     $0xffffff80,%edx
+c0102281:	88 14 c5 c5 11 12 c0 	mov    %dl,-0x3fedee3b(,%eax,8)
+c0102288:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010228b:	8b 04 85 00 06 12 c0 	mov    -0x3fedfa00(,%eax,4),%eax
+c0102292:	c1 e8 10             	shr    $0x10,%eax
+c0102295:	89 c2                	mov    %eax,%edx
+c0102297:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010229a:	66 89 14 c5 c6 11 12 	mov    %dx,-0x3fedee3a(,%eax,8)
+c01022a1:	c0 
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+	extern uintptr_t __vectors[];
+	uint32_t kcs = GD_KTEXT; // kernel OS code segment selector
+	for (int i = 0; i < 256; ++ i) {
+c01022a2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c01022a6:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
+c01022ad:	0f 8e 5c fe ff ff    	jle    c010210f <idt_init+0x19>
+		} else {
+			SETGATE(idt[i], 0, kcs, __vectors[i], DPL_KERNEL);
+		}
+	}
+	// challenge 1: 
+	SETGATE(idt[T_SWITCH_TOK], 1, kcs, __vectors[T_SWITCH_TOK], DPL_USER);
+c01022b3:	a1 e4 07 12 c0       	mov    0xc01207e4,%eax
+c01022b8:	66 a3 88 15 12 c0    	mov    %ax,0xc0121588
+c01022be:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01022c1:	66 a3 8a 15 12 c0    	mov    %ax,0xc012158a
+c01022c7:	0f b6 05 8c 15 12 c0 	movzbl 0xc012158c,%eax
+c01022ce:	83 e0 e0             	and    $0xffffffe0,%eax
+c01022d1:	a2 8c 15 12 c0       	mov    %al,0xc012158c
+c01022d6:	0f b6 05 8c 15 12 c0 	movzbl 0xc012158c,%eax
+c01022dd:	83 e0 1f             	and    $0x1f,%eax
+c01022e0:	a2 8c 15 12 c0       	mov    %al,0xc012158c
+c01022e5:	0f b6 05 8d 15 12 c0 	movzbl 0xc012158d,%eax
+c01022ec:	83 c8 0f             	or     $0xf,%eax
+c01022ef:	a2 8d 15 12 c0       	mov    %al,0xc012158d
+c01022f4:	0f b6 05 8d 15 12 c0 	movzbl 0xc012158d,%eax
+c01022fb:	83 e0 ef             	and    $0xffffffef,%eax
+c01022fe:	a2 8d 15 12 c0       	mov    %al,0xc012158d
+c0102303:	0f b6 05 8d 15 12 c0 	movzbl 0xc012158d,%eax
+c010230a:	83 c8 60             	or     $0x60,%eax
+c010230d:	a2 8d 15 12 c0       	mov    %al,0xc012158d
+c0102312:	0f b6 05 8d 15 12 c0 	movzbl 0xc012158d,%eax
+c0102319:	83 c8 80             	or     $0xffffff80,%eax
+c010231c:	a2 8d 15 12 c0       	mov    %al,0xc012158d
+c0102321:	a1 e4 07 12 c0       	mov    0xc01207e4,%eax
+c0102326:	c1 e8 10             	shr    $0x10,%eax
+c0102329:	66 a3 8e 15 12 c0    	mov    %ax,0xc012158e
+c010232f:	c7 45 f4 80 05 12 c0 	movl   $0xc0120580,-0xc(%ebp)
+    }
+}
+
+static inline void
+lidt(struct pseudodesc *pd) {
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+c0102336:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102339:	0f 01 18             	lidtl  (%eax)
+	lidt(&idt_pd);
+}
+c010233c:	90                   	nop
+c010233d:	c9                   	leave  
+c010233e:	c3                   	ret    
+
+c010233f <trapname>:
+
+static const char *
+trapname(int trapno) {
+c010233f:	55                   	push   %ebp
+c0102340:	89 e5                	mov    %esp,%ebp
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+c0102342:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102345:	83 f8 13             	cmp    $0x13,%eax
+c0102348:	77 0c                	ja     c0102356 <trapname+0x17>
+        return excnames[trapno];
+c010234a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010234d:	8b 04 85 00 91 10 c0 	mov    -0x3fef6f00(,%eax,4),%eax
+c0102354:	eb 18                	jmp    c010236e <trapname+0x2f>
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+c0102356:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
+c010235a:	7e 0d                	jle    c0102369 <trapname+0x2a>
+c010235c:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
+c0102360:	7f 07                	jg     c0102369 <trapname+0x2a>
+        return "Hardware Interrupt";
+c0102362:	b8 3f 8d 10 c0       	mov    $0xc0108d3f,%eax
+c0102367:	eb 05                	jmp    c010236e <trapname+0x2f>
+    }
+    return "(unknown trap)";
+c0102369:	b8 52 8d 10 c0       	mov    $0xc0108d52,%eax
+}
+c010236e:	5d                   	pop    %ebp
+c010236f:	c3                   	ret    
+
+c0102370 <trap_in_kernel>:
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+c0102370:	55                   	push   %ebp
+c0102371:	89 e5                	mov    %esp,%ebp
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+c0102373:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102376:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c010237a:	66 83 f8 08          	cmp    $0x8,%ax
+c010237e:	0f 94 c0             	sete   %al
+c0102381:	0f b6 c0             	movzbl %al,%eax
+}
+c0102384:	5d                   	pop    %ebp
+c0102385:	c3                   	ret    
+
+c0102386 <print_trapframe>:
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+c0102386:	55                   	push   %ebp
+c0102387:	89 e5                	mov    %esp,%ebp
+c0102389:	83 ec 18             	sub    $0x18,%esp
+    cprintf("trapframe at %p\n", tf);
+c010238c:	83 ec 08             	sub    $0x8,%esp
+c010238f:	ff 75 08             	pushl  0x8(%ebp)
+c0102392:	68 93 8d 10 c0       	push   $0xc0108d93
+c0102397:	e8 da de ff ff       	call   c0100276 <cprintf>
+c010239c:	83 c4 10             	add    $0x10,%esp
+    print_regs(&tf->tf_regs);
+c010239f:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023a2:	83 ec 0c             	sub    $0xc,%esp
+c01023a5:	50                   	push   %eax
+c01023a6:	e8 b8 01 00 00       	call   c0102563 <print_regs>
+c01023ab:	83 c4 10             	add    $0x10,%esp
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+c01023ae:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023b1:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c01023b5:	0f b7 c0             	movzwl %ax,%eax
+c01023b8:	83 ec 08             	sub    $0x8,%esp
+c01023bb:	50                   	push   %eax
+c01023bc:	68 a4 8d 10 c0       	push   $0xc0108da4
+c01023c1:	e8 b0 de ff ff       	call   c0100276 <cprintf>
+c01023c6:	83 c4 10             	add    $0x10,%esp
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+c01023c9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023cc:	0f b7 40 28          	movzwl 0x28(%eax),%eax
+c01023d0:	0f b7 c0             	movzwl %ax,%eax
+c01023d3:	83 ec 08             	sub    $0x8,%esp
+c01023d6:	50                   	push   %eax
+c01023d7:	68 b7 8d 10 c0       	push   $0xc0108db7
+c01023dc:	e8 95 de ff ff       	call   c0100276 <cprintf>
+c01023e1:	83 c4 10             	add    $0x10,%esp
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+c01023e4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023e7:	0f b7 40 24          	movzwl 0x24(%eax),%eax
+c01023eb:	0f b7 c0             	movzwl %ax,%eax
+c01023ee:	83 ec 08             	sub    $0x8,%esp
+c01023f1:	50                   	push   %eax
+c01023f2:	68 ca 8d 10 c0       	push   $0xc0108dca
+c01023f7:	e8 7a de ff ff       	call   c0100276 <cprintf>
+c01023fc:	83 c4 10             	add    $0x10,%esp
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+c01023ff:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102402:	0f b7 40 20          	movzwl 0x20(%eax),%eax
+c0102406:	0f b7 c0             	movzwl %ax,%eax
+c0102409:	83 ec 08             	sub    $0x8,%esp
+c010240c:	50                   	push   %eax
+c010240d:	68 dd 8d 10 c0       	push   $0xc0108ddd
+c0102412:	e8 5f de ff ff       	call   c0100276 <cprintf>
+c0102417:	83 c4 10             	add    $0x10,%esp
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+c010241a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010241d:	8b 40 30             	mov    0x30(%eax),%eax
+c0102420:	83 ec 0c             	sub    $0xc,%esp
+c0102423:	50                   	push   %eax
+c0102424:	e8 16 ff ff ff       	call   c010233f <trapname>
+c0102429:	83 c4 10             	add    $0x10,%esp
+c010242c:	89 c2                	mov    %eax,%edx
+c010242e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102431:	8b 40 30             	mov    0x30(%eax),%eax
+c0102434:	83 ec 04             	sub    $0x4,%esp
+c0102437:	52                   	push   %edx
+c0102438:	50                   	push   %eax
+c0102439:	68 f0 8d 10 c0       	push   $0xc0108df0
+c010243e:	e8 33 de ff ff       	call   c0100276 <cprintf>
+c0102443:	83 c4 10             	add    $0x10,%esp
+    cprintf("  err  0x%08x\n", tf->tf_err);
+c0102446:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102449:	8b 40 34             	mov    0x34(%eax),%eax
+c010244c:	83 ec 08             	sub    $0x8,%esp
+c010244f:	50                   	push   %eax
+c0102450:	68 02 8e 10 c0       	push   $0xc0108e02
+c0102455:	e8 1c de ff ff       	call   c0100276 <cprintf>
+c010245a:	83 c4 10             	add    $0x10,%esp
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+c010245d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102460:	8b 40 38             	mov    0x38(%eax),%eax
+c0102463:	83 ec 08             	sub    $0x8,%esp
+c0102466:	50                   	push   %eax
+c0102467:	68 11 8e 10 c0       	push   $0xc0108e11
+c010246c:	e8 05 de ff ff       	call   c0100276 <cprintf>
+c0102471:	83 c4 10             	add    $0x10,%esp
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+c0102474:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102477:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c010247b:	0f b7 c0             	movzwl %ax,%eax
+c010247e:	83 ec 08             	sub    $0x8,%esp
+c0102481:	50                   	push   %eax
+c0102482:	68 20 8e 10 c0       	push   $0xc0108e20
+c0102487:	e8 ea dd ff ff       	call   c0100276 <cprintf>
+c010248c:	83 c4 10             	add    $0x10,%esp
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+c010248f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102492:	8b 40 40             	mov    0x40(%eax),%eax
+c0102495:	83 ec 08             	sub    $0x8,%esp
+c0102498:	50                   	push   %eax
+c0102499:	68 33 8e 10 c0       	push   $0xc0108e33
+c010249e:	e8 d3 dd ff ff       	call   c0100276 <cprintf>
+c01024a3:	83 c4 10             	add    $0x10,%esp
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+c01024a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01024ad:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+c01024b4:	eb 3f                	jmp    c01024f5 <print_trapframe+0x16f>
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+c01024b6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024b9:	8b 50 40             	mov    0x40(%eax),%edx
+c01024bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01024bf:	21 d0                	and    %edx,%eax
+c01024c1:	85 c0                	test   %eax,%eax
+c01024c3:	74 29                	je     c01024ee <print_trapframe+0x168>
+c01024c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01024c8:	8b 04 85 a0 05 12 c0 	mov    -0x3fedfa60(,%eax,4),%eax
+c01024cf:	85 c0                	test   %eax,%eax
+c01024d1:	74 1b                	je     c01024ee <print_trapframe+0x168>
+            cprintf("%s,", IA32flags[i]);
+c01024d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01024d6:	8b 04 85 a0 05 12 c0 	mov    -0x3fedfa60(,%eax,4),%eax
+c01024dd:	83 ec 08             	sub    $0x8,%esp
+c01024e0:	50                   	push   %eax
+c01024e1:	68 42 8e 10 c0       	push   $0xc0108e42
+c01024e6:	e8 8b dd ff ff       	call   c0100276 <cprintf>
+c01024eb:	83 c4 10             	add    $0x10,%esp
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+c01024ee:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c01024f2:	d1 65 f0             	shll   -0x10(%ebp)
+c01024f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01024f8:	83 f8 17             	cmp    $0x17,%eax
+c01024fb:	76 b9                	jbe    c01024b6 <print_trapframe+0x130>
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+c01024fd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102500:	8b 40 40             	mov    0x40(%eax),%eax
+c0102503:	25 00 30 00 00       	and    $0x3000,%eax
+c0102508:	c1 e8 0c             	shr    $0xc,%eax
+c010250b:	83 ec 08             	sub    $0x8,%esp
+c010250e:	50                   	push   %eax
+c010250f:	68 46 8e 10 c0       	push   $0xc0108e46
+c0102514:	e8 5d dd ff ff       	call   c0100276 <cprintf>
+c0102519:	83 c4 10             	add    $0x10,%esp
+
+    if (!trap_in_kernel(tf)) {
+c010251c:	83 ec 0c             	sub    $0xc,%esp
+c010251f:	ff 75 08             	pushl  0x8(%ebp)
+c0102522:	e8 49 fe ff ff       	call   c0102370 <trap_in_kernel>
+c0102527:	83 c4 10             	add    $0x10,%esp
+c010252a:	85 c0                	test   %eax,%eax
+c010252c:	75 32                	jne    c0102560 <print_trapframe+0x1da>
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+c010252e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102531:	8b 40 44             	mov    0x44(%eax),%eax
+c0102534:	83 ec 08             	sub    $0x8,%esp
+c0102537:	50                   	push   %eax
+c0102538:	68 4f 8e 10 c0       	push   $0xc0108e4f
+c010253d:	e8 34 dd ff ff       	call   c0100276 <cprintf>
+c0102542:	83 c4 10             	add    $0x10,%esp
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+c0102545:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102548:	0f b7 40 48          	movzwl 0x48(%eax),%eax
+c010254c:	0f b7 c0             	movzwl %ax,%eax
+c010254f:	83 ec 08             	sub    $0x8,%esp
+c0102552:	50                   	push   %eax
+c0102553:	68 5e 8e 10 c0       	push   $0xc0108e5e
+c0102558:	e8 19 dd ff ff       	call   c0100276 <cprintf>
+c010255d:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0102560:	90                   	nop
+c0102561:	c9                   	leave  
+c0102562:	c3                   	ret    
+
+c0102563 <print_regs>:
+
+void
+print_regs(struct pushregs *regs) {
+c0102563:	55                   	push   %ebp
+c0102564:	89 e5                	mov    %esp,%ebp
+c0102566:	83 ec 08             	sub    $0x8,%esp
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+c0102569:	8b 45 08             	mov    0x8(%ebp),%eax
+c010256c:	8b 00                	mov    (%eax),%eax
+c010256e:	83 ec 08             	sub    $0x8,%esp
+c0102571:	50                   	push   %eax
+c0102572:	68 71 8e 10 c0       	push   $0xc0108e71
+c0102577:	e8 fa dc ff ff       	call   c0100276 <cprintf>
+c010257c:	83 c4 10             	add    $0x10,%esp
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+c010257f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102582:	8b 40 04             	mov    0x4(%eax),%eax
+c0102585:	83 ec 08             	sub    $0x8,%esp
+c0102588:	50                   	push   %eax
+c0102589:	68 80 8e 10 c0       	push   $0xc0108e80
+c010258e:	e8 e3 dc ff ff       	call   c0100276 <cprintf>
+c0102593:	83 c4 10             	add    $0x10,%esp
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+c0102596:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102599:	8b 40 08             	mov    0x8(%eax),%eax
+c010259c:	83 ec 08             	sub    $0x8,%esp
+c010259f:	50                   	push   %eax
+c01025a0:	68 8f 8e 10 c0       	push   $0xc0108e8f
+c01025a5:	e8 cc dc ff ff       	call   c0100276 <cprintf>
+c01025aa:	83 c4 10             	add    $0x10,%esp
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+c01025ad:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025b0:	8b 40 0c             	mov    0xc(%eax),%eax
+c01025b3:	83 ec 08             	sub    $0x8,%esp
+c01025b6:	50                   	push   %eax
+c01025b7:	68 9e 8e 10 c0       	push   $0xc0108e9e
+c01025bc:	e8 b5 dc ff ff       	call   c0100276 <cprintf>
+c01025c1:	83 c4 10             	add    $0x10,%esp
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+c01025c4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025c7:	8b 40 10             	mov    0x10(%eax),%eax
+c01025ca:	83 ec 08             	sub    $0x8,%esp
+c01025cd:	50                   	push   %eax
+c01025ce:	68 ad 8e 10 c0       	push   $0xc0108ead
+c01025d3:	e8 9e dc ff ff       	call   c0100276 <cprintf>
+c01025d8:	83 c4 10             	add    $0x10,%esp
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+c01025db:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025de:	8b 40 14             	mov    0x14(%eax),%eax
+c01025e1:	83 ec 08             	sub    $0x8,%esp
+c01025e4:	50                   	push   %eax
+c01025e5:	68 bc 8e 10 c0       	push   $0xc0108ebc
+c01025ea:	e8 87 dc ff ff       	call   c0100276 <cprintf>
+c01025ef:	83 c4 10             	add    $0x10,%esp
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+c01025f2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025f5:	8b 40 18             	mov    0x18(%eax),%eax
+c01025f8:	83 ec 08             	sub    $0x8,%esp
+c01025fb:	50                   	push   %eax
+c01025fc:	68 cb 8e 10 c0       	push   $0xc0108ecb
+c0102601:	e8 70 dc ff ff       	call   c0100276 <cprintf>
+c0102606:	83 c4 10             	add    $0x10,%esp
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+c0102609:	8b 45 08             	mov    0x8(%ebp),%eax
+c010260c:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010260f:	83 ec 08             	sub    $0x8,%esp
+c0102612:	50                   	push   %eax
+c0102613:	68 da 8e 10 c0       	push   $0xc0108eda
+c0102618:	e8 59 dc ff ff       	call   c0100276 <cprintf>
+c010261d:	83 c4 10             	add    $0x10,%esp
+}
+c0102620:	90                   	nop
+c0102621:	c9                   	leave  
+c0102622:	c3                   	ret    
+
+c0102623 <print_pgfault>:
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+c0102623:	55                   	push   %ebp
+c0102624:	89 e5                	mov    %esp,%ebp
+c0102626:	53                   	push   %ebx
+c0102627:	83 ec 14             	sub    $0x14,%esp
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+c010262a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010262d:	8b 40 34             	mov    0x34(%eax),%eax
+c0102630:	83 e0 01             	and    $0x1,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c0102633:	85 c0                	test   %eax,%eax
+c0102635:	74 07                	je     c010263e <print_pgfault+0x1b>
+c0102637:	bb e9 8e 10 c0       	mov    $0xc0108ee9,%ebx
+c010263c:	eb 05                	jmp    c0102643 <print_pgfault+0x20>
+c010263e:	bb fa 8e 10 c0       	mov    $0xc0108efa,%ebx
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+c0102643:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102646:	8b 40 34             	mov    0x34(%eax),%eax
+c0102649:	83 e0 02             	and    $0x2,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c010264c:	85 c0                	test   %eax,%eax
+c010264e:	74 07                	je     c0102657 <print_pgfault+0x34>
+c0102650:	b9 57 00 00 00       	mov    $0x57,%ecx
+c0102655:	eb 05                	jmp    c010265c <print_pgfault+0x39>
+c0102657:	b9 52 00 00 00       	mov    $0x52,%ecx
+            (tf->tf_err & 4) ? 'U' : 'K',
+c010265c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010265f:	8b 40 34             	mov    0x34(%eax),%eax
+c0102662:	83 e0 04             	and    $0x4,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c0102665:	85 c0                	test   %eax,%eax
+c0102667:	74 07                	je     c0102670 <print_pgfault+0x4d>
+c0102669:	ba 55 00 00 00       	mov    $0x55,%edx
+c010266e:	eb 05                	jmp    c0102675 <print_pgfault+0x52>
+c0102670:	ba 4b 00 00 00       	mov    $0x4b,%edx
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c0102675:	0f 20 d0             	mov    %cr2,%eax
+c0102678:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return cr2;
+c010267b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010267e:	83 ec 0c             	sub    $0xc,%esp
+c0102681:	53                   	push   %ebx
+c0102682:	51                   	push   %ecx
+c0102683:	52                   	push   %edx
+c0102684:	50                   	push   %eax
+c0102685:	68 08 8f 10 c0       	push   $0xc0108f08
+c010268a:	e8 e7 db ff ff       	call   c0100276 <cprintf>
+c010268f:	83 c4 20             	add    $0x20,%esp
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+c0102692:	90                   	nop
+c0102693:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c0102696:	c9                   	leave  
+c0102697:	c3                   	ret    
+
+c0102698 <pgfault_handler>:
+
+static int
+pgfault_handler(struct trapframe *tf) {
+c0102698:	55                   	push   %ebp
+c0102699:	89 e5                	mov    %esp,%ebp
+c010269b:	83 ec 18             	sub    $0x18,%esp
+    extern struct mm_struct *check_mm_struct;
+    print_pgfault(tf);
+c010269e:	83 ec 0c             	sub    $0xc,%esp
+c01026a1:	ff 75 08             	pushl  0x8(%ebp)
+c01026a4:	e8 7a ff ff ff       	call   c0102623 <print_pgfault>
+c01026a9:	83 c4 10             	add    $0x10,%esp
+    if (check_mm_struct != NULL) {
+c01026ac:	a1 70 1a 12 c0       	mov    0xc0121a70,%eax
+c01026b1:	85 c0                	test   %eax,%eax
+c01026b3:	74 24                	je     c01026d9 <pgfault_handler+0x41>
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c01026b5:	0f 20 d0             	mov    %cr2,%eax
+c01026b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return cr2;
+c01026bb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+        return do_pgfault(check_mm_struct, tf->tf_err, rcr2());
+c01026be:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026c1:	8b 50 34             	mov    0x34(%eax),%edx
+c01026c4:	a1 70 1a 12 c0       	mov    0xc0121a70,%eax
+c01026c9:	83 ec 04             	sub    $0x4,%esp
+c01026cc:	51                   	push   %ecx
+c01026cd:	52                   	push   %edx
+c01026ce:	50                   	push   %eax
+c01026cf:	e8 20 17 00 00       	call   c0103df4 <do_pgfault>
+c01026d4:	83 c4 10             	add    $0x10,%esp
+c01026d7:	eb 1c                	jmp    c01026f5 <pgfault_handler+0x5d>
+    }
+    panic("unhandled page fault.\n");
+c01026d9:	e8 6c e3 ff ff       	call   c0100a4a <print_stackframe>
+c01026de:	83 ec 04             	sub    $0x4,%esp
+c01026e1:	68 2b 8f 10 c0       	push   $0xc0108f2b
+c01026e6:	68 ab 00 00 00       	push   $0xab
+c01026eb:	68 2e 8d 10 c0       	push   $0xc0108d2e
+c01026f0:	e8 e7 dc ff ff       	call   c01003dc <__panic>
+}
+c01026f5:	c9                   	leave  
+c01026f6:	c3                   	ret    
+
+c01026f7 <trap_dispatch>:
+extern struct mm_struct *check_mm_struct;
+
+static uint32_t clock_count = 0;
+
+static void
+trap_dispatch(struct trapframe *tf) {
+c01026f7:	55                   	push   %ebp
+c01026f8:	89 e5                	mov    %esp,%ebp
+c01026fa:	83 ec 18             	sub    $0x18,%esp
+    char c;
+
+    int ret;
+
+    switch (tf->tf_trapno) {
+c01026fd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102700:	8b 40 30             	mov    0x30(%eax),%eax
+c0102703:	83 f8 24             	cmp    $0x24,%eax
+c0102706:	0f 84 b4 00 00 00    	je     c01027c0 <trap_dispatch+0xc9>
+c010270c:	83 f8 24             	cmp    $0x24,%eax
+c010270f:	77 18                	ja     c0102729 <trap_dispatch+0x32>
+c0102711:	83 f8 20             	cmp    $0x20,%eax
+c0102714:	74 7b                	je     c0102791 <trap_dispatch+0x9a>
+c0102716:	83 f8 21             	cmp    $0x21,%eax
+c0102719:	0f 84 c8 00 00 00    	je     c01027e7 <trap_dispatch+0xf0>
+c010271f:	83 f8 0e             	cmp    $0xe,%eax
+c0102722:	74 28                	je     c010274c <trap_dispatch+0x55>
+c0102724:	e9 fe 00 00 00       	jmp    c0102827 <trap_dispatch+0x130>
+c0102729:	83 f8 2e             	cmp    $0x2e,%eax
+c010272c:	0f 82 f5 00 00 00    	jb     c0102827 <trap_dispatch+0x130>
+c0102732:	83 f8 2f             	cmp    $0x2f,%eax
+c0102735:	0f 86 27 01 00 00    	jbe    c0102862 <trap_dispatch+0x16b>
+c010273b:	83 e8 78             	sub    $0x78,%eax
+c010273e:	83 f8 01             	cmp    $0x1,%eax
+c0102741:	0f 87 e0 00 00 00    	ja     c0102827 <trap_dispatch+0x130>
+c0102747:	e9 bf 00 00 00       	jmp    c010280b <trap_dispatch+0x114>
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+c010274c:	83 ec 0c             	sub    $0xc,%esp
+c010274f:	ff 75 08             	pushl  0x8(%ebp)
+c0102752:	e8 41 ff ff ff       	call   c0102698 <pgfault_handler>
+c0102757:	83 c4 10             	add    $0x10,%esp
+c010275a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010275d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0102761:	0f 84 fe 00 00 00    	je     c0102865 <trap_dispatch+0x16e>
+            print_trapframe(tf);
+c0102767:	83 ec 0c             	sub    $0xc,%esp
+c010276a:	ff 75 08             	pushl  0x8(%ebp)
+c010276d:	e8 14 fc ff ff       	call   c0102386 <print_trapframe>
+c0102772:	83 c4 10             	add    $0x10,%esp
+            panic("handle pgfault failed. %e\n", ret);
+c0102775:	e8 d0 e2 ff ff       	call   c0100a4a <print_stackframe>
+c010277a:	ff 75 f4             	pushl  -0xc(%ebp)
+c010277d:	68 42 8f 10 c0       	push   $0xc0108f42
+c0102782:	68 bd 00 00 00       	push   $0xbd
+c0102787:	68 2e 8d 10 c0       	push   $0xc0108d2e
+c010278c:	e8 4b dc ff ff       	call   c01003dc <__panic>
+        /* handle the timer interrupt */
+        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+         * (3) Too Simple? Yes, I think so!
+         */
+	    clock_count ++;
+c0102791:	a1 c4 19 12 c0       	mov    0xc01219c4,%eax
+c0102796:	83 c0 01             	add    $0x1,%eax
+c0102799:	a3 c4 19 12 c0       	mov    %eax,0xc01219c4
+	    if (clock_count == TICK_NUM) {
+c010279e:	a1 c4 19 12 c0       	mov    0xc01219c4,%eax
+c01027a3:	83 f8 64             	cmp    $0x64,%eax
+c01027a6:	0f 85 bc 00 00 00    	jne    c0102868 <trap_dispatch+0x171>
+		    clock_count = 0;
+c01027ac:	c7 05 c4 19 12 c0 00 	movl   $0x0,0xc01219c4
+c01027b3:	00 00 00 
+		    print_ticks();
+c01027b6:	e8 fa f8 ff ff       	call   c01020b5 <print_ticks>
+		    //print_trapframe(tf);
+	    }
+        break;
+c01027bb:	e9 a8 00 00 00       	jmp    c0102868 <trap_dispatch+0x171>
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+c01027c0:	e8 ad f6 ff ff       	call   c0101e72 <cons_getc>
+c01027c5:	88 45 f3             	mov    %al,-0xd(%ebp)
+        cprintf("serial [%03d] %c\n", c, c);
+c01027c8:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
+c01027cc:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
+c01027d0:	83 ec 04             	sub    $0x4,%esp
+c01027d3:	52                   	push   %edx
+c01027d4:	50                   	push   %eax
+c01027d5:	68 5d 8f 10 c0       	push   $0xc0108f5d
+c01027da:	e8 97 da ff ff       	call   c0100276 <cprintf>
+c01027df:	83 c4 10             	add    $0x10,%esp
+        break;
+c01027e2:	e9 82 00 00 00       	jmp    c0102869 <trap_dispatch+0x172>
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+c01027e7:	e8 86 f6 ff ff       	call   c0101e72 <cons_getc>
+c01027ec:	88 45 f3             	mov    %al,-0xd(%ebp)
+        cprintf("kbd [%03d] %c\n", c, c);
+c01027ef:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
+c01027f3:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
+c01027f7:	83 ec 04             	sub    $0x4,%esp
+c01027fa:	52                   	push   %edx
+c01027fb:	50                   	push   %eax
+c01027fc:	68 6f 8f 10 c0       	push   $0xc0108f6f
+c0102801:	e8 70 da ff ff       	call   c0100276 <cprintf>
+c0102806:	83 c4 10             	add    $0x10,%esp
+        break;
+c0102809:	eb 5e                	jmp    c0102869 <trap_dispatch+0x172>
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    case T_SWITCH_TOK:
+        panic("T_SWITCH_** ??\n");
+c010280b:	e8 3a e2 ff ff       	call   c0100a4a <print_stackframe>
+c0102810:	83 ec 04             	sub    $0x4,%esp
+c0102813:	68 7e 8f 10 c0       	push   $0xc0108f7e
+c0102818:	68 dd 00 00 00       	push   $0xdd
+c010281d:	68 2e 8d 10 c0       	push   $0xc0108d2e
+c0102822:	e8 b5 db ff ff       	call   c01003dc <__panic>
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        // in kernel, it must be a mistake
+        if ((tf->tf_cs & 3) == 0) {
+c0102827:	8b 45 08             	mov    0x8(%ebp),%eax
+c010282a:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c010282e:	0f b7 c0             	movzwl %ax,%eax
+c0102831:	83 e0 03             	and    $0x3,%eax
+c0102834:	85 c0                	test   %eax,%eax
+c0102836:	75 31                	jne    c0102869 <trap_dispatch+0x172>
+            print_trapframe(tf);
+c0102838:	83 ec 0c             	sub    $0xc,%esp
+c010283b:	ff 75 08             	pushl  0x8(%ebp)
+c010283e:	e8 43 fb ff ff       	call   c0102386 <print_trapframe>
+c0102843:	83 c4 10             	add    $0x10,%esp
+            panic("unexpected trap in kernel.\n");
+c0102846:	e8 ff e1 ff ff       	call   c0100a4a <print_stackframe>
+c010284b:	83 ec 04             	sub    $0x4,%esp
+c010284e:	68 8e 8f 10 c0       	push   $0xc0108f8e
+c0102853:	68 e7 00 00 00       	push   $0xe7
+c0102858:	68 2e 8d 10 c0       	push   $0xc0108d2e
+c010285d:	e8 7a db ff ff       	call   c01003dc <__panic>
+        panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+c0102862:	90                   	nop
+c0102863:	eb 04                	jmp    c0102869 <trap_dispatch+0x172>
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+            print_trapframe(tf);
+            panic("handle pgfault failed. %e\n", ret);
+        }
+        break;
+c0102865:	90                   	nop
+c0102866:	eb 01                	jmp    c0102869 <trap_dispatch+0x172>
+	    if (clock_count == TICK_NUM) {
+		    clock_count = 0;
+		    print_ticks();
+		    //print_trapframe(tf);
+	    }
+        break;
+c0102868:	90                   	nop
+        if ((tf->tf_cs & 3) == 0) {
+            print_trapframe(tf);
+            panic("unexpected trap in kernel.\n");
+        }
+    }
+}
+c0102869:	90                   	nop
+c010286a:	c9                   	leave  
+c010286b:	c3                   	ret    
+
+c010286c <trap>:
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+c010286c:	55                   	push   %ebp
+c010286d:	89 e5                	mov    %esp,%ebp
+c010286f:	83 ec 08             	sub    $0x8,%esp
+    // dispatch based on what type of trap occurred
+    trap_dispatch(tf);
+c0102872:	83 ec 0c             	sub    $0xc,%esp
+c0102875:	ff 75 08             	pushl  0x8(%ebp)
+c0102878:	e8 7a fe ff ff       	call   c01026f7 <trap_dispatch>
+c010287d:	83 c4 10             	add    $0x10,%esp
+}
+c0102880:	90                   	nop
+c0102881:	c9                   	leave  
+c0102882:	c3                   	ret    
+
+c0102883 <vector0>:
+# handler
+.text
+.globl __alltraps
+.globl vector0
+vector0:
+  pushl $0
+c0102883:	6a 00                	push   $0x0
+  pushl $0
+c0102885:	6a 00                	push   $0x0
+  jmp __alltraps
+c0102887:	e9 67 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c010288c <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+c010288c:	6a 00                	push   $0x0
+  pushl $1
+c010288e:	6a 01                	push   $0x1
+  jmp __alltraps
+c0102890:	e9 5e 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102895 <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+c0102895:	6a 00                	push   $0x0
+  pushl $2
+c0102897:	6a 02                	push   $0x2
+  jmp __alltraps
+c0102899:	e9 55 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c010289e <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+c010289e:	6a 00                	push   $0x0
+  pushl $3
+c01028a0:	6a 03                	push   $0x3
+  jmp __alltraps
+c01028a2:	e9 4c 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c01028a7 <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+c01028a7:	6a 00                	push   $0x0
+  pushl $4
+c01028a9:	6a 04                	push   $0x4
+  jmp __alltraps
+c01028ab:	e9 43 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c01028b0 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+c01028b0:	6a 00                	push   $0x0
+  pushl $5
+c01028b2:	6a 05                	push   $0x5
+  jmp __alltraps
+c01028b4:	e9 3a 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c01028b9 <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+c01028b9:	6a 00                	push   $0x0
+  pushl $6
+c01028bb:	6a 06                	push   $0x6
+  jmp __alltraps
+c01028bd:	e9 31 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c01028c2 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+c01028c2:	6a 00                	push   $0x0
+  pushl $7
+c01028c4:	6a 07                	push   $0x7
+  jmp __alltraps
+c01028c6:	e9 28 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c01028cb <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+c01028cb:	6a 08                	push   $0x8
+  jmp __alltraps
+c01028cd:	e9 21 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c01028d2 <vector9>:
+.globl vector9
+vector9:
+  pushl $9
+c01028d2:	6a 09                	push   $0x9
+  jmp __alltraps
+c01028d4:	e9 1a 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c01028d9 <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+c01028d9:	6a 0a                	push   $0xa
+  jmp __alltraps
+c01028db:	e9 13 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c01028e0 <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+c01028e0:	6a 0b                	push   $0xb
+  jmp __alltraps
+c01028e2:	e9 0c 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c01028e7 <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+c01028e7:	6a 0c                	push   $0xc
+  jmp __alltraps
+c01028e9:	e9 05 0a 00 00       	jmp    c01032f3 <__alltraps>
+
+c01028ee <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+c01028ee:	6a 0d                	push   $0xd
+  jmp __alltraps
+c01028f0:	e9 fe 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c01028f5 <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+c01028f5:	6a 0e                	push   $0xe
+  jmp __alltraps
+c01028f7:	e9 f7 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c01028fc <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+c01028fc:	6a 00                	push   $0x0
+  pushl $15
+c01028fe:	6a 0f                	push   $0xf
+  jmp __alltraps
+c0102900:	e9 ee 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102905 <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+c0102905:	6a 00                	push   $0x0
+  pushl $16
+c0102907:	6a 10                	push   $0x10
+  jmp __alltraps
+c0102909:	e9 e5 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c010290e <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+c010290e:	6a 11                	push   $0x11
+  jmp __alltraps
+c0102910:	e9 de 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102915 <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+c0102915:	6a 00                	push   $0x0
+  pushl $18
+c0102917:	6a 12                	push   $0x12
+  jmp __alltraps
+c0102919:	e9 d5 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c010291e <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+c010291e:	6a 00                	push   $0x0
+  pushl $19
+c0102920:	6a 13                	push   $0x13
+  jmp __alltraps
+c0102922:	e9 cc 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102927 <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+c0102927:	6a 00                	push   $0x0
+  pushl $20
+c0102929:	6a 14                	push   $0x14
+  jmp __alltraps
+c010292b:	e9 c3 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102930 <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+c0102930:	6a 00                	push   $0x0
+  pushl $21
+c0102932:	6a 15                	push   $0x15
+  jmp __alltraps
+c0102934:	e9 ba 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102939 <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+c0102939:	6a 00                	push   $0x0
+  pushl $22
+c010293b:	6a 16                	push   $0x16
+  jmp __alltraps
+c010293d:	e9 b1 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102942 <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+c0102942:	6a 00                	push   $0x0
+  pushl $23
+c0102944:	6a 17                	push   $0x17
+  jmp __alltraps
+c0102946:	e9 a8 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c010294b <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+c010294b:	6a 00                	push   $0x0
+  pushl $24
+c010294d:	6a 18                	push   $0x18
+  jmp __alltraps
+c010294f:	e9 9f 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102954 <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+c0102954:	6a 00                	push   $0x0
+  pushl $25
+c0102956:	6a 19                	push   $0x19
+  jmp __alltraps
+c0102958:	e9 96 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c010295d <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+c010295d:	6a 00                	push   $0x0
+  pushl $26
+c010295f:	6a 1a                	push   $0x1a
+  jmp __alltraps
+c0102961:	e9 8d 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102966 <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+c0102966:	6a 00                	push   $0x0
+  pushl $27
+c0102968:	6a 1b                	push   $0x1b
+  jmp __alltraps
+c010296a:	e9 84 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c010296f <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+c010296f:	6a 00                	push   $0x0
+  pushl $28
+c0102971:	6a 1c                	push   $0x1c
+  jmp __alltraps
+c0102973:	e9 7b 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102978 <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+c0102978:	6a 00                	push   $0x0
+  pushl $29
+c010297a:	6a 1d                	push   $0x1d
+  jmp __alltraps
+c010297c:	e9 72 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102981 <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+c0102981:	6a 00                	push   $0x0
+  pushl $30
+c0102983:	6a 1e                	push   $0x1e
+  jmp __alltraps
+c0102985:	e9 69 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c010298a <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+c010298a:	6a 00                	push   $0x0
+  pushl $31
+c010298c:	6a 1f                	push   $0x1f
+  jmp __alltraps
+c010298e:	e9 60 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102993 <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+c0102993:	6a 00                	push   $0x0
+  pushl $32
+c0102995:	6a 20                	push   $0x20
+  jmp __alltraps
+c0102997:	e9 57 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c010299c <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+c010299c:	6a 00                	push   $0x0
+  pushl $33
+c010299e:	6a 21                	push   $0x21
+  jmp __alltraps
+c01029a0:	e9 4e 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c01029a5 <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+c01029a5:	6a 00                	push   $0x0
+  pushl $34
+c01029a7:	6a 22                	push   $0x22
+  jmp __alltraps
+c01029a9:	e9 45 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c01029ae <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+c01029ae:	6a 00                	push   $0x0
+  pushl $35
+c01029b0:	6a 23                	push   $0x23
+  jmp __alltraps
+c01029b2:	e9 3c 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c01029b7 <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+c01029b7:	6a 00                	push   $0x0
+  pushl $36
+c01029b9:	6a 24                	push   $0x24
+  jmp __alltraps
+c01029bb:	e9 33 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c01029c0 <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+c01029c0:	6a 00                	push   $0x0
+  pushl $37
+c01029c2:	6a 25                	push   $0x25
+  jmp __alltraps
+c01029c4:	e9 2a 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c01029c9 <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+c01029c9:	6a 00                	push   $0x0
+  pushl $38
+c01029cb:	6a 26                	push   $0x26
+  jmp __alltraps
+c01029cd:	e9 21 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c01029d2 <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+c01029d2:	6a 00                	push   $0x0
+  pushl $39
+c01029d4:	6a 27                	push   $0x27
+  jmp __alltraps
+c01029d6:	e9 18 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c01029db <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+c01029db:	6a 00                	push   $0x0
+  pushl $40
+c01029dd:	6a 28                	push   $0x28
+  jmp __alltraps
+c01029df:	e9 0f 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c01029e4 <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+c01029e4:	6a 00                	push   $0x0
+  pushl $41
+c01029e6:	6a 29                	push   $0x29
+  jmp __alltraps
+c01029e8:	e9 06 09 00 00       	jmp    c01032f3 <__alltraps>
+
+c01029ed <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+c01029ed:	6a 00                	push   $0x0
+  pushl $42
+c01029ef:	6a 2a                	push   $0x2a
+  jmp __alltraps
+c01029f1:	e9 fd 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c01029f6 <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+c01029f6:	6a 00                	push   $0x0
+  pushl $43
+c01029f8:	6a 2b                	push   $0x2b
+  jmp __alltraps
+c01029fa:	e9 f4 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c01029ff <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+c01029ff:	6a 00                	push   $0x0
+  pushl $44
+c0102a01:	6a 2c                	push   $0x2c
+  jmp __alltraps
+c0102a03:	e9 eb 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a08 <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+c0102a08:	6a 00                	push   $0x0
+  pushl $45
+c0102a0a:	6a 2d                	push   $0x2d
+  jmp __alltraps
+c0102a0c:	e9 e2 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a11 <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+c0102a11:	6a 00                	push   $0x0
+  pushl $46
+c0102a13:	6a 2e                	push   $0x2e
+  jmp __alltraps
+c0102a15:	e9 d9 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a1a <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+c0102a1a:	6a 00                	push   $0x0
+  pushl $47
+c0102a1c:	6a 2f                	push   $0x2f
+  jmp __alltraps
+c0102a1e:	e9 d0 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a23 <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+c0102a23:	6a 00                	push   $0x0
+  pushl $48
+c0102a25:	6a 30                	push   $0x30
+  jmp __alltraps
+c0102a27:	e9 c7 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a2c <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+c0102a2c:	6a 00                	push   $0x0
+  pushl $49
+c0102a2e:	6a 31                	push   $0x31
+  jmp __alltraps
+c0102a30:	e9 be 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a35 <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+c0102a35:	6a 00                	push   $0x0
+  pushl $50
+c0102a37:	6a 32                	push   $0x32
+  jmp __alltraps
+c0102a39:	e9 b5 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a3e <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+c0102a3e:	6a 00                	push   $0x0
+  pushl $51
+c0102a40:	6a 33                	push   $0x33
+  jmp __alltraps
+c0102a42:	e9 ac 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a47 <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+c0102a47:	6a 00                	push   $0x0
+  pushl $52
+c0102a49:	6a 34                	push   $0x34
+  jmp __alltraps
+c0102a4b:	e9 a3 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a50 <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+c0102a50:	6a 00                	push   $0x0
+  pushl $53
+c0102a52:	6a 35                	push   $0x35
+  jmp __alltraps
+c0102a54:	e9 9a 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a59 <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+c0102a59:	6a 00                	push   $0x0
+  pushl $54
+c0102a5b:	6a 36                	push   $0x36
+  jmp __alltraps
+c0102a5d:	e9 91 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a62 <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+c0102a62:	6a 00                	push   $0x0
+  pushl $55
+c0102a64:	6a 37                	push   $0x37
+  jmp __alltraps
+c0102a66:	e9 88 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a6b <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+c0102a6b:	6a 00                	push   $0x0
+  pushl $56
+c0102a6d:	6a 38                	push   $0x38
+  jmp __alltraps
+c0102a6f:	e9 7f 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a74 <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+c0102a74:	6a 00                	push   $0x0
+  pushl $57
+c0102a76:	6a 39                	push   $0x39
+  jmp __alltraps
+c0102a78:	e9 76 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a7d <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+c0102a7d:	6a 00                	push   $0x0
+  pushl $58
+c0102a7f:	6a 3a                	push   $0x3a
+  jmp __alltraps
+c0102a81:	e9 6d 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a86 <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+c0102a86:	6a 00                	push   $0x0
+  pushl $59
+c0102a88:	6a 3b                	push   $0x3b
+  jmp __alltraps
+c0102a8a:	e9 64 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a8f <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+c0102a8f:	6a 00                	push   $0x0
+  pushl $60
+c0102a91:	6a 3c                	push   $0x3c
+  jmp __alltraps
+c0102a93:	e9 5b 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102a98 <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+c0102a98:	6a 00                	push   $0x0
+  pushl $61
+c0102a9a:	6a 3d                	push   $0x3d
+  jmp __alltraps
+c0102a9c:	e9 52 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102aa1 <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+c0102aa1:	6a 00                	push   $0x0
+  pushl $62
+c0102aa3:	6a 3e                	push   $0x3e
+  jmp __alltraps
+c0102aa5:	e9 49 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102aaa <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+c0102aaa:	6a 00                	push   $0x0
+  pushl $63
+c0102aac:	6a 3f                	push   $0x3f
+  jmp __alltraps
+c0102aae:	e9 40 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ab3 <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+c0102ab3:	6a 00                	push   $0x0
+  pushl $64
+c0102ab5:	6a 40                	push   $0x40
+  jmp __alltraps
+c0102ab7:	e9 37 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102abc <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+c0102abc:	6a 00                	push   $0x0
+  pushl $65
+c0102abe:	6a 41                	push   $0x41
+  jmp __alltraps
+c0102ac0:	e9 2e 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ac5 <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+c0102ac5:	6a 00                	push   $0x0
+  pushl $66
+c0102ac7:	6a 42                	push   $0x42
+  jmp __alltraps
+c0102ac9:	e9 25 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ace <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+c0102ace:	6a 00                	push   $0x0
+  pushl $67
+c0102ad0:	6a 43                	push   $0x43
+  jmp __alltraps
+c0102ad2:	e9 1c 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ad7 <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+c0102ad7:	6a 00                	push   $0x0
+  pushl $68
+c0102ad9:	6a 44                	push   $0x44
+  jmp __alltraps
+c0102adb:	e9 13 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ae0 <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+c0102ae0:	6a 00                	push   $0x0
+  pushl $69
+c0102ae2:	6a 45                	push   $0x45
+  jmp __alltraps
+c0102ae4:	e9 0a 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ae9 <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+c0102ae9:	6a 00                	push   $0x0
+  pushl $70
+c0102aeb:	6a 46                	push   $0x46
+  jmp __alltraps
+c0102aed:	e9 01 08 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102af2 <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+c0102af2:	6a 00                	push   $0x0
+  pushl $71
+c0102af4:	6a 47                	push   $0x47
+  jmp __alltraps
+c0102af6:	e9 f8 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102afb <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+c0102afb:	6a 00                	push   $0x0
+  pushl $72
+c0102afd:	6a 48                	push   $0x48
+  jmp __alltraps
+c0102aff:	e9 ef 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b04 <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+c0102b04:	6a 00                	push   $0x0
+  pushl $73
+c0102b06:	6a 49                	push   $0x49
+  jmp __alltraps
+c0102b08:	e9 e6 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b0d <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+c0102b0d:	6a 00                	push   $0x0
+  pushl $74
+c0102b0f:	6a 4a                	push   $0x4a
+  jmp __alltraps
+c0102b11:	e9 dd 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b16 <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+c0102b16:	6a 00                	push   $0x0
+  pushl $75
+c0102b18:	6a 4b                	push   $0x4b
+  jmp __alltraps
+c0102b1a:	e9 d4 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b1f <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+c0102b1f:	6a 00                	push   $0x0
+  pushl $76
+c0102b21:	6a 4c                	push   $0x4c
+  jmp __alltraps
+c0102b23:	e9 cb 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b28 <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+c0102b28:	6a 00                	push   $0x0
+  pushl $77
+c0102b2a:	6a 4d                	push   $0x4d
+  jmp __alltraps
+c0102b2c:	e9 c2 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b31 <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+c0102b31:	6a 00                	push   $0x0
+  pushl $78
+c0102b33:	6a 4e                	push   $0x4e
+  jmp __alltraps
+c0102b35:	e9 b9 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b3a <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+c0102b3a:	6a 00                	push   $0x0
+  pushl $79
+c0102b3c:	6a 4f                	push   $0x4f
+  jmp __alltraps
+c0102b3e:	e9 b0 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b43 <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+c0102b43:	6a 00                	push   $0x0
+  pushl $80
+c0102b45:	6a 50                	push   $0x50
+  jmp __alltraps
+c0102b47:	e9 a7 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b4c <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+c0102b4c:	6a 00                	push   $0x0
+  pushl $81
+c0102b4e:	6a 51                	push   $0x51
+  jmp __alltraps
+c0102b50:	e9 9e 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b55 <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+c0102b55:	6a 00                	push   $0x0
+  pushl $82
+c0102b57:	6a 52                	push   $0x52
+  jmp __alltraps
+c0102b59:	e9 95 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b5e <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+c0102b5e:	6a 00                	push   $0x0
+  pushl $83
+c0102b60:	6a 53                	push   $0x53
+  jmp __alltraps
+c0102b62:	e9 8c 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b67 <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+c0102b67:	6a 00                	push   $0x0
+  pushl $84
+c0102b69:	6a 54                	push   $0x54
+  jmp __alltraps
+c0102b6b:	e9 83 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b70 <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+c0102b70:	6a 00                	push   $0x0
+  pushl $85
+c0102b72:	6a 55                	push   $0x55
+  jmp __alltraps
+c0102b74:	e9 7a 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b79 <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+c0102b79:	6a 00                	push   $0x0
+  pushl $86
+c0102b7b:	6a 56                	push   $0x56
+  jmp __alltraps
+c0102b7d:	e9 71 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b82 <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+c0102b82:	6a 00                	push   $0x0
+  pushl $87
+c0102b84:	6a 57                	push   $0x57
+  jmp __alltraps
+c0102b86:	e9 68 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b8b <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+c0102b8b:	6a 00                	push   $0x0
+  pushl $88
+c0102b8d:	6a 58                	push   $0x58
+  jmp __alltraps
+c0102b8f:	e9 5f 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b94 <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+c0102b94:	6a 00                	push   $0x0
+  pushl $89
+c0102b96:	6a 59                	push   $0x59
+  jmp __alltraps
+c0102b98:	e9 56 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102b9d <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+c0102b9d:	6a 00                	push   $0x0
+  pushl $90
+c0102b9f:	6a 5a                	push   $0x5a
+  jmp __alltraps
+c0102ba1:	e9 4d 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ba6 <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+c0102ba6:	6a 00                	push   $0x0
+  pushl $91
+c0102ba8:	6a 5b                	push   $0x5b
+  jmp __alltraps
+c0102baa:	e9 44 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102baf <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+c0102baf:	6a 00                	push   $0x0
+  pushl $92
+c0102bb1:	6a 5c                	push   $0x5c
+  jmp __alltraps
+c0102bb3:	e9 3b 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102bb8 <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+c0102bb8:	6a 00                	push   $0x0
+  pushl $93
+c0102bba:	6a 5d                	push   $0x5d
+  jmp __alltraps
+c0102bbc:	e9 32 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102bc1 <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+c0102bc1:	6a 00                	push   $0x0
+  pushl $94
+c0102bc3:	6a 5e                	push   $0x5e
+  jmp __alltraps
+c0102bc5:	e9 29 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102bca <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+c0102bca:	6a 00                	push   $0x0
+  pushl $95
+c0102bcc:	6a 5f                	push   $0x5f
+  jmp __alltraps
+c0102bce:	e9 20 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102bd3 <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+c0102bd3:	6a 00                	push   $0x0
+  pushl $96
+c0102bd5:	6a 60                	push   $0x60
+  jmp __alltraps
+c0102bd7:	e9 17 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102bdc <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+c0102bdc:	6a 00                	push   $0x0
+  pushl $97
+c0102bde:	6a 61                	push   $0x61
+  jmp __alltraps
+c0102be0:	e9 0e 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102be5 <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+c0102be5:	6a 00                	push   $0x0
+  pushl $98
+c0102be7:	6a 62                	push   $0x62
+  jmp __alltraps
+c0102be9:	e9 05 07 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102bee <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+c0102bee:	6a 00                	push   $0x0
+  pushl $99
+c0102bf0:	6a 63                	push   $0x63
+  jmp __alltraps
+c0102bf2:	e9 fc 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102bf7 <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+c0102bf7:	6a 00                	push   $0x0
+  pushl $100
+c0102bf9:	6a 64                	push   $0x64
+  jmp __alltraps
+c0102bfb:	e9 f3 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c00 <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+c0102c00:	6a 00                	push   $0x0
+  pushl $101
+c0102c02:	6a 65                	push   $0x65
+  jmp __alltraps
+c0102c04:	e9 ea 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c09 <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+c0102c09:	6a 00                	push   $0x0
+  pushl $102
+c0102c0b:	6a 66                	push   $0x66
+  jmp __alltraps
+c0102c0d:	e9 e1 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c12 <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+c0102c12:	6a 00                	push   $0x0
+  pushl $103
+c0102c14:	6a 67                	push   $0x67
+  jmp __alltraps
+c0102c16:	e9 d8 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c1b <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+c0102c1b:	6a 00                	push   $0x0
+  pushl $104
+c0102c1d:	6a 68                	push   $0x68
+  jmp __alltraps
+c0102c1f:	e9 cf 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c24 <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+c0102c24:	6a 00                	push   $0x0
+  pushl $105
+c0102c26:	6a 69                	push   $0x69
+  jmp __alltraps
+c0102c28:	e9 c6 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c2d <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+c0102c2d:	6a 00                	push   $0x0
+  pushl $106
+c0102c2f:	6a 6a                	push   $0x6a
+  jmp __alltraps
+c0102c31:	e9 bd 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c36 <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+c0102c36:	6a 00                	push   $0x0
+  pushl $107
+c0102c38:	6a 6b                	push   $0x6b
+  jmp __alltraps
+c0102c3a:	e9 b4 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c3f <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+c0102c3f:	6a 00                	push   $0x0
+  pushl $108
+c0102c41:	6a 6c                	push   $0x6c
+  jmp __alltraps
+c0102c43:	e9 ab 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c48 <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+c0102c48:	6a 00                	push   $0x0
+  pushl $109
+c0102c4a:	6a 6d                	push   $0x6d
+  jmp __alltraps
+c0102c4c:	e9 a2 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c51 <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+c0102c51:	6a 00                	push   $0x0
+  pushl $110
+c0102c53:	6a 6e                	push   $0x6e
+  jmp __alltraps
+c0102c55:	e9 99 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c5a <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+c0102c5a:	6a 00                	push   $0x0
+  pushl $111
+c0102c5c:	6a 6f                	push   $0x6f
+  jmp __alltraps
+c0102c5e:	e9 90 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c63 <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+c0102c63:	6a 00                	push   $0x0
+  pushl $112
+c0102c65:	6a 70                	push   $0x70
+  jmp __alltraps
+c0102c67:	e9 87 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c6c <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+c0102c6c:	6a 00                	push   $0x0
+  pushl $113
+c0102c6e:	6a 71                	push   $0x71
+  jmp __alltraps
+c0102c70:	e9 7e 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c75 <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+c0102c75:	6a 00                	push   $0x0
+  pushl $114
+c0102c77:	6a 72                	push   $0x72
+  jmp __alltraps
+c0102c79:	e9 75 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c7e <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+c0102c7e:	6a 00                	push   $0x0
+  pushl $115
+c0102c80:	6a 73                	push   $0x73
+  jmp __alltraps
+c0102c82:	e9 6c 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c87 <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+c0102c87:	6a 00                	push   $0x0
+  pushl $116
+c0102c89:	6a 74                	push   $0x74
+  jmp __alltraps
+c0102c8b:	e9 63 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c90 <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+c0102c90:	6a 00                	push   $0x0
+  pushl $117
+c0102c92:	6a 75                	push   $0x75
+  jmp __alltraps
+c0102c94:	e9 5a 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102c99 <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+c0102c99:	6a 00                	push   $0x0
+  pushl $118
+c0102c9b:	6a 76                	push   $0x76
+  jmp __alltraps
+c0102c9d:	e9 51 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ca2 <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+c0102ca2:	6a 00                	push   $0x0
+  pushl $119
+c0102ca4:	6a 77                	push   $0x77
+  jmp __alltraps
+c0102ca6:	e9 48 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102cab <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+c0102cab:	6a 00                	push   $0x0
+  pushl $120
+c0102cad:	6a 78                	push   $0x78
+  jmp __alltraps
+c0102caf:	e9 3f 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102cb4 <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+c0102cb4:	6a 00                	push   $0x0
+  pushl $121
+c0102cb6:	6a 79                	push   $0x79
+  jmp __alltraps
+c0102cb8:	e9 36 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102cbd <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+c0102cbd:	6a 00                	push   $0x0
+  pushl $122
+c0102cbf:	6a 7a                	push   $0x7a
+  jmp __alltraps
+c0102cc1:	e9 2d 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102cc6 <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+c0102cc6:	6a 00                	push   $0x0
+  pushl $123
+c0102cc8:	6a 7b                	push   $0x7b
+  jmp __alltraps
+c0102cca:	e9 24 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ccf <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+c0102ccf:	6a 00                	push   $0x0
+  pushl $124
+c0102cd1:	6a 7c                	push   $0x7c
+  jmp __alltraps
+c0102cd3:	e9 1b 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102cd8 <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+c0102cd8:	6a 00                	push   $0x0
+  pushl $125
+c0102cda:	6a 7d                	push   $0x7d
+  jmp __alltraps
+c0102cdc:	e9 12 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ce1 <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+c0102ce1:	6a 00                	push   $0x0
+  pushl $126
+c0102ce3:	6a 7e                	push   $0x7e
+  jmp __alltraps
+c0102ce5:	e9 09 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102cea <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+c0102cea:	6a 00                	push   $0x0
+  pushl $127
+c0102cec:	6a 7f                	push   $0x7f
+  jmp __alltraps
+c0102cee:	e9 00 06 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102cf3 <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+c0102cf3:	6a 00                	push   $0x0
+  pushl $128
+c0102cf5:	68 80 00 00 00       	push   $0x80
+  jmp __alltraps
+c0102cfa:	e9 f4 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102cff <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+c0102cff:	6a 00                	push   $0x0
+  pushl $129
+c0102d01:	68 81 00 00 00       	push   $0x81
+  jmp __alltraps
+c0102d06:	e9 e8 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d0b <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+c0102d0b:	6a 00                	push   $0x0
+  pushl $130
+c0102d0d:	68 82 00 00 00       	push   $0x82
+  jmp __alltraps
+c0102d12:	e9 dc 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d17 <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+c0102d17:	6a 00                	push   $0x0
+  pushl $131
+c0102d19:	68 83 00 00 00       	push   $0x83
+  jmp __alltraps
+c0102d1e:	e9 d0 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d23 <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+c0102d23:	6a 00                	push   $0x0
+  pushl $132
+c0102d25:	68 84 00 00 00       	push   $0x84
+  jmp __alltraps
+c0102d2a:	e9 c4 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d2f <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+c0102d2f:	6a 00                	push   $0x0
+  pushl $133
+c0102d31:	68 85 00 00 00       	push   $0x85
+  jmp __alltraps
+c0102d36:	e9 b8 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d3b <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+c0102d3b:	6a 00                	push   $0x0
+  pushl $134
+c0102d3d:	68 86 00 00 00       	push   $0x86
+  jmp __alltraps
+c0102d42:	e9 ac 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d47 <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+c0102d47:	6a 00                	push   $0x0
+  pushl $135
+c0102d49:	68 87 00 00 00       	push   $0x87
+  jmp __alltraps
+c0102d4e:	e9 a0 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d53 <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+c0102d53:	6a 00                	push   $0x0
+  pushl $136
+c0102d55:	68 88 00 00 00       	push   $0x88
+  jmp __alltraps
+c0102d5a:	e9 94 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d5f <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+c0102d5f:	6a 00                	push   $0x0
+  pushl $137
+c0102d61:	68 89 00 00 00       	push   $0x89
+  jmp __alltraps
+c0102d66:	e9 88 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d6b <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+c0102d6b:	6a 00                	push   $0x0
+  pushl $138
+c0102d6d:	68 8a 00 00 00       	push   $0x8a
+  jmp __alltraps
+c0102d72:	e9 7c 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d77 <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+c0102d77:	6a 00                	push   $0x0
+  pushl $139
+c0102d79:	68 8b 00 00 00       	push   $0x8b
+  jmp __alltraps
+c0102d7e:	e9 70 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d83 <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+c0102d83:	6a 00                	push   $0x0
+  pushl $140
+c0102d85:	68 8c 00 00 00       	push   $0x8c
+  jmp __alltraps
+c0102d8a:	e9 64 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d8f <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+c0102d8f:	6a 00                	push   $0x0
+  pushl $141
+c0102d91:	68 8d 00 00 00       	push   $0x8d
+  jmp __alltraps
+c0102d96:	e9 58 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102d9b <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+c0102d9b:	6a 00                	push   $0x0
+  pushl $142
+c0102d9d:	68 8e 00 00 00       	push   $0x8e
+  jmp __alltraps
+c0102da2:	e9 4c 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102da7 <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+c0102da7:	6a 00                	push   $0x0
+  pushl $143
+c0102da9:	68 8f 00 00 00       	push   $0x8f
+  jmp __alltraps
+c0102dae:	e9 40 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102db3 <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+c0102db3:	6a 00                	push   $0x0
+  pushl $144
+c0102db5:	68 90 00 00 00       	push   $0x90
+  jmp __alltraps
+c0102dba:	e9 34 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102dbf <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+c0102dbf:	6a 00                	push   $0x0
+  pushl $145
+c0102dc1:	68 91 00 00 00       	push   $0x91
+  jmp __alltraps
+c0102dc6:	e9 28 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102dcb <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+c0102dcb:	6a 00                	push   $0x0
+  pushl $146
+c0102dcd:	68 92 00 00 00       	push   $0x92
+  jmp __alltraps
+c0102dd2:	e9 1c 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102dd7 <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+c0102dd7:	6a 00                	push   $0x0
+  pushl $147
+c0102dd9:	68 93 00 00 00       	push   $0x93
+  jmp __alltraps
+c0102dde:	e9 10 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102de3 <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+c0102de3:	6a 00                	push   $0x0
+  pushl $148
+c0102de5:	68 94 00 00 00       	push   $0x94
+  jmp __alltraps
+c0102dea:	e9 04 05 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102def <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+c0102def:	6a 00                	push   $0x0
+  pushl $149
+c0102df1:	68 95 00 00 00       	push   $0x95
+  jmp __alltraps
+c0102df6:	e9 f8 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102dfb <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+c0102dfb:	6a 00                	push   $0x0
+  pushl $150
+c0102dfd:	68 96 00 00 00       	push   $0x96
+  jmp __alltraps
+c0102e02:	e9 ec 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e07 <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+c0102e07:	6a 00                	push   $0x0
+  pushl $151
+c0102e09:	68 97 00 00 00       	push   $0x97
+  jmp __alltraps
+c0102e0e:	e9 e0 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e13 <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+c0102e13:	6a 00                	push   $0x0
+  pushl $152
+c0102e15:	68 98 00 00 00       	push   $0x98
+  jmp __alltraps
+c0102e1a:	e9 d4 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e1f <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+c0102e1f:	6a 00                	push   $0x0
+  pushl $153
+c0102e21:	68 99 00 00 00       	push   $0x99
+  jmp __alltraps
+c0102e26:	e9 c8 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e2b <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+c0102e2b:	6a 00                	push   $0x0
+  pushl $154
+c0102e2d:	68 9a 00 00 00       	push   $0x9a
+  jmp __alltraps
+c0102e32:	e9 bc 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e37 <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+c0102e37:	6a 00                	push   $0x0
+  pushl $155
+c0102e39:	68 9b 00 00 00       	push   $0x9b
+  jmp __alltraps
+c0102e3e:	e9 b0 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e43 <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+c0102e43:	6a 00                	push   $0x0
+  pushl $156
+c0102e45:	68 9c 00 00 00       	push   $0x9c
+  jmp __alltraps
+c0102e4a:	e9 a4 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e4f <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+c0102e4f:	6a 00                	push   $0x0
+  pushl $157
+c0102e51:	68 9d 00 00 00       	push   $0x9d
+  jmp __alltraps
+c0102e56:	e9 98 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e5b <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+c0102e5b:	6a 00                	push   $0x0
+  pushl $158
+c0102e5d:	68 9e 00 00 00       	push   $0x9e
+  jmp __alltraps
+c0102e62:	e9 8c 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e67 <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+c0102e67:	6a 00                	push   $0x0
+  pushl $159
+c0102e69:	68 9f 00 00 00       	push   $0x9f
+  jmp __alltraps
+c0102e6e:	e9 80 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e73 <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+c0102e73:	6a 00                	push   $0x0
+  pushl $160
+c0102e75:	68 a0 00 00 00       	push   $0xa0
+  jmp __alltraps
+c0102e7a:	e9 74 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e7f <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+c0102e7f:	6a 00                	push   $0x0
+  pushl $161
+c0102e81:	68 a1 00 00 00       	push   $0xa1
+  jmp __alltraps
+c0102e86:	e9 68 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e8b <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+c0102e8b:	6a 00                	push   $0x0
+  pushl $162
+c0102e8d:	68 a2 00 00 00       	push   $0xa2
+  jmp __alltraps
+c0102e92:	e9 5c 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102e97 <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+c0102e97:	6a 00                	push   $0x0
+  pushl $163
+c0102e99:	68 a3 00 00 00       	push   $0xa3
+  jmp __alltraps
+c0102e9e:	e9 50 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ea3 <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+c0102ea3:	6a 00                	push   $0x0
+  pushl $164
+c0102ea5:	68 a4 00 00 00       	push   $0xa4
+  jmp __alltraps
+c0102eaa:	e9 44 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102eaf <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+c0102eaf:	6a 00                	push   $0x0
+  pushl $165
+c0102eb1:	68 a5 00 00 00       	push   $0xa5
+  jmp __alltraps
+c0102eb6:	e9 38 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ebb <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+c0102ebb:	6a 00                	push   $0x0
+  pushl $166
+c0102ebd:	68 a6 00 00 00       	push   $0xa6
+  jmp __alltraps
+c0102ec2:	e9 2c 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ec7 <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+c0102ec7:	6a 00                	push   $0x0
+  pushl $167
+c0102ec9:	68 a7 00 00 00       	push   $0xa7
+  jmp __alltraps
+c0102ece:	e9 20 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ed3 <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+c0102ed3:	6a 00                	push   $0x0
+  pushl $168
+c0102ed5:	68 a8 00 00 00       	push   $0xa8
+  jmp __alltraps
+c0102eda:	e9 14 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102edf <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+c0102edf:	6a 00                	push   $0x0
+  pushl $169
+c0102ee1:	68 a9 00 00 00       	push   $0xa9
+  jmp __alltraps
+c0102ee6:	e9 08 04 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102eeb <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+c0102eeb:	6a 00                	push   $0x0
+  pushl $170
+c0102eed:	68 aa 00 00 00       	push   $0xaa
+  jmp __alltraps
+c0102ef2:	e9 fc 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ef7 <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+c0102ef7:	6a 00                	push   $0x0
+  pushl $171
+c0102ef9:	68 ab 00 00 00       	push   $0xab
+  jmp __alltraps
+c0102efe:	e9 f0 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f03 <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+c0102f03:	6a 00                	push   $0x0
+  pushl $172
+c0102f05:	68 ac 00 00 00       	push   $0xac
+  jmp __alltraps
+c0102f0a:	e9 e4 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f0f <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+c0102f0f:	6a 00                	push   $0x0
+  pushl $173
+c0102f11:	68 ad 00 00 00       	push   $0xad
+  jmp __alltraps
+c0102f16:	e9 d8 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f1b <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+c0102f1b:	6a 00                	push   $0x0
+  pushl $174
+c0102f1d:	68 ae 00 00 00       	push   $0xae
+  jmp __alltraps
+c0102f22:	e9 cc 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f27 <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+c0102f27:	6a 00                	push   $0x0
+  pushl $175
+c0102f29:	68 af 00 00 00       	push   $0xaf
+  jmp __alltraps
+c0102f2e:	e9 c0 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f33 <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+c0102f33:	6a 00                	push   $0x0
+  pushl $176
+c0102f35:	68 b0 00 00 00       	push   $0xb0
+  jmp __alltraps
+c0102f3a:	e9 b4 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f3f <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+c0102f3f:	6a 00                	push   $0x0
+  pushl $177
+c0102f41:	68 b1 00 00 00       	push   $0xb1
+  jmp __alltraps
+c0102f46:	e9 a8 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f4b <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+c0102f4b:	6a 00                	push   $0x0
+  pushl $178
+c0102f4d:	68 b2 00 00 00       	push   $0xb2
+  jmp __alltraps
+c0102f52:	e9 9c 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f57 <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+c0102f57:	6a 00                	push   $0x0
+  pushl $179
+c0102f59:	68 b3 00 00 00       	push   $0xb3
+  jmp __alltraps
+c0102f5e:	e9 90 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f63 <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+c0102f63:	6a 00                	push   $0x0
+  pushl $180
+c0102f65:	68 b4 00 00 00       	push   $0xb4
+  jmp __alltraps
+c0102f6a:	e9 84 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f6f <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+c0102f6f:	6a 00                	push   $0x0
+  pushl $181
+c0102f71:	68 b5 00 00 00       	push   $0xb5
+  jmp __alltraps
+c0102f76:	e9 78 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f7b <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+c0102f7b:	6a 00                	push   $0x0
+  pushl $182
+c0102f7d:	68 b6 00 00 00       	push   $0xb6
+  jmp __alltraps
+c0102f82:	e9 6c 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f87 <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+c0102f87:	6a 00                	push   $0x0
+  pushl $183
+c0102f89:	68 b7 00 00 00       	push   $0xb7
+  jmp __alltraps
+c0102f8e:	e9 60 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f93 <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+c0102f93:	6a 00                	push   $0x0
+  pushl $184
+c0102f95:	68 b8 00 00 00       	push   $0xb8
+  jmp __alltraps
+c0102f9a:	e9 54 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102f9f <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+c0102f9f:	6a 00                	push   $0x0
+  pushl $185
+c0102fa1:	68 b9 00 00 00       	push   $0xb9
+  jmp __alltraps
+c0102fa6:	e9 48 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102fab <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+c0102fab:	6a 00                	push   $0x0
+  pushl $186
+c0102fad:	68 ba 00 00 00       	push   $0xba
+  jmp __alltraps
+c0102fb2:	e9 3c 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102fb7 <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+c0102fb7:	6a 00                	push   $0x0
+  pushl $187
+c0102fb9:	68 bb 00 00 00       	push   $0xbb
+  jmp __alltraps
+c0102fbe:	e9 30 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102fc3 <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+c0102fc3:	6a 00                	push   $0x0
+  pushl $188
+c0102fc5:	68 bc 00 00 00       	push   $0xbc
+  jmp __alltraps
+c0102fca:	e9 24 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102fcf <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+c0102fcf:	6a 00                	push   $0x0
+  pushl $189
+c0102fd1:	68 bd 00 00 00       	push   $0xbd
+  jmp __alltraps
+c0102fd6:	e9 18 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102fdb <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+c0102fdb:	6a 00                	push   $0x0
+  pushl $190
+c0102fdd:	68 be 00 00 00       	push   $0xbe
+  jmp __alltraps
+c0102fe2:	e9 0c 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102fe7 <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+c0102fe7:	6a 00                	push   $0x0
+  pushl $191
+c0102fe9:	68 bf 00 00 00       	push   $0xbf
+  jmp __alltraps
+c0102fee:	e9 00 03 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102ff3 <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+c0102ff3:	6a 00                	push   $0x0
+  pushl $192
+c0102ff5:	68 c0 00 00 00       	push   $0xc0
+  jmp __alltraps
+c0102ffa:	e9 f4 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c0102fff <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+c0102fff:	6a 00                	push   $0x0
+  pushl $193
+c0103001:	68 c1 00 00 00       	push   $0xc1
+  jmp __alltraps
+c0103006:	e9 e8 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c010300b <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+c010300b:	6a 00                	push   $0x0
+  pushl $194
+c010300d:	68 c2 00 00 00       	push   $0xc2
+  jmp __alltraps
+c0103012:	e9 dc 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103017 <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+c0103017:	6a 00                	push   $0x0
+  pushl $195
+c0103019:	68 c3 00 00 00       	push   $0xc3
+  jmp __alltraps
+c010301e:	e9 d0 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103023 <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+c0103023:	6a 00                	push   $0x0
+  pushl $196
+c0103025:	68 c4 00 00 00       	push   $0xc4
+  jmp __alltraps
+c010302a:	e9 c4 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c010302f <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+c010302f:	6a 00                	push   $0x0
+  pushl $197
+c0103031:	68 c5 00 00 00       	push   $0xc5
+  jmp __alltraps
+c0103036:	e9 b8 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c010303b <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+c010303b:	6a 00                	push   $0x0
+  pushl $198
+c010303d:	68 c6 00 00 00       	push   $0xc6
+  jmp __alltraps
+c0103042:	e9 ac 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103047 <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+c0103047:	6a 00                	push   $0x0
+  pushl $199
+c0103049:	68 c7 00 00 00       	push   $0xc7
+  jmp __alltraps
+c010304e:	e9 a0 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103053 <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+c0103053:	6a 00                	push   $0x0
+  pushl $200
+c0103055:	68 c8 00 00 00       	push   $0xc8
+  jmp __alltraps
+c010305a:	e9 94 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c010305f <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+c010305f:	6a 00                	push   $0x0
+  pushl $201
+c0103061:	68 c9 00 00 00       	push   $0xc9
+  jmp __alltraps
+c0103066:	e9 88 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c010306b <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+c010306b:	6a 00                	push   $0x0
+  pushl $202
+c010306d:	68 ca 00 00 00       	push   $0xca
+  jmp __alltraps
+c0103072:	e9 7c 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103077 <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+c0103077:	6a 00                	push   $0x0
+  pushl $203
+c0103079:	68 cb 00 00 00       	push   $0xcb
+  jmp __alltraps
+c010307e:	e9 70 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103083 <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+c0103083:	6a 00                	push   $0x0
+  pushl $204
+c0103085:	68 cc 00 00 00       	push   $0xcc
+  jmp __alltraps
+c010308a:	e9 64 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c010308f <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+c010308f:	6a 00                	push   $0x0
+  pushl $205
+c0103091:	68 cd 00 00 00       	push   $0xcd
+  jmp __alltraps
+c0103096:	e9 58 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c010309b <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+c010309b:	6a 00                	push   $0x0
+  pushl $206
+c010309d:	68 ce 00 00 00       	push   $0xce
+  jmp __alltraps
+c01030a2:	e9 4c 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c01030a7 <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+c01030a7:	6a 00                	push   $0x0
+  pushl $207
+c01030a9:	68 cf 00 00 00       	push   $0xcf
+  jmp __alltraps
+c01030ae:	e9 40 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c01030b3 <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+c01030b3:	6a 00                	push   $0x0
+  pushl $208
+c01030b5:	68 d0 00 00 00       	push   $0xd0
+  jmp __alltraps
+c01030ba:	e9 34 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c01030bf <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+c01030bf:	6a 00                	push   $0x0
+  pushl $209
+c01030c1:	68 d1 00 00 00       	push   $0xd1
+  jmp __alltraps
+c01030c6:	e9 28 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c01030cb <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+c01030cb:	6a 00                	push   $0x0
+  pushl $210
+c01030cd:	68 d2 00 00 00       	push   $0xd2
+  jmp __alltraps
+c01030d2:	e9 1c 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c01030d7 <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+c01030d7:	6a 00                	push   $0x0
+  pushl $211
+c01030d9:	68 d3 00 00 00       	push   $0xd3
+  jmp __alltraps
+c01030de:	e9 10 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c01030e3 <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+c01030e3:	6a 00                	push   $0x0
+  pushl $212
+c01030e5:	68 d4 00 00 00       	push   $0xd4
+  jmp __alltraps
+c01030ea:	e9 04 02 00 00       	jmp    c01032f3 <__alltraps>
+
+c01030ef <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+c01030ef:	6a 00                	push   $0x0
+  pushl $213
+c01030f1:	68 d5 00 00 00       	push   $0xd5
+  jmp __alltraps
+c01030f6:	e9 f8 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c01030fb <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+c01030fb:	6a 00                	push   $0x0
+  pushl $214
+c01030fd:	68 d6 00 00 00       	push   $0xd6
+  jmp __alltraps
+c0103102:	e9 ec 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103107 <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+c0103107:	6a 00                	push   $0x0
+  pushl $215
+c0103109:	68 d7 00 00 00       	push   $0xd7
+  jmp __alltraps
+c010310e:	e9 e0 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103113 <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+c0103113:	6a 00                	push   $0x0
+  pushl $216
+c0103115:	68 d8 00 00 00       	push   $0xd8
+  jmp __alltraps
+c010311a:	e9 d4 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c010311f <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+c010311f:	6a 00                	push   $0x0
+  pushl $217
+c0103121:	68 d9 00 00 00       	push   $0xd9
+  jmp __alltraps
+c0103126:	e9 c8 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c010312b <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+c010312b:	6a 00                	push   $0x0
+  pushl $218
+c010312d:	68 da 00 00 00       	push   $0xda
+  jmp __alltraps
+c0103132:	e9 bc 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103137 <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+c0103137:	6a 00                	push   $0x0
+  pushl $219
+c0103139:	68 db 00 00 00       	push   $0xdb
+  jmp __alltraps
+c010313e:	e9 b0 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103143 <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+c0103143:	6a 00                	push   $0x0
+  pushl $220
+c0103145:	68 dc 00 00 00       	push   $0xdc
+  jmp __alltraps
+c010314a:	e9 a4 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c010314f <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+c010314f:	6a 00                	push   $0x0
+  pushl $221
+c0103151:	68 dd 00 00 00       	push   $0xdd
+  jmp __alltraps
+c0103156:	e9 98 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c010315b <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+c010315b:	6a 00                	push   $0x0
+  pushl $222
+c010315d:	68 de 00 00 00       	push   $0xde
+  jmp __alltraps
+c0103162:	e9 8c 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103167 <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+c0103167:	6a 00                	push   $0x0
+  pushl $223
+c0103169:	68 df 00 00 00       	push   $0xdf
+  jmp __alltraps
+c010316e:	e9 80 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103173 <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+c0103173:	6a 00                	push   $0x0
+  pushl $224
+c0103175:	68 e0 00 00 00       	push   $0xe0
+  jmp __alltraps
+c010317a:	e9 74 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c010317f <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+c010317f:	6a 00                	push   $0x0
+  pushl $225
+c0103181:	68 e1 00 00 00       	push   $0xe1
+  jmp __alltraps
+c0103186:	e9 68 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c010318b <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+c010318b:	6a 00                	push   $0x0
+  pushl $226
+c010318d:	68 e2 00 00 00       	push   $0xe2
+  jmp __alltraps
+c0103192:	e9 5c 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103197 <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+c0103197:	6a 00                	push   $0x0
+  pushl $227
+c0103199:	68 e3 00 00 00       	push   $0xe3
+  jmp __alltraps
+c010319e:	e9 50 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c01031a3 <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+c01031a3:	6a 00                	push   $0x0
+  pushl $228
+c01031a5:	68 e4 00 00 00       	push   $0xe4
+  jmp __alltraps
+c01031aa:	e9 44 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c01031af <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+c01031af:	6a 00                	push   $0x0
+  pushl $229
+c01031b1:	68 e5 00 00 00       	push   $0xe5
+  jmp __alltraps
+c01031b6:	e9 38 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c01031bb <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+c01031bb:	6a 00                	push   $0x0
+  pushl $230
+c01031bd:	68 e6 00 00 00       	push   $0xe6
+  jmp __alltraps
+c01031c2:	e9 2c 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c01031c7 <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+c01031c7:	6a 00                	push   $0x0
+  pushl $231
+c01031c9:	68 e7 00 00 00       	push   $0xe7
+  jmp __alltraps
+c01031ce:	e9 20 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c01031d3 <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+c01031d3:	6a 00                	push   $0x0
+  pushl $232
+c01031d5:	68 e8 00 00 00       	push   $0xe8
+  jmp __alltraps
+c01031da:	e9 14 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c01031df <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+c01031df:	6a 00                	push   $0x0
+  pushl $233
+c01031e1:	68 e9 00 00 00       	push   $0xe9
+  jmp __alltraps
+c01031e6:	e9 08 01 00 00       	jmp    c01032f3 <__alltraps>
+
+c01031eb <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+c01031eb:	6a 00                	push   $0x0
+  pushl $234
+c01031ed:	68 ea 00 00 00       	push   $0xea
+  jmp __alltraps
+c01031f2:	e9 fc 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c01031f7 <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+c01031f7:	6a 00                	push   $0x0
+  pushl $235
+c01031f9:	68 eb 00 00 00       	push   $0xeb
+  jmp __alltraps
+c01031fe:	e9 f0 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103203 <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+c0103203:	6a 00                	push   $0x0
+  pushl $236
+c0103205:	68 ec 00 00 00       	push   $0xec
+  jmp __alltraps
+c010320a:	e9 e4 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c010320f <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+c010320f:	6a 00                	push   $0x0
+  pushl $237
+c0103211:	68 ed 00 00 00       	push   $0xed
+  jmp __alltraps
+c0103216:	e9 d8 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c010321b <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+c010321b:	6a 00                	push   $0x0
+  pushl $238
+c010321d:	68 ee 00 00 00       	push   $0xee
+  jmp __alltraps
+c0103222:	e9 cc 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103227 <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+c0103227:	6a 00                	push   $0x0
+  pushl $239
+c0103229:	68 ef 00 00 00       	push   $0xef
+  jmp __alltraps
+c010322e:	e9 c0 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103233 <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+c0103233:	6a 00                	push   $0x0
+  pushl $240
+c0103235:	68 f0 00 00 00       	push   $0xf0
+  jmp __alltraps
+c010323a:	e9 b4 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c010323f <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+c010323f:	6a 00                	push   $0x0
+  pushl $241
+c0103241:	68 f1 00 00 00       	push   $0xf1
+  jmp __alltraps
+c0103246:	e9 a8 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c010324b <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+c010324b:	6a 00                	push   $0x0
+  pushl $242
+c010324d:	68 f2 00 00 00       	push   $0xf2
+  jmp __alltraps
+c0103252:	e9 9c 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103257 <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+c0103257:	6a 00                	push   $0x0
+  pushl $243
+c0103259:	68 f3 00 00 00       	push   $0xf3
+  jmp __alltraps
+c010325e:	e9 90 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103263 <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+c0103263:	6a 00                	push   $0x0
+  pushl $244
+c0103265:	68 f4 00 00 00       	push   $0xf4
+  jmp __alltraps
+c010326a:	e9 84 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c010326f <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+c010326f:	6a 00                	push   $0x0
+  pushl $245
+c0103271:	68 f5 00 00 00       	push   $0xf5
+  jmp __alltraps
+c0103276:	e9 78 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c010327b <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+c010327b:	6a 00                	push   $0x0
+  pushl $246
+c010327d:	68 f6 00 00 00       	push   $0xf6
+  jmp __alltraps
+c0103282:	e9 6c 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103287 <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+c0103287:	6a 00                	push   $0x0
+  pushl $247
+c0103289:	68 f7 00 00 00       	push   $0xf7
+  jmp __alltraps
+c010328e:	e9 60 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c0103293 <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+c0103293:	6a 00                	push   $0x0
+  pushl $248
+c0103295:	68 f8 00 00 00       	push   $0xf8
+  jmp __alltraps
+c010329a:	e9 54 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c010329f <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+c010329f:	6a 00                	push   $0x0
+  pushl $249
+c01032a1:	68 f9 00 00 00       	push   $0xf9
+  jmp __alltraps
+c01032a6:	e9 48 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c01032ab <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+c01032ab:	6a 00                	push   $0x0
+  pushl $250
+c01032ad:	68 fa 00 00 00       	push   $0xfa
+  jmp __alltraps
+c01032b2:	e9 3c 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c01032b7 <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+c01032b7:	6a 00                	push   $0x0
+  pushl $251
+c01032b9:	68 fb 00 00 00       	push   $0xfb
+  jmp __alltraps
+c01032be:	e9 30 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c01032c3 <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+c01032c3:	6a 00                	push   $0x0
+  pushl $252
+c01032c5:	68 fc 00 00 00       	push   $0xfc
+  jmp __alltraps
+c01032ca:	e9 24 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c01032cf <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+c01032cf:	6a 00                	push   $0x0
+  pushl $253
+c01032d1:	68 fd 00 00 00       	push   $0xfd
+  jmp __alltraps
+c01032d6:	e9 18 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c01032db <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+c01032db:	6a 00                	push   $0x0
+  pushl $254
+c01032dd:	68 fe 00 00 00       	push   $0xfe
+  jmp __alltraps
+c01032e2:	e9 0c 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c01032e7 <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+c01032e7:	6a 00                	push   $0x0
+  pushl $255
+c01032e9:	68 ff 00 00 00       	push   $0xff
+  jmp __alltraps
+c01032ee:	e9 00 00 00 00       	jmp    c01032f3 <__alltraps>
+
+c01032f3 <__alltraps>:
+.text
+.globl __alltraps
+__alltraps:
+    # push registers to build a trap frame
+    # therefore make the stack look like a struct trapframe
+    pushl %ds
+c01032f3:	1e                   	push   %ds
+    pushl %es
+c01032f4:	06                   	push   %es
+    pushl %fs
+c01032f5:	0f a0                	push   %fs
+    pushl %gs
+c01032f7:	0f a8                	push   %gs
+    pushal
+c01032f9:	60                   	pusha  
+
+    # load GD_KDATA into %ds and %es to set up data segments for kernel
+    movl $GD_KDATA, %eax
+c01032fa:	b8 10 00 00 00       	mov    $0x10,%eax
+    movw %ax, %ds
+c01032ff:	8e d8                	mov    %eax,%ds
+    movw %ax, %es
+c0103301:	8e c0                	mov    %eax,%es
+
+    # push %esp to pass a pointer to the trapframe as an argument to trap()
+    pushl %esp
+c0103303:	54                   	push   %esp
+
+    # call trap(tf), where tf=%esp
+    call trap
+c0103304:	e8 63 f5 ff ff       	call   c010286c <trap>
+
+    # pop the pushed stack pointer
+    popl %esp
+c0103309:	5c                   	pop    %esp
+
+c010330a <__trapret>:
+
+    # return falls through to trapret...
+.globl __trapret
+__trapret:
+    # restore registers from stack
+    popal
+c010330a:	61                   	popa   
+
+    # restore %ds, %es, %fs and %gs
+    popl %gs
+c010330b:	0f a9                	pop    %gs
+    popl %fs
+c010330d:	0f a1                	pop    %fs
+    popl %es
+c010330f:	07                   	pop    %es
+    popl %ds
+c0103310:	1f                   	pop    %ds
+
+    # get rid of the trap number and error code
+    addl $0x8, %esp
+c0103311:	83 c4 08             	add    $0x8,%esp
+    iret
+c0103314:	cf                   	iret   
+
+c0103315 <pa2page>:
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0103315:	55                   	push   %ebp
+c0103316:	89 e5                	mov    %esp,%ebp
+c0103318:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c010331b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010331e:	c1 e8 0c             	shr    $0xc,%eax
+c0103321:	89 c2                	mov    %eax,%edx
+c0103323:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c0103328:	39 c2                	cmp    %eax,%edx
+c010332a:	72 19                	jb     c0103345 <pa2page+0x30>
+        panic("pa2page called with invalid pa");
+c010332c:	e8 19 d7 ff ff       	call   c0100a4a <print_stackframe>
+c0103331:	83 ec 04             	sub    $0x4,%esp
+c0103334:	68 50 91 10 c0       	push   $0xc0109150
+c0103339:	6a 5b                	push   $0x5b
+c010333b:	68 6f 91 10 c0       	push   $0xc010916f
+c0103340:	e8 97 d0 ff ff       	call   c01003dc <__panic>
+    }
+    return &pages[PPN(pa)];
+c0103345:	a1 58 1b 12 c0       	mov    0xc0121b58,%eax
+c010334a:	8b 55 08             	mov    0x8(%ebp),%edx
+c010334d:	c1 ea 0c             	shr    $0xc,%edx
+c0103350:	c1 e2 05             	shl    $0x5,%edx
+c0103353:	01 d0                	add    %edx,%eax
+}
+c0103355:	c9                   	leave  
+c0103356:	c3                   	ret    
+
+c0103357 <pde2page>:
+    }
+    return pa2page(PTE_ADDR(pte));
+}
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0103357:	55                   	push   %ebp
+c0103358:	89 e5                	mov    %esp,%ebp
+c010335a:	83 ec 08             	sub    $0x8,%esp
+    return pa2page(PDE_ADDR(pde));
+c010335d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103360:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103365:	83 ec 0c             	sub    $0xc,%esp
+c0103368:	50                   	push   %eax
+c0103369:	e8 a7 ff ff ff       	call   c0103315 <pa2page>
+c010336e:	83 c4 10             	add    $0x10,%esp
+}
+c0103371:	c9                   	leave  
+c0103372:	c3                   	ret    
+
+c0103373 <mm_create>:
+static void check_vma_struct(void);
+static void check_pgfault(void);
+
+// mm_create -  alloc a mm_struct & initialize it.
+struct mm_struct *
+mm_create(void) {
+c0103373:	55                   	push   %ebp
+c0103374:	89 e5                	mov    %esp,%ebp
+c0103376:	83 ec 18             	sub    $0x18,%esp
+    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
+c0103379:	83 ec 0c             	sub    $0xc,%esp
+c010337c:	6a 18                	push   $0x18
+c010337e:	e8 d5 46 00 00       	call   c0107a58 <kmalloc>
+c0103383:	83 c4 10             	add    $0x10,%esp
+c0103386:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (mm != NULL) {
+c0103389:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010338d:	74 5b                	je     c01033ea <mm_create+0x77>
+        list_init(&(mm->mmap_list));
+c010338f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103392:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0103395:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103398:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010339b:	89 50 04             	mov    %edx,0x4(%eax)
+c010339e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01033a1:	8b 50 04             	mov    0x4(%eax),%edx
+c01033a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01033a7:	89 10                	mov    %edx,(%eax)
+        mm->mmap_cache = NULL;
+c01033a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01033ac:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+        mm->pgdir = NULL;
+c01033b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01033b6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        mm->map_count = 0;
+c01033bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01033c0:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+
+        if (swap_init_ok) swap_init_mm(mm);
+c01033c7:	a1 cc 19 12 c0       	mov    0xc01219cc,%eax
+c01033cc:	85 c0                	test   %eax,%eax
+c01033ce:	74 10                	je     c01033e0 <mm_create+0x6d>
+c01033d0:	83 ec 0c             	sub    $0xc,%esp
+c01033d3:	ff 75 f4             	pushl  -0xc(%ebp)
+c01033d6:	e8 84 11 00 00       	call   c010455f <swap_init_mm>
+c01033db:	83 c4 10             	add    $0x10,%esp
+c01033de:	eb 0a                	jmp    c01033ea <mm_create+0x77>
+        else mm->sm_priv = NULL;
+c01033e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01033e3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+    }
+    return mm;
+c01033ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01033ed:	c9                   	leave  
+c01033ee:	c3                   	ret    
+
+c01033ef <vma_create>:
+
+// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
+struct vma_struct *
+vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
+c01033ef:	55                   	push   %ebp
+c01033f0:	89 e5                	mov    %esp,%ebp
+c01033f2:	83 ec 18             	sub    $0x18,%esp
+    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
+c01033f5:	83 ec 0c             	sub    $0xc,%esp
+c01033f8:	6a 18                	push   $0x18
+c01033fa:	e8 59 46 00 00       	call   c0107a58 <kmalloc>
+c01033ff:	83 c4 10             	add    $0x10,%esp
+c0103402:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (vma != NULL) {
+c0103405:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103409:	74 1b                	je     c0103426 <vma_create+0x37>
+        vma->vm_start = vm_start;
+c010340b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010340e:	8b 55 08             	mov    0x8(%ebp),%edx
+c0103411:	89 50 04             	mov    %edx,0x4(%eax)
+        vma->vm_end = vm_end;
+c0103414:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103417:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010341a:	89 50 08             	mov    %edx,0x8(%eax)
+        vma->vm_flags = vm_flags;
+c010341d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103420:	8b 55 10             	mov    0x10(%ebp),%edx
+c0103423:	89 50 0c             	mov    %edx,0xc(%eax)
+    }
+    return vma;
+c0103426:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0103429:	c9                   	leave  
+c010342a:	c3                   	ret    
+
+c010342b <find_vma>:
+
+
+// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
+struct vma_struct *
+find_vma(struct mm_struct *mm, uintptr_t addr) {
+c010342b:	55                   	push   %ebp
+c010342c:	89 e5                	mov    %esp,%ebp
+c010342e:	83 ec 20             	sub    $0x20,%esp
+    struct vma_struct *vma = NULL;
+c0103431:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    if (mm != NULL) {
+c0103438:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010343c:	0f 84 95 00 00 00    	je     c01034d7 <find_vma+0xac>
+        vma = mm->mmap_cache;
+c0103442:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103445:	8b 40 08             	mov    0x8(%eax),%eax
+c0103448:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+c010344b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c010344f:	74 16                	je     c0103467 <find_vma+0x3c>
+c0103451:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0103454:	8b 40 04             	mov    0x4(%eax),%eax
+c0103457:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010345a:	77 0b                	ja     c0103467 <find_vma+0x3c>
+c010345c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010345f:	8b 40 08             	mov    0x8(%eax),%eax
+c0103462:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0103465:	77 61                	ja     c01034c8 <find_vma+0x9d>
+                bool found = 0;
+c0103467:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+c010346e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103474:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103477:	89 45 f4             	mov    %eax,-0xc(%ebp)
+                while ((le = list_next(le)) != list) {
+c010347a:	eb 28                	jmp    c01034a4 <find_vma+0x79>
+                    vma = le2vma(le, list_link);
+c010347c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010347f:	83 e8 10             	sub    $0x10,%eax
+c0103482:	89 45 fc             	mov    %eax,-0x4(%ebp)
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+c0103485:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0103488:	8b 40 04             	mov    0x4(%eax),%eax
+c010348b:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010348e:	77 14                	ja     c01034a4 <find_vma+0x79>
+c0103490:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0103493:	8b 40 08             	mov    0x8(%eax),%eax
+c0103496:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0103499:	76 09                	jbe    c01034a4 <find_vma+0x79>
+                        found = 1;
+c010349b:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
+                        break;
+c01034a2:	eb 17                	jmp    c01034bb <find_vma+0x90>
+c01034a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01034a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01034aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01034ad:	8b 40 04             	mov    0x4(%eax),%eax
+    if (mm != NULL) {
+        vma = mm->mmap_cache;
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+                bool found = 0;
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+                while ((le = list_next(le)) != list) {
+c01034b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01034b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01034b6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01034b9:	75 c1                	jne    c010347c <find_vma+0x51>
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+                        found = 1;
+                        break;
+                    }
+                }
+                if (!found) {
+c01034bb:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
+c01034bf:	75 07                	jne    c01034c8 <find_vma+0x9d>
+                    vma = NULL;
+c01034c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+                }
+        }
+        if (vma != NULL) {
+c01034c8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c01034cc:	74 09                	je     c01034d7 <find_vma+0xac>
+            mm->mmap_cache = vma;
+c01034ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c01034d1:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01034d4:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+    }
+    return vma;
+c01034d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c01034da:	c9                   	leave  
+c01034db:	c3                   	ret    
+
+c01034dc <check_vma_overlap>:
+
+
+// check_vma_overlap - check if vma1 overlaps vma2 ?
+static inline void
+check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
+c01034dc:	55                   	push   %ebp
+c01034dd:	89 e5                	mov    %esp,%ebp
+c01034df:	83 ec 08             	sub    $0x8,%esp
+    assert(prev->vm_start < prev->vm_end);
+c01034e2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01034e5:	8b 50 04             	mov    0x4(%eax),%edx
+c01034e8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01034eb:	8b 40 08             	mov    0x8(%eax),%eax
+c01034ee:	39 c2                	cmp    %eax,%edx
+c01034f0:	72 1b                	jb     c010350d <check_vma_overlap+0x31>
+c01034f2:	e8 53 d5 ff ff       	call   c0100a4a <print_stackframe>
+c01034f7:	68 7d 91 10 c0       	push   $0xc010917d
+c01034fc:	68 9b 91 10 c0       	push   $0xc010919b
+c0103501:	6a 67                	push   $0x67
+c0103503:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103508:	e8 cf ce ff ff       	call   c01003dc <__panic>
+    assert(prev->vm_end <= next->vm_start);
+c010350d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103510:	8b 50 08             	mov    0x8(%eax),%edx
+c0103513:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103516:	8b 40 04             	mov    0x4(%eax),%eax
+c0103519:	39 c2                	cmp    %eax,%edx
+c010351b:	76 1b                	jbe    c0103538 <check_vma_overlap+0x5c>
+c010351d:	e8 28 d5 ff ff       	call   c0100a4a <print_stackframe>
+c0103522:	68 c0 91 10 c0       	push   $0xc01091c0
+c0103527:	68 9b 91 10 c0       	push   $0xc010919b
+c010352c:	6a 68                	push   $0x68
+c010352e:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103533:	e8 a4 ce ff ff       	call   c01003dc <__panic>
+    assert(next->vm_start < next->vm_end);
+c0103538:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010353b:	8b 50 04             	mov    0x4(%eax),%edx
+c010353e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103541:	8b 40 08             	mov    0x8(%eax),%eax
+c0103544:	39 c2                	cmp    %eax,%edx
+c0103546:	72 1b                	jb     c0103563 <check_vma_overlap+0x87>
+c0103548:	e8 fd d4 ff ff       	call   c0100a4a <print_stackframe>
+c010354d:	68 df 91 10 c0       	push   $0xc01091df
+c0103552:	68 9b 91 10 c0       	push   $0xc010919b
+c0103557:	6a 69                	push   $0x69
+c0103559:	68 b0 91 10 c0       	push   $0xc01091b0
+c010355e:	e8 79 ce ff ff       	call   c01003dc <__panic>
+}
+c0103563:	90                   	nop
+c0103564:	c9                   	leave  
+c0103565:	c3                   	ret    
+
+c0103566 <insert_vma_struct>:
+
+
+// insert_vma_struct -insert vma in mm's list link
+void
+insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
+c0103566:	55                   	push   %ebp
+c0103567:	89 e5                	mov    %esp,%ebp
+c0103569:	83 ec 38             	sub    $0x38,%esp
+    assert(vma->vm_start < vma->vm_end);
+c010356c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010356f:	8b 50 04             	mov    0x4(%eax),%edx
+c0103572:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103575:	8b 40 08             	mov    0x8(%eax),%eax
+c0103578:	39 c2                	cmp    %eax,%edx
+c010357a:	72 1b                	jb     c0103597 <insert_vma_struct+0x31>
+c010357c:	e8 c9 d4 ff ff       	call   c0100a4a <print_stackframe>
+c0103581:	68 fd 91 10 c0       	push   $0xc01091fd
+c0103586:	68 9b 91 10 c0       	push   $0xc010919b
+c010358b:	6a 70                	push   $0x70
+c010358d:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103592:	e8 45 ce ff ff       	call   c01003dc <__panic>
+    list_entry_t *list = &(mm->mmap_list);
+c0103597:	8b 45 08             	mov    0x8(%ebp),%eax
+c010359a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    list_entry_t *le_prev = list, *le_next;
+c010359d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01035a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+        list_entry_t *le = list;
+c01035a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01035a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        while ((le = list_next(le)) != list) {
+c01035a9:	eb 1f                	jmp    c01035ca <insert_vma_struct+0x64>
+            struct vma_struct *mmap_prev = le2vma(le, list_link);
+c01035ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01035ae:	83 e8 10             	sub    $0x10,%eax
+c01035b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            if (mmap_prev->vm_start > vma->vm_start) {
+c01035b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01035b7:	8b 50 04             	mov    0x4(%eax),%edx
+c01035ba:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01035bd:	8b 40 04             	mov    0x4(%eax),%eax
+c01035c0:	39 c2                	cmp    %eax,%edx
+c01035c2:	77 1f                	ja     c01035e3 <insert_vma_struct+0x7d>
+                break;
+            }
+            le_prev = le;
+c01035c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01035c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01035ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01035cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c01035d0:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01035d3:	8b 40 04             	mov    0x4(%eax),%eax
+    assert(vma->vm_start < vma->vm_end);
+    list_entry_t *list = &(mm->mmap_list);
+    list_entry_t *le_prev = list, *le_next;
+
+        list_entry_t *le = list;
+        while ((le = list_next(le)) != list) {
+c01035d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01035d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01035dc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01035df:	75 ca                	jne    c01035ab <insert_vma_struct+0x45>
+c01035e1:	eb 01                	jmp    c01035e4 <insert_vma_struct+0x7e>
+            struct vma_struct *mmap_prev = le2vma(le, list_link);
+            if (mmap_prev->vm_start > vma->vm_start) {
+                break;
+c01035e3:	90                   	nop
+c01035e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01035e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c01035ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01035ed:	8b 40 04             	mov    0x4(%eax),%eax
+            }
+            le_prev = le;
+        }
+
+    le_next = list_next(le_prev);
+c01035f0:	89 45 dc             	mov    %eax,-0x24(%ebp)
+
+    /* check overlap */
+    if (le_prev != list) {
+c01035f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01035f6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01035f9:	74 15                	je     c0103610 <insert_vma_struct+0xaa>
+        check_vma_overlap(le2vma(le_prev, list_link), vma);
+c01035fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01035fe:	83 e8 10             	sub    $0x10,%eax
+c0103601:	83 ec 08             	sub    $0x8,%esp
+c0103604:	ff 75 0c             	pushl  0xc(%ebp)
+c0103607:	50                   	push   %eax
+c0103608:	e8 cf fe ff ff       	call   c01034dc <check_vma_overlap>
+c010360d:	83 c4 10             	add    $0x10,%esp
+    }
+    if (le_next != list) {
+c0103610:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103613:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0103616:	74 15                	je     c010362d <insert_vma_struct+0xc7>
+        check_vma_overlap(vma, le2vma(le_next, list_link));
+c0103618:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010361b:	83 e8 10             	sub    $0x10,%eax
+c010361e:	83 ec 08             	sub    $0x8,%esp
+c0103621:	50                   	push   %eax
+c0103622:	ff 75 0c             	pushl  0xc(%ebp)
+c0103625:	e8 b2 fe ff ff       	call   c01034dc <check_vma_overlap>
+c010362a:	83 c4 10             	add    $0x10,%esp
+    }
+
+    vma->vm_mm = mm;
+c010362d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103630:	8b 55 08             	mov    0x8(%ebp),%edx
+c0103633:	89 10                	mov    %edx,(%eax)
+    list_add_after(le_prev, &(vma->list_link));
+c0103635:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103638:	8d 50 10             	lea    0x10(%eax),%edx
+c010363b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010363e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0103641:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0103644:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103647:	8b 40 04             	mov    0x4(%eax),%eax
+c010364a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010364d:	89 55 d0             	mov    %edx,-0x30(%ebp)
+c0103650:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0103653:	89 55 cc             	mov    %edx,-0x34(%ebp)
+c0103656:	89 45 c8             	mov    %eax,-0x38(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0103659:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010365c:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010365f:	89 10                	mov    %edx,(%eax)
+c0103661:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103664:	8b 10                	mov    (%eax),%edx
+c0103666:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0103669:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010366c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010366f:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0103672:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0103675:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103678:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c010367b:	89 10                	mov    %edx,(%eax)
+
+    mm->map_count ++;
+c010367d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103680:	8b 40 10             	mov    0x10(%eax),%eax
+c0103683:	8d 50 01             	lea    0x1(%eax),%edx
+c0103686:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103689:	89 50 10             	mov    %edx,0x10(%eax)
+}
+c010368c:	90                   	nop
+c010368d:	c9                   	leave  
+c010368e:	c3                   	ret    
+
+c010368f <mm_destroy>:
+
+// mm_destroy - free mm and mm internal fields
+void
+mm_destroy(struct mm_struct *mm) {
+c010368f:	55                   	push   %ebp
+c0103690:	89 e5                	mov    %esp,%ebp
+c0103692:	83 ec 28             	sub    $0x28,%esp
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+c0103695:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103698:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(list)) != list) {
+c010369b:	eb 3c                	jmp    c01036d9 <mm_destroy+0x4a>
+c010369d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01036a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c01036a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01036a6:	8b 40 04             	mov    0x4(%eax),%eax
+c01036a9:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01036ac:	8b 12                	mov    (%edx),%edx
+c01036ae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c01036b1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01036b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01036b7:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01036ba:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01036bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01036c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01036c3:	89 10                	mov    %edx,(%eax)
+        list_del(le);
+        kfree(le2vma(le, list_link),sizeof(struct vma_struct));  //kfree vma        
+c01036c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01036c8:	83 e8 10             	sub    $0x10,%eax
+c01036cb:	83 ec 08             	sub    $0x8,%esp
+c01036ce:	6a 18                	push   $0x18
+c01036d0:	50                   	push   %eax
+c01036d1:	e8 1d 44 00 00       	call   c0107af3 <kfree>
+c01036d6:	83 c4 10             	add    $0x10,%esp
+c01036d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01036dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01036df:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01036e2:	8b 40 04             	mov    0x4(%eax),%eax
+// mm_destroy - free mm and mm internal fields
+void
+mm_destroy(struct mm_struct *mm) {
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+    while ((le = list_next(list)) != list) {
+c01036e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01036e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01036eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01036ee:	75 ad                	jne    c010369d <mm_destroy+0xe>
+        list_del(le);
+        kfree(le2vma(le, list_link),sizeof(struct vma_struct));  //kfree vma        
+    }
+    kfree(mm, sizeof(struct mm_struct)); //kfree mm
+c01036f0:	83 ec 08             	sub    $0x8,%esp
+c01036f3:	6a 18                	push   $0x18
+c01036f5:	ff 75 08             	pushl  0x8(%ebp)
+c01036f8:	e8 f6 43 00 00       	call   c0107af3 <kfree>
+c01036fd:	83 c4 10             	add    $0x10,%esp
+    mm=NULL;
+c0103700:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
+}
+c0103707:	90                   	nop
+c0103708:	c9                   	leave  
+c0103709:	c3                   	ret    
+
+c010370a <vmm_init>:
+
+// vmm_init - initialize virtual memory management
+//          - now just call check_vmm to check correctness of vmm
+void
+vmm_init(void) {
+c010370a:	55                   	push   %ebp
+c010370b:	89 e5                	mov    %esp,%ebp
+c010370d:	83 ec 08             	sub    $0x8,%esp
+    check_vmm();
+c0103710:	e8 03 00 00 00       	call   c0103718 <check_vmm>
+}
+c0103715:	90                   	nop
+c0103716:	c9                   	leave  
+c0103717:	c3                   	ret    
+
+c0103718 <check_vmm>:
+
+// check_vmm - check correctness of vmm
+static void
+check_vmm(void) {
+c0103718:	55                   	push   %ebp
+c0103719:	89 e5                	mov    %esp,%ebp
+c010371b:	83 ec 18             	sub    $0x18,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c010371e:	e8 07 2d 00 00       	call   c010642a <nr_free_pages>
+c0103723:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    
+    check_vma_struct();
+c0103726:	e8 40 00 00 00       	call   c010376b <check_vma_struct>
+    check_pgfault();
+c010372b:	e8 a1 04 00 00       	call   c0103bd1 <check_pgfault>
+
+    assert(nr_free_pages_store == nr_free_pages());
+c0103730:	e8 f5 2c 00 00       	call   c010642a <nr_free_pages>
+c0103735:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103738:	74 1e                	je     c0103758 <check_vmm+0x40>
+c010373a:	e8 0b d3 ff ff       	call   c0100a4a <print_stackframe>
+c010373f:	68 1c 92 10 c0       	push   $0xc010921c
+c0103744:	68 9b 91 10 c0       	push   $0xc010919b
+c0103749:	68 a9 00 00 00       	push   $0xa9
+c010374e:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103753:	e8 84 cc ff ff       	call   c01003dc <__panic>
+
+    cprintf("check_vmm() succeeded.\n");
+c0103758:	83 ec 0c             	sub    $0xc,%esp
+c010375b:	68 43 92 10 c0       	push   $0xc0109243
+c0103760:	e8 11 cb ff ff       	call   c0100276 <cprintf>
+c0103765:	83 c4 10             	add    $0x10,%esp
+}
+c0103768:	90                   	nop
+c0103769:	c9                   	leave  
+c010376a:	c3                   	ret    
+
+c010376b <check_vma_struct>:
+
+static void
+check_vma_struct(void) {
+c010376b:	55                   	push   %ebp
+c010376c:	89 e5                	mov    %esp,%ebp
+c010376e:	83 ec 58             	sub    $0x58,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0103771:	e8 b4 2c 00 00       	call   c010642a <nr_free_pages>
+c0103776:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    struct mm_struct *mm = mm_create();
+c0103779:	e8 f5 fb ff ff       	call   c0103373 <mm_create>
+c010377e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    assert(mm != NULL);
+c0103781:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0103785:	75 1e                	jne    c01037a5 <check_vma_struct+0x3a>
+c0103787:	e8 be d2 ff ff       	call   c0100a4a <print_stackframe>
+c010378c:	68 5b 92 10 c0       	push   $0xc010925b
+c0103791:	68 9b 91 10 c0       	push   $0xc010919b
+c0103796:	68 b3 00 00 00       	push   $0xb3
+c010379b:	68 b0 91 10 c0       	push   $0xc01091b0
+c01037a0:	e8 37 cc ff ff       	call   c01003dc <__panic>
+
+    int step1 = 10, step2 = step1 * 10;
+c01037a5:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
+c01037ac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01037af:	89 d0                	mov    %edx,%eax
+c01037b1:	c1 e0 02             	shl    $0x2,%eax
+c01037b4:	01 d0                	add    %edx,%eax
+c01037b6:	01 c0                	add    %eax,%eax
+c01037b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+c01037bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01037be:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01037c1:	eb 64                	jmp    c0103827 <check_vma_struct+0xbc>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c01037c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01037c6:	89 d0                	mov    %edx,%eax
+c01037c8:	c1 e0 02             	shl    $0x2,%eax
+c01037cb:	01 d0                	add    %edx,%eax
+c01037cd:	83 c0 02             	add    $0x2,%eax
+c01037d0:	89 c1                	mov    %eax,%ecx
+c01037d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01037d5:	89 d0                	mov    %edx,%eax
+c01037d7:	c1 e0 02             	shl    $0x2,%eax
+c01037da:	01 d0                	add    %edx,%eax
+c01037dc:	83 ec 04             	sub    $0x4,%esp
+c01037df:	6a 00                	push   $0x0
+c01037e1:	51                   	push   %ecx
+c01037e2:	50                   	push   %eax
+c01037e3:	e8 07 fc ff ff       	call   c01033ef <vma_create>
+c01037e8:	83 c4 10             	add    $0x10,%esp
+c01037eb:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        assert(vma != NULL);
+c01037ee:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c01037f2:	75 1e                	jne    c0103812 <check_vma_struct+0xa7>
+c01037f4:	e8 51 d2 ff ff       	call   c0100a4a <print_stackframe>
+c01037f9:	68 66 92 10 c0       	push   $0xc0109266
+c01037fe:	68 9b 91 10 c0       	push   $0xc010919b
+c0103803:	68 ba 00 00 00       	push   $0xba
+c0103808:	68 b0 91 10 c0       	push   $0xc01091b0
+c010380d:	e8 ca cb ff ff       	call   c01003dc <__panic>
+        insert_vma_struct(mm, vma);
+c0103812:	83 ec 08             	sub    $0x8,%esp
+c0103815:	ff 75 dc             	pushl  -0x24(%ebp)
+c0103818:	ff 75 e8             	pushl  -0x18(%ebp)
+c010381b:	e8 46 fd ff ff       	call   c0103566 <insert_vma_struct>
+c0103820:	83 c4 10             	add    $0x10,%esp
+    assert(mm != NULL);
+
+    int step1 = 10, step2 = step1 * 10;
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+c0103823:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0103827:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010382b:	7f 96                	jg     c01037c3 <check_vma_struct+0x58>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+c010382d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0103830:	83 c0 01             	add    $0x1,%eax
+c0103833:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103836:	eb 64                	jmp    c010389c <check_vma_struct+0x131>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c0103838:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010383b:	89 d0                	mov    %edx,%eax
+c010383d:	c1 e0 02             	shl    $0x2,%eax
+c0103840:	01 d0                	add    %edx,%eax
+c0103842:	83 c0 02             	add    $0x2,%eax
+c0103845:	89 c1                	mov    %eax,%ecx
+c0103847:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010384a:	89 d0                	mov    %edx,%eax
+c010384c:	c1 e0 02             	shl    $0x2,%eax
+c010384f:	01 d0                	add    %edx,%eax
+c0103851:	83 ec 04             	sub    $0x4,%esp
+c0103854:	6a 00                	push   $0x0
+c0103856:	51                   	push   %ecx
+c0103857:	50                   	push   %eax
+c0103858:	e8 92 fb ff ff       	call   c01033ef <vma_create>
+c010385d:	83 c4 10             	add    $0x10,%esp
+c0103860:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        assert(vma != NULL);
+c0103863:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c0103867:	75 1e                	jne    c0103887 <check_vma_struct+0x11c>
+c0103869:	e8 dc d1 ff ff       	call   c0100a4a <print_stackframe>
+c010386e:	68 66 92 10 c0       	push   $0xc0109266
+c0103873:	68 9b 91 10 c0       	push   $0xc010919b
+c0103878:	68 c0 00 00 00       	push   $0xc0
+c010387d:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103882:	e8 55 cb ff ff       	call   c01003dc <__panic>
+        insert_vma_struct(mm, vma);
+c0103887:	83 ec 08             	sub    $0x8,%esp
+c010388a:	ff 75 d8             	pushl  -0x28(%ebp)
+c010388d:	ff 75 e8             	pushl  -0x18(%ebp)
+c0103890:	e8 d1 fc ff ff       	call   c0103566 <insert_vma_struct>
+c0103895:	83 c4 10             	add    $0x10,%esp
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+c0103898:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010389c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010389f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c01038a2:	7e 94                	jle    c0103838 <check_vma_struct+0xcd>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+c01038a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01038a7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+c01038aa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c01038ad:	8b 40 04             	mov    0x4(%eax),%eax
+c01038b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    for (i = 1; i <= step2; i ++) {
+c01038b3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+c01038ba:	e9 8b 00 00 00       	jmp    c010394a <check_vma_struct+0x1df>
+        assert(le != &(mm->mmap_list));
+c01038bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01038c2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01038c5:	75 1e                	jne    c01038e5 <check_vma_struct+0x17a>
+c01038c7:	e8 7e d1 ff ff       	call   c0100a4a <print_stackframe>
+c01038cc:	68 72 92 10 c0       	push   $0xc0109272
+c01038d1:	68 9b 91 10 c0       	push   $0xc010919b
+c01038d6:	68 c7 00 00 00       	push   $0xc7
+c01038db:	68 b0 91 10 c0       	push   $0xc01091b0
+c01038e0:	e8 f7 ca ff ff       	call   c01003dc <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+c01038e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01038e8:	83 e8 10             	sub    $0x10,%eax
+c01038eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+c01038ee:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01038f1:	8b 48 04             	mov    0x4(%eax),%ecx
+c01038f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01038f7:	89 d0                	mov    %edx,%eax
+c01038f9:	c1 e0 02             	shl    $0x2,%eax
+c01038fc:	01 d0                	add    %edx,%eax
+c01038fe:	39 c1                	cmp    %eax,%ecx
+c0103900:	75 17                	jne    c0103919 <check_vma_struct+0x1ae>
+c0103902:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103905:	8b 48 08             	mov    0x8(%eax),%ecx
+c0103908:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010390b:	89 d0                	mov    %edx,%eax
+c010390d:	c1 e0 02             	shl    $0x2,%eax
+c0103910:	01 d0                	add    %edx,%eax
+c0103912:	83 c0 02             	add    $0x2,%eax
+c0103915:	39 c1                	cmp    %eax,%ecx
+c0103917:	74 1e                	je     c0103937 <check_vma_struct+0x1cc>
+c0103919:	e8 2c d1 ff ff       	call   c0100a4a <print_stackframe>
+c010391e:	68 8c 92 10 c0       	push   $0xc010928c
+c0103923:	68 9b 91 10 c0       	push   $0xc010919b
+c0103928:	68 c9 00 00 00       	push   $0xc9
+c010392d:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103932:	e8 a5 ca ff ff       	call   c01003dc <__panic>
+c0103937:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010393a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c010393d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0103940:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c0103943:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+
+    for (i = 1; i <= step2; i ++) {
+c0103946:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010394a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010394d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0103950:	0f 8e 69 ff ff ff    	jle    c01038bf <check_vma_struct+0x154>
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+c0103956:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
+c010395d:	e9 a3 01 00 00       	jmp    c0103b05 <check_vma_struct+0x39a>
+        struct vma_struct *vma1 = find_vma(mm, i);
+c0103962:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103965:	83 ec 08             	sub    $0x8,%esp
+c0103968:	50                   	push   %eax
+c0103969:	ff 75 e8             	pushl  -0x18(%ebp)
+c010396c:	e8 ba fa ff ff       	call   c010342b <find_vma>
+c0103971:	83 c4 10             	add    $0x10,%esp
+c0103974:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        assert(vma1 != NULL);
+c0103977:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c010397b:	75 1e                	jne    c010399b <check_vma_struct+0x230>
+c010397d:	e8 c8 d0 ff ff       	call   c0100a4a <print_stackframe>
+c0103982:	68 c1 92 10 c0       	push   $0xc01092c1
+c0103987:	68 9b 91 10 c0       	push   $0xc010919b
+c010398c:	68 cf 00 00 00       	push   $0xcf
+c0103991:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103996:	e8 41 ca ff ff       	call   c01003dc <__panic>
+        struct vma_struct *vma2 = find_vma(mm, i+1);
+c010399b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010399e:	83 c0 01             	add    $0x1,%eax
+c01039a1:	83 ec 08             	sub    $0x8,%esp
+c01039a4:	50                   	push   %eax
+c01039a5:	ff 75 e8             	pushl  -0x18(%ebp)
+c01039a8:	e8 7e fa ff ff       	call   c010342b <find_vma>
+c01039ad:	83 c4 10             	add    $0x10,%esp
+c01039b0:	89 45 c8             	mov    %eax,-0x38(%ebp)
+        assert(vma2 != NULL);
+c01039b3:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
+c01039b7:	75 1e                	jne    c01039d7 <check_vma_struct+0x26c>
+c01039b9:	e8 8c d0 ff ff       	call   c0100a4a <print_stackframe>
+c01039be:	68 ce 92 10 c0       	push   $0xc01092ce
+c01039c3:	68 9b 91 10 c0       	push   $0xc010919b
+c01039c8:	68 d1 00 00 00       	push   $0xd1
+c01039cd:	68 b0 91 10 c0       	push   $0xc01091b0
+c01039d2:	e8 05 ca ff ff       	call   c01003dc <__panic>
+        struct vma_struct *vma3 = find_vma(mm, i+2);
+c01039d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01039da:	83 c0 02             	add    $0x2,%eax
+c01039dd:	83 ec 08             	sub    $0x8,%esp
+c01039e0:	50                   	push   %eax
+c01039e1:	ff 75 e8             	pushl  -0x18(%ebp)
+c01039e4:	e8 42 fa ff ff       	call   c010342b <find_vma>
+c01039e9:	83 c4 10             	add    $0x10,%esp
+c01039ec:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        assert(vma3 == NULL);
+c01039ef:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
+c01039f3:	74 1e                	je     c0103a13 <check_vma_struct+0x2a8>
+c01039f5:	e8 50 d0 ff ff       	call   c0100a4a <print_stackframe>
+c01039fa:	68 db 92 10 c0       	push   $0xc01092db
+c01039ff:	68 9b 91 10 c0       	push   $0xc010919b
+c0103a04:	68 d3 00 00 00       	push   $0xd3
+c0103a09:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103a0e:	e8 c9 c9 ff ff       	call   c01003dc <__panic>
+        struct vma_struct *vma4 = find_vma(mm, i+3);
+c0103a13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a16:	83 c0 03             	add    $0x3,%eax
+c0103a19:	83 ec 08             	sub    $0x8,%esp
+c0103a1c:	50                   	push   %eax
+c0103a1d:	ff 75 e8             	pushl  -0x18(%ebp)
+c0103a20:	e8 06 fa ff ff       	call   c010342b <find_vma>
+c0103a25:	83 c4 10             	add    $0x10,%esp
+c0103a28:	89 45 c0             	mov    %eax,-0x40(%ebp)
+        assert(vma4 == NULL);
+c0103a2b:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
+c0103a2f:	74 1e                	je     c0103a4f <check_vma_struct+0x2e4>
+c0103a31:	e8 14 d0 ff ff       	call   c0100a4a <print_stackframe>
+c0103a36:	68 e8 92 10 c0       	push   $0xc01092e8
+c0103a3b:	68 9b 91 10 c0       	push   $0xc010919b
+c0103a40:	68 d5 00 00 00       	push   $0xd5
+c0103a45:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103a4a:	e8 8d c9 ff ff       	call   c01003dc <__panic>
+        struct vma_struct *vma5 = find_vma(mm, i+4);
+c0103a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a52:	83 c0 04             	add    $0x4,%eax
+c0103a55:	83 ec 08             	sub    $0x8,%esp
+c0103a58:	50                   	push   %eax
+c0103a59:	ff 75 e8             	pushl  -0x18(%ebp)
+c0103a5c:	e8 ca f9 ff ff       	call   c010342b <find_vma>
+c0103a61:	83 c4 10             	add    $0x10,%esp
+c0103a64:	89 45 bc             	mov    %eax,-0x44(%ebp)
+        assert(vma5 == NULL);
+c0103a67:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0103a6b:	74 1e                	je     c0103a8b <check_vma_struct+0x320>
+c0103a6d:	e8 d8 cf ff ff       	call   c0100a4a <print_stackframe>
+c0103a72:	68 f5 92 10 c0       	push   $0xc01092f5
+c0103a77:	68 9b 91 10 c0       	push   $0xc010919b
+c0103a7c:	68 d7 00 00 00       	push   $0xd7
+c0103a81:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103a86:	e8 51 c9 ff ff       	call   c01003dc <__panic>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+c0103a8b:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0103a8e:	8b 50 04             	mov    0x4(%eax),%edx
+c0103a91:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103a94:	39 c2                	cmp    %eax,%edx
+c0103a96:	75 10                	jne    c0103aa8 <check_vma_struct+0x33d>
+c0103a98:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0103a9b:	8b 40 08             	mov    0x8(%eax),%eax
+c0103a9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0103aa1:	83 c2 02             	add    $0x2,%edx
+c0103aa4:	39 d0                	cmp    %edx,%eax
+c0103aa6:	74 1e                	je     c0103ac6 <check_vma_struct+0x35b>
+c0103aa8:	e8 9d cf ff ff       	call   c0100a4a <print_stackframe>
+c0103aad:	68 04 93 10 c0       	push   $0xc0109304
+c0103ab2:	68 9b 91 10 c0       	push   $0xc010919b
+c0103ab7:	68 d9 00 00 00       	push   $0xd9
+c0103abc:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103ac1:	e8 16 c9 ff ff       	call   c01003dc <__panic>
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+c0103ac6:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103ac9:	8b 50 04             	mov    0x4(%eax),%edx
+c0103acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103acf:	39 c2                	cmp    %eax,%edx
+c0103ad1:	75 10                	jne    c0103ae3 <check_vma_struct+0x378>
+c0103ad3:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103ad6:	8b 40 08             	mov    0x8(%eax),%eax
+c0103ad9:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0103adc:	83 c2 02             	add    $0x2,%edx
+c0103adf:	39 d0                	cmp    %edx,%eax
+c0103ae1:	74 1e                	je     c0103b01 <check_vma_struct+0x396>
+c0103ae3:	e8 62 cf ff ff       	call   c0100a4a <print_stackframe>
+c0103ae8:	68 34 93 10 c0       	push   $0xc0109334
+c0103aed:	68 9b 91 10 c0       	push   $0xc010919b
+c0103af2:	68 da 00 00 00       	push   $0xda
+c0103af7:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103afc:	e8 db c8 ff ff       	call   c01003dc <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+c0103b01:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
+c0103b05:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0103b08:	89 d0                	mov    %edx,%eax
+c0103b0a:	c1 e0 02             	shl    $0x2,%eax
+c0103b0d:	01 d0                	add    %edx,%eax
+c0103b0f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0103b12:	0f 8d 4a fe ff ff    	jge    c0103962 <check_vma_struct+0x1f7>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+c0103b18:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
+c0103b1f:	eb 61                	jmp    c0103b82 <check_vma_struct+0x417>
+        struct vma_struct *vma_below_5= find_vma(mm,i);
+c0103b21:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103b24:	83 ec 08             	sub    $0x8,%esp
+c0103b27:	50                   	push   %eax
+c0103b28:	ff 75 e8             	pushl  -0x18(%ebp)
+c0103b2b:	e8 fb f8 ff ff       	call   c010342b <find_vma>
+c0103b30:	83 c4 10             	add    $0x10,%esp
+c0103b33:	89 45 b8             	mov    %eax,-0x48(%ebp)
+        if (vma_below_5 != NULL ) {
+c0103b36:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c0103b3a:	74 1e                	je     c0103b5a <check_vma_struct+0x3ef>
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+c0103b3c:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0103b3f:	8b 50 08             	mov    0x8(%eax),%edx
+c0103b42:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0103b45:	8b 40 04             	mov    0x4(%eax),%eax
+c0103b48:	52                   	push   %edx
+c0103b49:	50                   	push   %eax
+c0103b4a:	ff 75 f4             	pushl  -0xc(%ebp)
+c0103b4d:	68 64 93 10 c0       	push   $0xc0109364
+c0103b52:	e8 1f c7 ff ff       	call   c0100276 <cprintf>
+c0103b57:	83 c4 10             	add    $0x10,%esp
+        }
+        assert(vma_below_5 == NULL);
+c0103b5a:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c0103b5e:	74 1e                	je     c0103b7e <check_vma_struct+0x413>
+c0103b60:	e8 e5 ce ff ff       	call   c0100a4a <print_stackframe>
+c0103b65:	68 89 93 10 c0       	push   $0xc0109389
+c0103b6a:	68 9b 91 10 c0       	push   $0xc010919b
+c0103b6f:	68 e2 00 00 00       	push   $0xe2
+c0103b74:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103b79:	e8 5e c8 ff ff       	call   c01003dc <__panic>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+c0103b7e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0103b82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103b86:	79 99                	jns    c0103b21 <check_vma_struct+0x3b6>
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+        }
+        assert(vma_below_5 == NULL);
+    }
+
+    mm_destroy(mm);
+c0103b88:	83 ec 0c             	sub    $0xc,%esp
+c0103b8b:	ff 75 e8             	pushl  -0x18(%ebp)
+c0103b8e:	e8 fc fa ff ff       	call   c010368f <mm_destroy>
+c0103b93:	83 c4 10             	add    $0x10,%esp
+
+    assert(nr_free_pages_store == nr_free_pages());
+c0103b96:	e8 8f 28 00 00       	call   c010642a <nr_free_pages>
+c0103b9b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0103b9e:	74 1e                	je     c0103bbe <check_vma_struct+0x453>
+c0103ba0:	e8 a5 ce ff ff       	call   c0100a4a <print_stackframe>
+c0103ba5:	68 1c 92 10 c0       	push   $0xc010921c
+c0103baa:	68 9b 91 10 c0       	push   $0xc010919b
+c0103baf:	68 e7 00 00 00       	push   $0xe7
+c0103bb4:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103bb9:	e8 1e c8 ff ff       	call   c01003dc <__panic>
+
+    cprintf("check_vma_struct() succeeded!\n");
+c0103bbe:	83 ec 0c             	sub    $0xc,%esp
+c0103bc1:	68 a0 93 10 c0       	push   $0xc01093a0
+c0103bc6:	e8 ab c6 ff ff       	call   c0100276 <cprintf>
+c0103bcb:	83 c4 10             	add    $0x10,%esp
+}
+c0103bce:	90                   	nop
+c0103bcf:	c9                   	leave  
+c0103bd0:	c3                   	ret    
+
+c0103bd1 <check_pgfault>:
+
+struct mm_struct *check_mm_struct;
+
+// check_pgfault - check correctness of pgfault handler
+static void
+check_pgfault(void) {
+c0103bd1:	55                   	push   %ebp
+c0103bd2:	89 e5                	mov    %esp,%ebp
+c0103bd4:	83 ec 28             	sub    $0x28,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0103bd7:	e8 4e 28 00 00       	call   c010642a <nr_free_pages>
+c0103bdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    check_mm_struct = mm_create();
+c0103bdf:	e8 8f f7 ff ff       	call   c0103373 <mm_create>
+c0103be4:	a3 70 1a 12 c0       	mov    %eax,0xc0121a70
+    assert(check_mm_struct != NULL);
+c0103be9:	a1 70 1a 12 c0       	mov    0xc0121a70,%eax
+c0103bee:	85 c0                	test   %eax,%eax
+c0103bf0:	75 1e                	jne    c0103c10 <check_pgfault+0x3f>
+c0103bf2:	e8 53 ce ff ff       	call   c0100a4a <print_stackframe>
+c0103bf7:	68 bf 93 10 c0       	push   $0xc01093bf
+c0103bfc:	68 9b 91 10 c0       	push   $0xc010919b
+c0103c01:	68 f4 00 00 00       	push   $0xf4
+c0103c06:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103c0b:	e8 cc c7 ff ff       	call   c01003dc <__panic>
+
+    struct mm_struct *mm = check_mm_struct;
+c0103c10:	a1 70 1a 12 c0       	mov    0xc0121a70,%eax
+c0103c15:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    pde_t *pgdir = mm->pgdir = boot_pgdir;
+c0103c18:	8b 15 e4 19 12 c0    	mov    0xc01219e4,%edx
+c0103c1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103c21:	89 50 0c             	mov    %edx,0xc(%eax)
+c0103c24:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103c27:	8b 40 0c             	mov    0xc(%eax),%eax
+c0103c2a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(pgdir[0] == 0);
+c0103c2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0103c30:	8b 00                	mov    (%eax),%eax
+c0103c32:	85 c0                	test   %eax,%eax
+c0103c34:	74 1e                	je     c0103c54 <check_pgfault+0x83>
+c0103c36:	e8 0f ce ff ff       	call   c0100a4a <print_stackframe>
+c0103c3b:	68 d7 93 10 c0       	push   $0xc01093d7
+c0103c40:	68 9b 91 10 c0       	push   $0xc010919b
+c0103c45:	68 f8 00 00 00       	push   $0xf8
+c0103c4a:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103c4f:	e8 88 c7 ff ff       	call   c01003dc <__panic>
+
+    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
+c0103c54:	83 ec 04             	sub    $0x4,%esp
+c0103c57:	6a 02                	push   $0x2
+c0103c59:	68 00 00 40 00       	push   $0x400000
+c0103c5e:	6a 00                	push   $0x0
+c0103c60:	e8 8a f7 ff ff       	call   c01033ef <vma_create>
+c0103c65:	83 c4 10             	add    $0x10,%esp
+c0103c68:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(vma != NULL);
+c0103c6b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0103c6f:	75 1e                	jne    c0103c8f <check_pgfault+0xbe>
+c0103c71:	e8 d4 cd ff ff       	call   c0100a4a <print_stackframe>
+c0103c76:	68 66 92 10 c0       	push   $0xc0109266
+c0103c7b:	68 9b 91 10 c0       	push   $0xc010919b
+c0103c80:	68 fb 00 00 00       	push   $0xfb
+c0103c85:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103c8a:	e8 4d c7 ff ff       	call   c01003dc <__panic>
+
+    insert_vma_struct(mm, vma);
+c0103c8f:	83 ec 08             	sub    $0x8,%esp
+c0103c92:	ff 75 e0             	pushl  -0x20(%ebp)
+c0103c95:	ff 75 e8             	pushl  -0x18(%ebp)
+c0103c98:	e8 c9 f8 ff ff       	call   c0103566 <insert_vma_struct>
+c0103c9d:	83 c4 10             	add    $0x10,%esp
+
+    uintptr_t addr = 0x100;
+c0103ca0:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
+    assert(find_vma(mm, addr) == vma);
+c0103ca7:	83 ec 08             	sub    $0x8,%esp
+c0103caa:	ff 75 dc             	pushl  -0x24(%ebp)
+c0103cad:	ff 75 e8             	pushl  -0x18(%ebp)
+c0103cb0:	e8 76 f7 ff ff       	call   c010342b <find_vma>
+c0103cb5:	83 c4 10             	add    $0x10,%esp
+c0103cb8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0103cbb:	74 1e                	je     c0103cdb <check_pgfault+0x10a>
+c0103cbd:	e8 88 cd ff ff       	call   c0100a4a <print_stackframe>
+c0103cc2:	68 e5 93 10 c0       	push   $0xc01093e5
+c0103cc7:	68 9b 91 10 c0       	push   $0xc010919b
+c0103ccc:	68 00 01 00 00       	push   $0x100
+c0103cd1:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103cd6:	e8 01 c7 ff ff       	call   c01003dc <__panic>
+
+    int i, sum = 0;
+c0103cdb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    for (i = 0; i < 100; i ++) {
+c0103ce2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0103ce9:	eb 19                	jmp    c0103d04 <check_pgfault+0x133>
+        *(char *)(addr + i) = i;
+c0103ceb:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0103cee:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103cf1:	01 d0                	add    %edx,%eax
+c0103cf3:	89 c2                	mov    %eax,%edx
+c0103cf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103cf8:	88 02                	mov    %al,(%edx)
+        sum += i;
+c0103cfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103cfd:	01 45 f0             	add    %eax,-0x10(%ebp)
+
+    uintptr_t addr = 0x100;
+    assert(find_vma(mm, addr) == vma);
+
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+c0103d00:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0103d04:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c0103d08:	7e e1                	jle    c0103ceb <check_pgfault+0x11a>
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+c0103d0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0103d11:	eb 15                	jmp    c0103d28 <check_pgfault+0x157>
+        sum -= *(char *)(addr + i);
+c0103d13:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0103d16:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103d19:	01 d0                	add    %edx,%eax
+c0103d1b:	0f b6 00             	movzbl (%eax),%eax
+c0103d1e:	0f be c0             	movsbl %al,%eax
+c0103d21:	29 45 f0             	sub    %eax,-0x10(%ebp)
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+c0103d24:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0103d28:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c0103d2c:	7e e5                	jle    c0103d13 <check_pgfault+0x142>
+        sum -= *(char *)(addr + i);
+    }
+    assert(sum == 0);
+c0103d2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0103d32:	74 1e                	je     c0103d52 <check_pgfault+0x181>
+c0103d34:	e8 11 cd ff ff       	call   c0100a4a <print_stackframe>
+c0103d39:	68 ff 93 10 c0       	push   $0xc01093ff
+c0103d3e:	68 9b 91 10 c0       	push   $0xc010919b
+c0103d43:	68 0a 01 00 00       	push   $0x10a
+c0103d48:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103d4d:	e8 8a c6 ff ff       	call   c01003dc <__panic>
+
+    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
+c0103d52:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103d55:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c0103d58:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0103d5b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103d60:	83 ec 08             	sub    $0x8,%esp
+c0103d63:	50                   	push   %eax
+c0103d64:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0103d67:	e8 62 2f 00 00       	call   c0106cce <page_remove>
+c0103d6c:	83 c4 10             	add    $0x10,%esp
+    free_page(pde2page(pgdir[0]));
+c0103d6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0103d72:	8b 00                	mov    (%eax),%eax
+c0103d74:	83 ec 0c             	sub    $0xc,%esp
+c0103d77:	50                   	push   %eax
+c0103d78:	e8 da f5 ff ff       	call   c0103357 <pde2page>
+c0103d7d:	83 c4 10             	add    $0x10,%esp
+c0103d80:	83 ec 08             	sub    $0x8,%esp
+c0103d83:	6a 01                	push   $0x1
+c0103d85:	50                   	push   %eax
+c0103d86:	e8 6a 26 00 00       	call   c01063f5 <free_pages>
+c0103d8b:	83 c4 10             	add    $0x10,%esp
+    pgdir[0] = 0;
+c0103d8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0103d91:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    mm->pgdir = NULL;
+c0103d97:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103d9a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+    mm_destroy(mm);
+c0103da1:	83 ec 0c             	sub    $0xc,%esp
+c0103da4:	ff 75 e8             	pushl  -0x18(%ebp)
+c0103da7:	e8 e3 f8 ff ff       	call   c010368f <mm_destroy>
+c0103dac:	83 c4 10             	add    $0x10,%esp
+    check_mm_struct = NULL;
+c0103daf:	c7 05 70 1a 12 c0 00 	movl   $0x0,0xc0121a70
+c0103db6:	00 00 00 
+
+    assert(nr_free_pages_store == nr_free_pages());
+c0103db9:	e8 6c 26 00 00       	call   c010642a <nr_free_pages>
+c0103dbe:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0103dc1:	74 1e                	je     c0103de1 <check_pgfault+0x210>
+c0103dc3:	e8 82 cc ff ff       	call   c0100a4a <print_stackframe>
+c0103dc8:	68 1c 92 10 c0       	push   $0xc010921c
+c0103dcd:	68 9b 91 10 c0       	push   $0xc010919b
+c0103dd2:	68 14 01 00 00       	push   $0x114
+c0103dd7:	68 b0 91 10 c0       	push   $0xc01091b0
+c0103ddc:	e8 fb c5 ff ff       	call   c01003dc <__panic>
+
+    cprintf("check_pgfault() succeeded!\n");
+c0103de1:	83 ec 0c             	sub    $0xc,%esp
+c0103de4:	68 08 94 10 c0       	push   $0xc0109408
+c0103de9:	e8 88 c4 ff ff       	call   c0100276 <cprintf>
+c0103dee:	83 c4 10             	add    $0x10,%esp
+}
+c0103df1:	90                   	nop
+c0103df2:	c9                   	leave  
+c0103df3:	c3                   	ret    
+
+c0103df4 <do_pgfault>:
+ *            was a read (0) or write (1).
+ *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
+ *            or supervisor mode (0) at the time of the exception.
+ */
+int
+do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
+c0103df4:	55                   	push   %ebp
+c0103df5:	89 e5                	mov    %esp,%ebp
+c0103df7:	83 ec 28             	sub    $0x28,%esp
+    int ret = -E_INVAL;
+c0103dfa:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+    //try to find a vma which include addr
+    struct vma_struct *vma = find_vma(mm, addr);
+c0103e01:	ff 75 10             	pushl  0x10(%ebp)
+c0103e04:	ff 75 08             	pushl  0x8(%ebp)
+c0103e07:	e8 1f f6 ff ff       	call   c010342b <find_vma>
+c0103e0c:	83 c4 08             	add    $0x8,%esp
+c0103e0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    pgfault_num++;
+c0103e12:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c0103e17:	83 c0 01             	add    $0x1,%eax
+c0103e1a:	a3 c8 19 12 c0       	mov    %eax,0xc01219c8
+    //If the addr is in the range of a mm's vma?
+    if (vma == NULL || vma->vm_start > addr) {
+c0103e1f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0103e23:	74 0b                	je     c0103e30 <do_pgfault+0x3c>
+c0103e25:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103e28:	8b 40 04             	mov    0x4(%eax),%eax
+c0103e2b:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0103e2e:	76 18                	jbe    c0103e48 <do_pgfault+0x54>
+        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
+c0103e30:	83 ec 08             	sub    $0x8,%esp
+c0103e33:	ff 75 10             	pushl  0x10(%ebp)
+c0103e36:	68 24 94 10 c0       	push   $0xc0109424
+c0103e3b:	e8 36 c4 ff ff       	call   c0100276 <cprintf>
+c0103e40:	83 c4 10             	add    $0x10,%esp
+        goto failed;
+c0103e43:	e9 5c 01 00 00       	jmp    c0103fa4 <do_pgfault+0x1b0>
+    }
+    //check the error_code
+    switch (error_code & 3) {
+c0103e48:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103e4b:	83 e0 03             	and    $0x3,%eax
+c0103e4e:	85 c0                	test   %eax,%eax
+c0103e50:	74 3c                	je     c0103e8e <do_pgfault+0x9a>
+c0103e52:	83 f8 01             	cmp    $0x1,%eax
+c0103e55:	74 22                	je     c0103e79 <do_pgfault+0x85>
+    default:
+            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
+    case 2: /* error code flag : (W/R=1, P=0): write, not present */
+        if (!(vma->vm_flags & VM_WRITE)) {
+c0103e57:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103e5a:	8b 40 0c             	mov    0xc(%eax),%eax
+c0103e5d:	83 e0 02             	and    $0x2,%eax
+c0103e60:	85 c0                	test   %eax,%eax
+c0103e62:	75 4c                	jne    c0103eb0 <do_pgfault+0xbc>
+            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
+c0103e64:	83 ec 0c             	sub    $0xc,%esp
+c0103e67:	68 54 94 10 c0       	push   $0xc0109454
+c0103e6c:	e8 05 c4 ff ff       	call   c0100276 <cprintf>
+c0103e71:	83 c4 10             	add    $0x10,%esp
+            goto failed;
+c0103e74:	e9 2b 01 00 00       	jmp    c0103fa4 <do_pgfault+0x1b0>
+        }
+        break;
+    case 1: /* error code flag : (W/R=0, P=1): read, present */
+        cprintf("do_pgfault failed: error code flag = read AND present\n");
+c0103e79:	83 ec 0c             	sub    $0xc,%esp
+c0103e7c:	68 b4 94 10 c0       	push   $0xc01094b4
+c0103e81:	e8 f0 c3 ff ff       	call   c0100276 <cprintf>
+c0103e86:	83 c4 10             	add    $0x10,%esp
+        goto failed;
+c0103e89:	e9 16 01 00 00       	jmp    c0103fa4 <do_pgfault+0x1b0>
+    case 0: /* error code flag : (W/R=0, P=0): read, not present */
+        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
+c0103e8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103e91:	8b 40 0c             	mov    0xc(%eax),%eax
+c0103e94:	83 e0 05             	and    $0x5,%eax
+c0103e97:	85 c0                	test   %eax,%eax
+c0103e99:	75 16                	jne    c0103eb1 <do_pgfault+0xbd>
+            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
+c0103e9b:	83 ec 0c             	sub    $0xc,%esp
+c0103e9e:	68 ec 94 10 c0       	push   $0xc01094ec
+c0103ea3:	e8 ce c3 ff ff       	call   c0100276 <cprintf>
+c0103ea8:	83 c4 10             	add    $0x10,%esp
+            goto failed;
+c0103eab:	e9 f4 00 00 00       	jmp    c0103fa4 <do_pgfault+0x1b0>
+    case 2: /* error code flag : (W/R=1, P=0): write, not present */
+        if (!(vma->vm_flags & VM_WRITE)) {
+            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
+            goto failed;
+        }
+        break;
+c0103eb0:	90                   	nop
+     *    (write an non_existed addr && addr is writable) OR
+     *    (read  an non_existed addr && addr is readable)
+     * THEN
+     *    continue process
+     */
+    uint32_t perm = PTE_U;
+c0103eb1:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
+    if (vma->vm_flags & VM_WRITE) {
+c0103eb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103ebb:	8b 40 0c             	mov    0xc(%eax),%eax
+c0103ebe:	83 e0 02             	and    $0x2,%eax
+c0103ec1:	85 c0                	test   %eax,%eax
+c0103ec3:	74 04                	je     c0103ec9 <do_pgfault+0xd5>
+        perm |= PTE_W;
+c0103ec5:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
+    }
+    addr = ROUNDDOWN(addr, PGSIZE);
+c0103ec9:	8b 45 10             	mov    0x10(%ebp),%eax
+c0103ecc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0103ecf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103ed2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103ed7:	89 45 10             	mov    %eax,0x10(%ebp)
+
+    ret = -E_NO_MEM;
+c0103eda:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    pte_t *ptep=NULL;
+c0103ee1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            goto failed;
+        }
+   }
+#endif
+    ptep = get_pte(mm->pgdir, addr, 1);
+c0103ee8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103eeb:	8b 40 0c             	mov    0xc(%eax),%eax
+c0103eee:	83 ec 04             	sub    $0x4,%esp
+c0103ef1:	6a 01                	push   $0x1
+c0103ef3:	ff 75 10             	pushl  0x10(%ebp)
+c0103ef6:	50                   	push   %eax
+c0103ef7:	e8 91 2b 00 00       	call   c0106a8d <get_pte>
+c0103efc:	83 c4 10             	add    $0x10,%esp
+c0103eff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if (*ptep == 0) {
+c0103f02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0103f05:	8b 00                	mov    (%eax),%eax
+c0103f07:	85 c0                	test   %eax,%eax
+c0103f09:	75 1d                	jne    c0103f28 <do_pgfault+0x134>
+	    struct Page* page = pgdir_alloc_page(mm->pgdir, addr, perm);
+c0103f0b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103f0e:	8b 40 0c             	mov    0xc(%eax),%eax
+c0103f11:	83 ec 04             	sub    $0x4,%esp
+c0103f14:	ff 75 f0             	pushl  -0x10(%ebp)
+c0103f17:	ff 75 10             	pushl  0x10(%ebp)
+c0103f1a:	50                   	push   %eax
+c0103f1b:	e8 f5 2e 00 00       	call   c0106e15 <pgdir_alloc_page>
+c0103f20:	83 c4 10             	add    $0x10,%esp
+c0103f23:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0103f26:	eb 75                	jmp    c0103f9d <do_pgfault+0x1a9>
+    } else {
+	    if (swap_init_ok) {
+c0103f28:	a1 cc 19 12 c0       	mov    0xc01219cc,%eax
+c0103f2d:	85 c0                	test   %eax,%eax
+c0103f2f:	74 54                	je     c0103f85 <do_pgfault+0x191>
+		    struct Page *page = NULL;
+c0103f31:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+		    swap_in(mm, addr, &page);
+c0103f38:	83 ec 04             	sub    $0x4,%esp
+c0103f3b:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0103f3e:	50                   	push   %eax
+c0103f3f:	ff 75 10             	pushl  0x10(%ebp)
+c0103f42:	ff 75 08             	pushl  0x8(%ebp)
+c0103f45:	e8 e0 07 00 00       	call   c010472a <swap_in>
+c0103f4a:	83 c4 10             	add    $0x10,%esp
+		    page_insert(mm->pgdir, page, addr, perm);
+c0103f4d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103f50:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103f53:	8b 40 0c             	mov    0xc(%eax),%eax
+c0103f56:	ff 75 f0             	pushl  -0x10(%ebp)
+c0103f59:	ff 75 10             	pushl  0x10(%ebp)
+c0103f5c:	52                   	push   %edx
+c0103f5d:	50                   	push   %eax
+c0103f5e:	e8 a4 2d 00 00       	call   c0106d07 <page_insert>
+c0103f63:	83 c4 10             	add    $0x10,%esp
+		    swap_map_swappable(mm, addr, page, 1);
+c0103f66:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103f69:	6a 01                	push   $0x1
+c0103f6b:	50                   	push   %eax
+c0103f6c:	ff 75 10             	pushl  0x10(%ebp)
+c0103f6f:	ff 75 08             	pushl  0x8(%ebp)
+c0103f72:	e8 1e 06 00 00       	call   c0104595 <swap_map_swappable>
+c0103f77:	83 c4 10             	add    $0x10,%esp
+		    page->pra_vaddr = addr; // it seems not reasonble that this statement doesn't exist in page_insert() function
+c0103f7a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0103f7d:	8b 55 10             	mov    0x10(%ebp),%edx
+c0103f80:	89 50 1c             	mov    %edx,0x1c(%eax)
+c0103f83:	eb 18                	jmp    c0103f9d <do_pgfault+0x1a9>
+	    } else {
+            	cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+c0103f85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0103f88:	8b 00                	mov    (%eax),%eax
+c0103f8a:	83 ec 08             	sub    $0x8,%esp
+c0103f8d:	50                   	push   %eax
+c0103f8e:	68 50 95 10 c0       	push   $0xc0109550
+c0103f93:	e8 de c2 ff ff       	call   c0100276 <cprintf>
+c0103f98:	83 c4 10             	add    $0x10,%esp
+            	goto failed;
+c0103f9b:	eb 07                	jmp    c0103fa4 <do_pgfault+0x1b0>
+	    }
+    }
+
+   ret = 0;
+c0103f9d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+failed:
+    return ret;
+c0103fa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0103fa7:	c9                   	leave  
+c0103fa8:	c3                   	ret    
+
+c0103fa9 <_fifo_init_mm>:
+ * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
+ *              Now, From the memory control struct mm_struct, we can access FIFO PRA
+ */
+static int
+_fifo_init_mm(struct mm_struct *mm)
+{     
+c0103fa9:	55                   	push   %ebp
+c0103faa:	89 e5                	mov    %esp,%ebp
+c0103fac:	83 ec 10             	sub    $0x10,%esp
+c0103faf:	c7 45 fc 74 1a 12 c0 	movl   $0xc0121a74,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0103fb6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0103fb9:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0103fbc:	89 50 04             	mov    %edx,0x4(%eax)
+c0103fbf:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0103fc2:	8b 50 04             	mov    0x4(%eax),%edx
+c0103fc5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0103fc8:	89 10                	mov    %edx,(%eax)
+     list_init(&pra_list_head);
+     mm->sm_priv = &pra_list_head;
+c0103fca:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103fcd:	c7 40 14 74 1a 12 c0 	movl   $0xc0121a74,0x14(%eax)
+     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
+     return 0;
+c0103fd4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0103fd9:	c9                   	leave  
+c0103fda:	c3                   	ret    
+
+c0103fdb <_fifo_map_swappable>:
+/*
+ * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
+ */
+static int
+_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c0103fdb:	55                   	push   %ebp
+c0103fdc:	89 e5                	mov    %esp,%ebp
+c0103fde:	83 ec 28             	sub    $0x28,%esp
+    list_entry_t *head=(list_entry_t*) mm->sm_priv;
+c0103fe1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103fe4:	8b 40 14             	mov    0x14(%eax),%eax
+c0103fe7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    list_entry_t *entry=&(page->pra_page_link);
+c0103fea:	8b 45 10             	mov    0x10(%ebp),%eax
+c0103fed:	83 c0 14             	add    $0x14,%eax
+c0103ff0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 
+    assert(entry != NULL && head != NULL);
+c0103ff3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0103ff7:	74 06                	je     c0103fff <_fifo_map_swappable+0x24>
+c0103ff9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103ffd:	75 1b                	jne    c010401a <_fifo_map_swappable+0x3f>
+c0103fff:	e8 46 ca ff ff       	call   c0100a4a <print_stackframe>
+c0104004:	68 78 95 10 c0       	push   $0xc0109578
+c0104009:	68 96 95 10 c0       	push   $0xc0109596
+c010400e:	6a 32                	push   $0x32
+c0104010:	68 ab 95 10 c0       	push   $0xc01095ab
+c0104015:	e8 c2 c3 ff ff       	call   c01003dc <__panic>
+c010401a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010401d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0104020:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104023:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0104026:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104029:	8b 00                	mov    (%eax),%eax
+c010402b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010402e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c0104031:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0104034:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104037:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010403a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010403d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0104040:	89 10                	mov    %edx,(%eax)
+c0104042:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0104045:	8b 10                	mov    (%eax),%edx
+c0104047:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010404a:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010404d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104050:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0104053:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0104056:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104059:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010405c:	89 10                	mov    %edx,(%eax)
+    //record the page access situlation
+    /*LAB3 EXERCISE 2: 2015011358*/ 
+    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add_before(head, entry);
+    return 0;
+c010405e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0104063:	c9                   	leave  
+c0104064:	c3                   	ret    
+
+c0104065 <_fifo_swap_out_victim>:
+ *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
+ *                            then set the addr of addr of this page to ptr_page.
+ */
+static int
+_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
+{
+c0104065:	55                   	push   %ebp
+c0104066:	89 e5                	mov    %esp,%ebp
+c0104068:	83 ec 28             	sub    $0x28,%esp
+     list_entry_t *head=(list_entry_t*) mm->sm_priv;
+c010406b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010406e:	8b 40 14             	mov    0x14(%eax),%eax
+c0104071:	89 45 f4             	mov    %eax,-0xc(%ebp)
+         assert(head != NULL);
+c0104074:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104078:	75 1b                	jne    c0104095 <_fifo_swap_out_victim+0x30>
+c010407a:	e8 cb c9 ff ff       	call   c0100a4a <print_stackframe>
+c010407f:	68 bf 95 10 c0       	push   $0xc01095bf
+c0104084:	68 96 95 10 c0       	push   $0xc0109596
+c0104089:	6a 41                	push   $0x41
+c010408b:	68 ab 95 10 c0       	push   $0xc01095ab
+c0104090:	e8 47 c3 ff ff       	call   c01003dc <__panic>
+     assert(in_tick==0);
+c0104095:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0104099:	74 1b                	je     c01040b6 <_fifo_swap_out_victim+0x51>
+c010409b:	e8 aa c9 ff ff       	call   c0100a4a <print_stackframe>
+c01040a0:	68 cc 95 10 c0       	push   $0xc01095cc
+c01040a5:	68 96 95 10 c0       	push   $0xc0109596
+c01040aa:	6a 42                	push   $0x42
+c01040ac:	68 ab 95 10 c0       	push   $0xc01095ab
+c01040b1:	e8 26 c3 ff ff       	call   c01003dc <__panic>
+c01040b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01040b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01040bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01040bf:	8b 40 04             	mov    0x4(%eax),%eax
+     /* Select the victim */
+     /*LAB3 EXERCISE 2: 2015011358*/ 
+     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
+     //(2)  set the addr of addr of this page to ptr_page
+     list_entry_t *le = list_next(head);
+c01040c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+     assert(le != head); // assert that the queue is not empty
+c01040c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01040c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01040cb:	75 1b                	jne    c01040e8 <_fifo_swap_out_victim+0x83>
+c01040cd:	e8 78 c9 ff ff       	call   c0100a4a <print_stackframe>
+c01040d2:	68 d7 95 10 c0       	push   $0xc01095d7
+c01040d7:	68 96 95 10 c0       	push   $0xc0109596
+c01040dc:	6a 48                	push   $0x48
+c01040de:	68 ab 95 10 c0       	push   $0xc01095ab
+c01040e3:	e8 f4 c2 ff ff       	call   c01003dc <__panic>
+     struct Page *page = le2page(le, pra_page_link);
+c01040e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01040eb:	83 e8 14             	sub    $0x14,%eax
+c01040ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c01040f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01040f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c01040f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01040fa:	8b 40 04             	mov    0x4(%eax),%eax
+c01040fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104100:	8b 12                	mov    (%edx),%edx
+c0104102:	89 55 e0             	mov    %edx,-0x20(%ebp)
+c0104105:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0104108:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010410b:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010410e:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0104111:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0104114:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0104117:	89 10                	mov    %edx,(%eax)
+     list_del(le);
+     *ptr_page = page;
+c0104119:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010411c:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010411f:	89 10                	mov    %edx,(%eax)
+     return 0;
+c0104121:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0104126:	c9                   	leave  
+c0104127:	c3                   	ret    
+
+c0104128 <_fifo_check_swap>:
+
+static int
+_fifo_check_swap(void) {
+c0104128:	55                   	push   %ebp
+c0104129:	89 e5                	mov    %esp,%ebp
+c010412b:	83 ec 08             	sub    $0x8,%esp
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c010412e:	83 ec 0c             	sub    $0xc,%esp
+c0104131:	68 e4 95 10 c0       	push   $0xc01095e4
+c0104136:	e8 3b c1 ff ff       	call   c0100276 <cprintf>
+c010413b:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x3000 = 0x0c;
+c010413e:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0104143:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num==4);
+c0104146:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c010414b:	83 f8 04             	cmp    $0x4,%eax
+c010414e:	74 1b                	je     c010416b <_fifo_check_swap+0x43>
+c0104150:	e8 f5 c8 ff ff       	call   c0100a4a <print_stackframe>
+c0104155:	68 0a 96 10 c0       	push   $0xc010960a
+c010415a:	68 96 95 10 c0       	push   $0xc0109596
+c010415f:	6a 53                	push   $0x53
+c0104161:	68 ab 95 10 c0       	push   $0xc01095ab
+c0104166:	e8 71 c2 ff ff       	call   c01003dc <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c010416b:	83 ec 0c             	sub    $0xc,%esp
+c010416e:	68 1c 96 10 c0       	push   $0xc010961c
+c0104173:	e8 fe c0 ff ff       	call   c0100276 <cprintf>
+c0104178:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x1000 = 0x0a;
+c010417b:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0104180:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==4);
+c0104183:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c0104188:	83 f8 04             	cmp    $0x4,%eax
+c010418b:	74 1b                	je     c01041a8 <_fifo_check_swap+0x80>
+c010418d:	e8 b8 c8 ff ff       	call   c0100a4a <print_stackframe>
+c0104192:	68 0a 96 10 c0       	push   $0xc010960a
+c0104197:	68 96 95 10 c0       	push   $0xc0109596
+c010419c:	6a 56                	push   $0x56
+c010419e:	68 ab 95 10 c0       	push   $0xc01095ab
+c01041a3:	e8 34 c2 ff ff       	call   c01003dc <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c01041a8:	83 ec 0c             	sub    $0xc,%esp
+c01041ab:	68 44 96 10 c0       	push   $0xc0109644
+c01041b0:	e8 c1 c0 ff ff       	call   c0100276 <cprintf>
+c01041b5:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x4000 = 0x0d;
+c01041b8:	b8 00 40 00 00       	mov    $0x4000,%eax
+c01041bd:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num==4);
+c01041c0:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c01041c5:	83 f8 04             	cmp    $0x4,%eax
+c01041c8:	74 1b                	je     c01041e5 <_fifo_check_swap+0xbd>
+c01041ca:	e8 7b c8 ff ff       	call   c0100a4a <print_stackframe>
+c01041cf:	68 0a 96 10 c0       	push   $0xc010960a
+c01041d4:	68 96 95 10 c0       	push   $0xc0109596
+c01041d9:	6a 59                	push   $0x59
+c01041db:	68 ab 95 10 c0       	push   $0xc01095ab
+c01041e0:	e8 f7 c1 ff ff       	call   c01003dc <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c01041e5:	83 ec 0c             	sub    $0xc,%esp
+c01041e8:	68 6c 96 10 c0       	push   $0xc010966c
+c01041ed:	e8 84 c0 ff ff       	call   c0100276 <cprintf>
+c01041f2:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x2000 = 0x0b;
+c01041f5:	b8 00 20 00 00       	mov    $0x2000,%eax
+c01041fa:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==4);
+c01041fd:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c0104202:	83 f8 04             	cmp    $0x4,%eax
+c0104205:	74 1b                	je     c0104222 <_fifo_check_swap+0xfa>
+c0104207:	e8 3e c8 ff ff       	call   c0100a4a <print_stackframe>
+c010420c:	68 0a 96 10 c0       	push   $0xc010960a
+c0104211:	68 96 95 10 c0       	push   $0xc0109596
+c0104216:	6a 5c                	push   $0x5c
+c0104218:	68 ab 95 10 c0       	push   $0xc01095ab
+c010421d:	e8 ba c1 ff ff       	call   c01003dc <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c0104222:	83 ec 0c             	sub    $0xc,%esp
+c0104225:	68 94 96 10 c0       	push   $0xc0109694
+c010422a:	e8 47 c0 ff ff       	call   c0100276 <cprintf>
+c010422f:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x5000 = 0x0e;
+c0104232:	b8 00 50 00 00       	mov    $0x5000,%eax
+c0104237:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num==5);
+c010423a:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c010423f:	83 f8 05             	cmp    $0x5,%eax
+c0104242:	74 1b                	je     c010425f <_fifo_check_swap+0x137>
+c0104244:	e8 01 c8 ff ff       	call   c0100a4a <print_stackframe>
+c0104249:	68 ba 96 10 c0       	push   $0xc01096ba
+c010424e:	68 96 95 10 c0       	push   $0xc0109596
+c0104253:	6a 5f                	push   $0x5f
+c0104255:	68 ab 95 10 c0       	push   $0xc01095ab
+c010425a:	e8 7d c1 ff ff       	call   c01003dc <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c010425f:	83 ec 0c             	sub    $0xc,%esp
+c0104262:	68 6c 96 10 c0       	push   $0xc010966c
+c0104267:	e8 0a c0 ff ff       	call   c0100276 <cprintf>
+c010426c:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x2000 = 0x0b;
+c010426f:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0104274:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==5);
+c0104277:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c010427c:	83 f8 05             	cmp    $0x5,%eax
+c010427f:	74 1b                	je     c010429c <_fifo_check_swap+0x174>
+c0104281:	e8 c4 c7 ff ff       	call   c0100a4a <print_stackframe>
+c0104286:	68 ba 96 10 c0       	push   $0xc01096ba
+c010428b:	68 96 95 10 c0       	push   $0xc0109596
+c0104290:	6a 62                	push   $0x62
+c0104292:	68 ab 95 10 c0       	push   $0xc01095ab
+c0104297:	e8 40 c1 ff ff       	call   c01003dc <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c010429c:	83 ec 0c             	sub    $0xc,%esp
+c010429f:	68 1c 96 10 c0       	push   $0xc010961c
+c01042a4:	e8 cd bf ff ff       	call   c0100276 <cprintf>
+c01042a9:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x1000 = 0x0a;
+c01042ac:	b8 00 10 00 00       	mov    $0x1000,%eax
+c01042b1:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==6);
+c01042b4:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c01042b9:	83 f8 06             	cmp    $0x6,%eax
+c01042bc:	74 1b                	je     c01042d9 <_fifo_check_swap+0x1b1>
+c01042be:	e8 87 c7 ff ff       	call   c0100a4a <print_stackframe>
+c01042c3:	68 c9 96 10 c0       	push   $0xc01096c9
+c01042c8:	68 96 95 10 c0       	push   $0xc0109596
+c01042cd:	6a 65                	push   $0x65
+c01042cf:	68 ab 95 10 c0       	push   $0xc01095ab
+c01042d4:	e8 03 c1 ff ff       	call   c01003dc <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c01042d9:	83 ec 0c             	sub    $0xc,%esp
+c01042dc:	68 6c 96 10 c0       	push   $0xc010966c
+c01042e1:	e8 90 bf ff ff       	call   c0100276 <cprintf>
+c01042e6:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x2000 = 0x0b;
+c01042e9:	b8 00 20 00 00       	mov    $0x2000,%eax
+c01042ee:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==7);
+c01042f1:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c01042f6:	83 f8 07             	cmp    $0x7,%eax
+c01042f9:	74 1b                	je     c0104316 <_fifo_check_swap+0x1ee>
+c01042fb:	e8 4a c7 ff ff       	call   c0100a4a <print_stackframe>
+c0104300:	68 d8 96 10 c0       	push   $0xc01096d8
+c0104305:	68 96 95 10 c0       	push   $0xc0109596
+c010430a:	6a 68                	push   $0x68
+c010430c:	68 ab 95 10 c0       	push   $0xc01095ab
+c0104311:	e8 c6 c0 ff ff       	call   c01003dc <__panic>
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c0104316:	83 ec 0c             	sub    $0xc,%esp
+c0104319:	68 e4 95 10 c0       	push   $0xc01095e4
+c010431e:	e8 53 bf ff ff       	call   c0100276 <cprintf>
+c0104323:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x3000 = 0x0c;
+c0104326:	b8 00 30 00 00       	mov    $0x3000,%eax
+c010432b:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num==8);
+c010432e:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c0104333:	83 f8 08             	cmp    $0x8,%eax
+c0104336:	74 1b                	je     c0104353 <_fifo_check_swap+0x22b>
+c0104338:	e8 0d c7 ff ff       	call   c0100a4a <print_stackframe>
+c010433d:	68 e7 96 10 c0       	push   $0xc01096e7
+c0104342:	68 96 95 10 c0       	push   $0xc0109596
+c0104347:	6a 6b                	push   $0x6b
+c0104349:	68 ab 95 10 c0       	push   $0xc01095ab
+c010434e:	e8 89 c0 ff ff       	call   c01003dc <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c0104353:	83 ec 0c             	sub    $0xc,%esp
+c0104356:	68 44 96 10 c0       	push   $0xc0109644
+c010435b:	e8 16 bf ff ff       	call   c0100276 <cprintf>
+c0104360:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x4000 = 0x0d;
+c0104363:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0104368:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num==9);
+c010436b:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c0104370:	83 f8 09             	cmp    $0x9,%eax
+c0104373:	74 1b                	je     c0104390 <_fifo_check_swap+0x268>
+c0104375:	e8 d0 c6 ff ff       	call   c0100a4a <print_stackframe>
+c010437a:	68 f6 96 10 c0       	push   $0xc01096f6
+c010437f:	68 96 95 10 c0       	push   $0xc0109596
+c0104384:	6a 6e                	push   $0x6e
+c0104386:	68 ab 95 10 c0       	push   $0xc01095ab
+c010438b:	e8 4c c0 ff ff       	call   c01003dc <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c0104390:	83 ec 0c             	sub    $0xc,%esp
+c0104393:	68 94 96 10 c0       	push   $0xc0109694
+c0104398:	e8 d9 be ff ff       	call   c0100276 <cprintf>
+c010439d:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x5000 = 0x0e;
+c01043a0:	b8 00 50 00 00       	mov    $0x5000,%eax
+c01043a5:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num==10);
+c01043a8:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c01043ad:	83 f8 0a             	cmp    $0xa,%eax
+c01043b0:	74 1b                	je     c01043cd <_fifo_check_swap+0x2a5>
+c01043b2:	e8 93 c6 ff ff       	call   c0100a4a <print_stackframe>
+c01043b7:	68 05 97 10 c0       	push   $0xc0109705
+c01043bc:	68 96 95 10 c0       	push   $0xc0109596
+c01043c1:	6a 71                	push   $0x71
+c01043c3:	68 ab 95 10 c0       	push   $0xc01095ab
+c01043c8:	e8 0f c0 ff ff       	call   c01003dc <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c01043cd:	83 ec 0c             	sub    $0xc,%esp
+c01043d0:	68 1c 96 10 c0       	push   $0xc010961c
+c01043d5:	e8 9c be ff ff       	call   c0100276 <cprintf>
+c01043da:	83 c4 10             	add    $0x10,%esp
+    assert(*(unsigned char *)0x1000 == 0x0a);
+c01043dd:	b8 00 10 00 00       	mov    $0x1000,%eax
+c01043e2:	0f b6 00             	movzbl (%eax),%eax
+c01043e5:	3c 0a                	cmp    $0xa,%al
+c01043e7:	74 1b                	je     c0104404 <_fifo_check_swap+0x2dc>
+c01043e9:	e8 5c c6 ff ff       	call   c0100a4a <print_stackframe>
+c01043ee:	68 18 97 10 c0       	push   $0xc0109718
+c01043f3:	68 96 95 10 c0       	push   $0xc0109596
+c01043f8:	6a 73                	push   $0x73
+c01043fa:	68 ab 95 10 c0       	push   $0xc01095ab
+c01043ff:	e8 d8 bf ff ff       	call   c01003dc <__panic>
+    *(unsigned char *)0x1000 = 0x0a;
+c0104404:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0104409:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==11);
+c010440c:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c0104411:	83 f8 0b             	cmp    $0xb,%eax
+c0104414:	74 1b                	je     c0104431 <_fifo_check_swap+0x309>
+c0104416:	e8 2f c6 ff ff       	call   c0100a4a <print_stackframe>
+c010441b:	68 39 97 10 c0       	push   $0xc0109739
+c0104420:	68 96 95 10 c0       	push   $0xc0109596
+c0104425:	6a 75                	push   $0x75
+c0104427:	68 ab 95 10 c0       	push   $0xc01095ab
+c010442c:	e8 ab bf ff ff       	call   c01003dc <__panic>
+    return 0;
+c0104431:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0104436:	c9                   	leave  
+c0104437:	c3                   	ret    
+
+c0104438 <_fifo_init>:
+
+
+static int
+_fifo_init(void)
+{
+c0104438:	55                   	push   %ebp
+c0104439:	89 e5                	mov    %esp,%ebp
+    return 0;
+c010443b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0104440:	5d                   	pop    %ebp
+c0104441:	c3                   	ret    
+
+c0104442 <_fifo_set_unswappable>:
+
+static int
+_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c0104442:	55                   	push   %ebp
+c0104443:	89 e5                	mov    %esp,%ebp
+    return 0;
+c0104445:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010444a:	5d                   	pop    %ebp
+c010444b:	c3                   	ret    
+
+c010444c <_fifo_tick_event>:
+
+static int
+_fifo_tick_event(struct mm_struct *mm)
+{ return 0; }
+c010444c:	55                   	push   %ebp
+c010444d:	89 e5                	mov    %esp,%ebp
+c010444f:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104454:	5d                   	pop    %ebp
+c0104455:	c3                   	ret    
+
+c0104456 <pa2page>:
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0104456:	55                   	push   %ebp
+c0104457:	89 e5                	mov    %esp,%ebp
+c0104459:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c010445c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010445f:	c1 e8 0c             	shr    $0xc,%eax
+c0104462:	89 c2                	mov    %eax,%edx
+c0104464:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c0104469:	39 c2                	cmp    %eax,%edx
+c010446b:	72 19                	jb     c0104486 <pa2page+0x30>
+        panic("pa2page called with invalid pa");
+c010446d:	e8 d8 c5 ff ff       	call   c0100a4a <print_stackframe>
+c0104472:	83 ec 04             	sub    $0x4,%esp
+c0104475:	68 5c 97 10 c0       	push   $0xc010975c
+c010447a:	6a 5b                	push   $0x5b
+c010447c:	68 7b 97 10 c0       	push   $0xc010977b
+c0104481:	e8 56 bf ff ff       	call   c01003dc <__panic>
+    }
+    return &pages[PPN(pa)];
+c0104486:	a1 58 1b 12 c0       	mov    0xc0121b58,%eax
+c010448b:	8b 55 08             	mov    0x8(%ebp),%edx
+c010448e:	c1 ea 0c             	shr    $0xc,%edx
+c0104491:	c1 e2 05             	shl    $0x5,%edx
+c0104494:	01 d0                	add    %edx,%eax
+}
+c0104496:	c9                   	leave  
+c0104497:	c3                   	ret    
+
+c0104498 <pte2page>:
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c0104498:	55                   	push   %ebp
+c0104499:	89 e5                	mov    %esp,%ebp
+c010449b:	83 ec 08             	sub    $0x8,%esp
+    if (!(pte & PTE_P)) {
+c010449e:	8b 45 08             	mov    0x8(%ebp),%eax
+c01044a1:	83 e0 01             	and    $0x1,%eax
+c01044a4:	85 c0                	test   %eax,%eax
+c01044a6:	75 19                	jne    c01044c1 <pte2page+0x29>
+        panic("pte2page called with invalid pte");
+c01044a8:	e8 9d c5 ff ff       	call   c0100a4a <print_stackframe>
+c01044ad:	83 ec 04             	sub    $0x4,%esp
+c01044b0:	68 8c 97 10 c0       	push   $0xc010978c
+c01044b5:	6a 6d                	push   $0x6d
+c01044b7:	68 7b 97 10 c0       	push   $0xc010977b
+c01044bc:	e8 1b bf ff ff       	call   c01003dc <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c01044c1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01044c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01044c9:	83 ec 0c             	sub    $0xc,%esp
+c01044cc:	50                   	push   %eax
+c01044cd:	e8 84 ff ff ff       	call   c0104456 <pa2page>
+c01044d2:	83 c4 10             	add    $0x10,%esp
+}
+c01044d5:	c9                   	leave  
+c01044d6:	c3                   	ret    
+
+c01044d7 <swap_init>:
+
+static void check_swap(void);
+
+int
+swap_init(void)
+{
+c01044d7:	55                   	push   %ebp
+c01044d8:	89 e5                	mov    %esp,%ebp
+c01044da:	83 ec 18             	sub    $0x18,%esp
+     swapfs_init();
+c01044dd:	e8 13 37 00 00       	call   c0107bf5 <swapfs_init>
+
+     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
+c01044e2:	a1 1c 1b 12 c0       	mov    0xc0121b1c,%eax
+c01044e7:	3d ff 03 00 00       	cmp    $0x3ff,%eax
+c01044ec:	76 0c                	jbe    c01044fa <swap_init+0x23>
+c01044ee:	a1 1c 1b 12 c0       	mov    0xc0121b1c,%eax
+c01044f3:	3d ff ff ff 00       	cmp    $0xffffff,%eax
+c01044f8:	76 1c                	jbe    c0104516 <swap_init+0x3f>
+     {
+          panic("bad max_swap_offset %08x.\n", max_swap_offset);
+c01044fa:	e8 4b c5 ff ff       	call   c0100a4a <print_stackframe>
+c01044ff:	a1 1c 1b 12 c0       	mov    0xc0121b1c,%eax
+c0104504:	50                   	push   %eax
+c0104505:	68 ad 97 10 c0       	push   $0xc01097ad
+c010450a:	6a 25                	push   $0x25
+c010450c:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104511:	e8 c6 be ff ff       	call   c01003dc <__panic>
+     }
+     
+
+     sm = &swap_manager_fifo;
+c0104516:	c7 05 d4 19 12 c0 00 	movl   $0xc0120a00,0xc01219d4
+c010451d:	0a 12 c0 
+     int r = sm->init();
+c0104520:	a1 d4 19 12 c0       	mov    0xc01219d4,%eax
+c0104525:	8b 40 04             	mov    0x4(%eax),%eax
+c0104528:	ff d0                	call   *%eax
+c010452a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     
+     if (r == 0)
+c010452d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104531:	75 27                	jne    c010455a <swap_init+0x83>
+     {
+          swap_init_ok = 1;
+c0104533:	c7 05 cc 19 12 c0 01 	movl   $0x1,0xc01219cc
+c010453a:	00 00 00 
+          cprintf("SWAP: manager = %s\n", sm->name);
+c010453d:	a1 d4 19 12 c0       	mov    0xc01219d4,%eax
+c0104542:	8b 00                	mov    (%eax),%eax
+c0104544:	83 ec 08             	sub    $0x8,%esp
+c0104547:	50                   	push   %eax
+c0104548:	68 d7 97 10 c0       	push   $0xc01097d7
+c010454d:	e8 24 bd ff ff       	call   c0100276 <cprintf>
+c0104552:	83 c4 10             	add    $0x10,%esp
+          check_swap();
+c0104555:	e8 2e 04 00 00       	call   c0104988 <check_swap>
+     }
+
+     return r;
+c010455a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010455d:	c9                   	leave  
+c010455e:	c3                   	ret    
+
+c010455f <swap_init_mm>:
+
+int
+swap_init_mm(struct mm_struct *mm)
+{
+c010455f:	55                   	push   %ebp
+c0104560:	89 e5                	mov    %esp,%ebp
+c0104562:	83 ec 08             	sub    $0x8,%esp
+     return sm->init_mm(mm);
+c0104565:	a1 d4 19 12 c0       	mov    0xc01219d4,%eax
+c010456a:	8b 40 08             	mov    0x8(%eax),%eax
+c010456d:	83 ec 0c             	sub    $0xc,%esp
+c0104570:	ff 75 08             	pushl  0x8(%ebp)
+c0104573:	ff d0                	call   *%eax
+c0104575:	83 c4 10             	add    $0x10,%esp
+}
+c0104578:	c9                   	leave  
+c0104579:	c3                   	ret    
+
+c010457a <swap_tick_event>:
+
+int
+swap_tick_event(struct mm_struct *mm)
+{
+c010457a:	55                   	push   %ebp
+c010457b:	89 e5                	mov    %esp,%ebp
+c010457d:	83 ec 08             	sub    $0x8,%esp
+     return sm->tick_event(mm);
+c0104580:	a1 d4 19 12 c0       	mov    0xc01219d4,%eax
+c0104585:	8b 40 0c             	mov    0xc(%eax),%eax
+c0104588:	83 ec 0c             	sub    $0xc,%esp
+c010458b:	ff 75 08             	pushl  0x8(%ebp)
+c010458e:	ff d0                	call   *%eax
+c0104590:	83 c4 10             	add    $0x10,%esp
+}
+c0104593:	c9                   	leave  
+c0104594:	c3                   	ret    
+
+c0104595 <swap_map_swappable>:
+
+int
+swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c0104595:	55                   	push   %ebp
+c0104596:	89 e5                	mov    %esp,%ebp
+c0104598:	83 ec 08             	sub    $0x8,%esp
+     return sm->map_swappable(mm, addr, page, swap_in);
+c010459b:	a1 d4 19 12 c0       	mov    0xc01219d4,%eax
+c01045a0:	8b 40 10             	mov    0x10(%eax),%eax
+c01045a3:	ff 75 14             	pushl  0x14(%ebp)
+c01045a6:	ff 75 10             	pushl  0x10(%ebp)
+c01045a9:	ff 75 0c             	pushl  0xc(%ebp)
+c01045ac:	ff 75 08             	pushl  0x8(%ebp)
+c01045af:	ff d0                	call   *%eax
+c01045b1:	83 c4 10             	add    $0x10,%esp
+}
+c01045b4:	c9                   	leave  
+c01045b5:	c3                   	ret    
+
+c01045b6 <swap_set_unswappable>:
+
+int
+swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c01045b6:	55                   	push   %ebp
+c01045b7:	89 e5                	mov    %esp,%ebp
+c01045b9:	83 ec 08             	sub    $0x8,%esp
+     return sm->set_unswappable(mm, addr);
+c01045bc:	a1 d4 19 12 c0       	mov    0xc01219d4,%eax
+c01045c1:	8b 40 14             	mov    0x14(%eax),%eax
+c01045c4:	83 ec 08             	sub    $0x8,%esp
+c01045c7:	ff 75 0c             	pushl  0xc(%ebp)
+c01045ca:	ff 75 08             	pushl  0x8(%ebp)
+c01045cd:	ff d0                	call   *%eax
+c01045cf:	83 c4 10             	add    $0x10,%esp
+}
+c01045d2:	c9                   	leave  
+c01045d3:	c3                   	ret    
+
+c01045d4 <swap_out>:
+
+volatile unsigned int swap_out_num=0;
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+c01045d4:	55                   	push   %ebp
+c01045d5:	89 e5                	mov    %esp,%ebp
+c01045d7:	83 ec 28             	sub    $0x28,%esp
+     int i;
+     for (i = 0; i != n; ++ i)
+c01045da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01045e1:	e9 33 01 00 00       	jmp    c0104719 <swap_out+0x145>
+     {
+          uintptr_t v;
+          //struct Page **ptr_page=NULL;
+          struct Page *page;
+          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
+          int r = sm->swap_out_victim(mm, &page, in_tick);
+c01045e6:	a1 d4 19 12 c0       	mov    0xc01219d4,%eax
+c01045eb:	8b 40 18             	mov    0x18(%eax),%eax
+c01045ee:	83 ec 04             	sub    $0x4,%esp
+c01045f1:	ff 75 10             	pushl  0x10(%ebp)
+c01045f4:	8d 55 e4             	lea    -0x1c(%ebp),%edx
+c01045f7:	52                   	push   %edx
+c01045f8:	ff 75 08             	pushl  0x8(%ebp)
+c01045fb:	ff d0                	call   *%eax
+c01045fd:	83 c4 10             	add    $0x10,%esp
+c0104600:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          if (r != 0) {
+c0104603:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104607:	74 18                	je     c0104621 <swap_out+0x4d>
+                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
+c0104609:	83 ec 08             	sub    $0x8,%esp
+c010460c:	ff 75 f4             	pushl  -0xc(%ebp)
+c010460f:	68 ec 97 10 c0       	push   $0xc01097ec
+c0104614:	e8 5d bc ff ff       	call   c0100276 <cprintf>
+c0104619:	83 c4 10             	add    $0x10,%esp
+c010461c:	e9 04 01 00 00       	jmp    c0104725 <swap_out+0x151>
+          }          
+          //assert(!PageReserved(page));
+
+          //cprintf("SWAP: choose victim page 0x%08x\n", page);
+          
+          v=page->pra_vaddr; 
+c0104621:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104624:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0104627:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          pte_t *ptep = get_pte(mm->pgdir, v, 0);
+c010462a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010462d:	8b 40 0c             	mov    0xc(%eax),%eax
+c0104630:	83 ec 04             	sub    $0x4,%esp
+c0104633:	6a 00                	push   $0x0
+c0104635:	ff 75 ec             	pushl  -0x14(%ebp)
+c0104638:	50                   	push   %eax
+c0104639:	e8 4f 24 00 00       	call   c0106a8d <get_pte>
+c010463e:	83 c4 10             	add    $0x10,%esp
+c0104641:	89 45 e8             	mov    %eax,-0x18(%ebp)
+          assert((*ptep & PTE_P) != 0);
+c0104644:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104647:	8b 00                	mov    (%eax),%eax
+c0104649:	83 e0 01             	and    $0x1,%eax
+c010464c:	85 c0                	test   %eax,%eax
+c010464e:	75 1b                	jne    c010466b <swap_out+0x97>
+c0104650:	e8 f5 c3 ff ff       	call   c0100a4a <print_stackframe>
+c0104655:	68 19 98 10 c0       	push   $0xc0109819
+c010465a:	68 2e 98 10 c0       	push   $0xc010982e
+c010465f:	6a 65                	push   $0x65
+c0104661:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104666:	e8 71 bd ff ff       	call   c01003dc <__panic>
+
+          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
+c010466b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010466e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0104671:	8b 52 1c             	mov    0x1c(%edx),%edx
+c0104674:	c1 ea 0c             	shr    $0xc,%edx
+c0104677:	83 c2 01             	add    $0x1,%edx
+c010467a:	c1 e2 08             	shl    $0x8,%edx
+c010467d:	83 ec 08             	sub    $0x8,%esp
+c0104680:	50                   	push   %eax
+c0104681:	52                   	push   %edx
+c0104682:	e8 14 36 00 00       	call   c0107c9b <swapfs_write>
+c0104687:	83 c4 10             	add    $0x10,%esp
+c010468a:	85 c0                	test   %eax,%eax
+c010468c:	74 2b                	je     c01046b9 <swap_out+0xe5>
+                    cprintf("SWAP: failed to save\n");
+c010468e:	83 ec 0c             	sub    $0xc,%esp
+c0104691:	68 43 98 10 c0       	push   $0xc0109843
+c0104696:	e8 db bb ff ff       	call   c0100276 <cprintf>
+c010469b:	83 c4 10             	add    $0x10,%esp
+                    sm->map_swappable(mm, v, page, 0);
+c010469e:	a1 d4 19 12 c0       	mov    0xc01219d4,%eax
+c01046a3:	8b 40 10             	mov    0x10(%eax),%eax
+c01046a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01046a9:	6a 00                	push   $0x0
+c01046ab:	52                   	push   %edx
+c01046ac:	ff 75 ec             	pushl  -0x14(%ebp)
+c01046af:	ff 75 08             	pushl  0x8(%ebp)
+c01046b2:	ff d0                	call   *%eax
+c01046b4:	83 c4 10             	add    $0x10,%esp
+c01046b7:	eb 5c                	jmp    c0104715 <swap_out+0x141>
+                    continue;
+          }
+          else {
+                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
+c01046b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01046bc:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01046bf:	c1 e8 0c             	shr    $0xc,%eax
+c01046c2:	83 c0 01             	add    $0x1,%eax
+c01046c5:	50                   	push   %eax
+c01046c6:	ff 75 ec             	pushl  -0x14(%ebp)
+c01046c9:	ff 75 f4             	pushl  -0xc(%ebp)
+c01046cc:	68 5c 98 10 c0       	push   $0xc010985c
+c01046d1:	e8 a0 bb ff ff       	call   c0100276 <cprintf>
+c01046d6:	83 c4 10             	add    $0x10,%esp
+                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
+c01046d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01046dc:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01046df:	c1 e8 0c             	shr    $0xc,%eax
+c01046e2:	83 c0 01             	add    $0x1,%eax
+c01046e5:	c1 e0 08             	shl    $0x8,%eax
+c01046e8:	89 c2                	mov    %eax,%edx
+c01046ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01046ed:	89 10                	mov    %edx,(%eax)
+                    free_page(page);
+c01046ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01046f2:	83 ec 08             	sub    $0x8,%esp
+c01046f5:	6a 01                	push   $0x1
+c01046f7:	50                   	push   %eax
+c01046f8:	e8 f8 1c 00 00       	call   c01063f5 <free_pages>
+c01046fd:	83 c4 10             	add    $0x10,%esp
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+c0104700:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104703:	8b 40 0c             	mov    0xc(%eax),%eax
+c0104706:	83 ec 08             	sub    $0x8,%esp
+c0104709:	ff 75 ec             	pushl  -0x14(%ebp)
+c010470c:	50                   	push   %eax
+c010470d:	e8 ae 26 00 00       	call   c0106dc0 <tlb_invalidate>
+c0104712:	83 c4 10             	add    $0x10,%esp
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+     int i;
+     for (i = 0; i != n; ++ i)
+c0104715:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0104719:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010471c:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010471f:	0f 85 c1 fe ff ff    	jne    c01045e6 <swap_out+0x12>
+                    free_page(page);
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+     }
+     return i;
+c0104725:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0104728:	c9                   	leave  
+c0104729:	c3                   	ret    
+
+c010472a <swap_in>:
+
+int
+swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
+{
+c010472a:	55                   	push   %ebp
+c010472b:	89 e5                	mov    %esp,%ebp
+c010472d:	83 ec 18             	sub    $0x18,%esp
+     struct Page *result = alloc_page();
+c0104730:	83 ec 0c             	sub    $0xc,%esp
+c0104733:	6a 01                	push   $0x1
+c0104735:	e8 4f 1c 00 00       	call   c0106389 <alloc_pages>
+c010473a:	83 c4 10             	add    $0x10,%esp
+c010473d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     assert(result!=NULL);
+c0104740:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104744:	75 1b                	jne    c0104761 <swap_in+0x37>
+c0104746:	e8 ff c2 ff ff       	call   c0100a4a <print_stackframe>
+c010474b:	68 9c 98 10 c0       	push   $0xc010989c
+c0104750:	68 2e 98 10 c0       	push   $0xc010982e
+c0104755:	6a 7b                	push   $0x7b
+c0104757:	68 c8 97 10 c0       	push   $0xc01097c8
+c010475c:	e8 7b bc ff ff       	call   c01003dc <__panic>
+
+     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
+c0104761:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104764:	8b 40 0c             	mov    0xc(%eax),%eax
+c0104767:	83 ec 04             	sub    $0x4,%esp
+c010476a:	6a 00                	push   $0x0
+c010476c:	ff 75 0c             	pushl  0xc(%ebp)
+c010476f:	50                   	push   %eax
+c0104770:	e8 18 23 00 00       	call   c0106a8d <get_pte>
+c0104775:	83 c4 10             	add    $0x10,%esp
+c0104778:	89 45 f0             	mov    %eax,-0x10(%ebp)
+     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
+    
+     int r;
+     if ((r = swapfs_read((*ptep), result)) != 0)
+c010477b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010477e:	8b 00                	mov    (%eax),%eax
+c0104780:	83 ec 08             	sub    $0x8,%esp
+c0104783:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104786:	50                   	push   %eax
+c0104787:	e8 b1 34 00 00       	call   c0107c3d <swapfs_read>
+c010478c:	83 c4 10             	add    $0x10,%esp
+c010478f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0104792:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0104796:	74 24                	je     c01047bc <swap_in+0x92>
+     {
+        assert(r!=0);
+c0104798:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010479c:	75 1e                	jne    c01047bc <swap_in+0x92>
+c010479e:	e8 a7 c2 ff ff       	call   c0100a4a <print_stackframe>
+c01047a3:	68 a9 98 10 c0       	push   $0xc01098a9
+c01047a8:	68 2e 98 10 c0       	push   $0xc010982e
+c01047ad:	68 83 00 00 00       	push   $0x83
+c01047b2:	68 c8 97 10 c0       	push   $0xc01097c8
+c01047b7:	e8 20 bc ff ff       	call   c01003dc <__panic>
+     }
+     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
+c01047bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01047bf:	8b 00                	mov    (%eax),%eax
+c01047c1:	c1 e8 08             	shr    $0x8,%eax
+c01047c4:	83 ec 04             	sub    $0x4,%esp
+c01047c7:	ff 75 0c             	pushl  0xc(%ebp)
+c01047ca:	50                   	push   %eax
+c01047cb:	68 b0 98 10 c0       	push   $0xc01098b0
+c01047d0:	e8 a1 ba ff ff       	call   c0100276 <cprintf>
+c01047d5:	83 c4 10             	add    $0x10,%esp
+     *ptr_result=result;
+c01047d8:	8b 45 10             	mov    0x10(%ebp),%eax
+c01047db:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01047de:	89 10                	mov    %edx,(%eax)
+     return 0;
+c01047e0:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01047e5:	c9                   	leave  
+c01047e6:	c3                   	ret    
+
+c01047e7 <check_content_set>:
+
+
+
+static inline void
+check_content_set(void)
+{
+c01047e7:	55                   	push   %ebp
+c01047e8:	89 e5                	mov    %esp,%ebp
+c01047ea:	83 ec 08             	sub    $0x8,%esp
+     *(unsigned char *)0x1000 = 0x0a;
+c01047ed:	b8 00 10 00 00       	mov    $0x1000,%eax
+c01047f2:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c01047f5:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c01047fa:	83 f8 01             	cmp    $0x1,%eax
+c01047fd:	74 1e                	je     c010481d <check_content_set+0x36>
+c01047ff:	e8 46 c2 ff ff       	call   c0100a4a <print_stackframe>
+c0104804:	68 ee 98 10 c0       	push   $0xc01098ee
+c0104809:	68 2e 98 10 c0       	push   $0xc010982e
+c010480e:	68 90 00 00 00       	push   $0x90
+c0104813:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104818:	e8 bf bb ff ff       	call   c01003dc <__panic>
+     *(unsigned char *)0x1010 = 0x0a;
+c010481d:	b8 10 10 00 00       	mov    $0x1010,%eax
+c0104822:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c0104825:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c010482a:	83 f8 01             	cmp    $0x1,%eax
+c010482d:	74 1e                	je     c010484d <check_content_set+0x66>
+c010482f:	e8 16 c2 ff ff       	call   c0100a4a <print_stackframe>
+c0104834:	68 ee 98 10 c0       	push   $0xc01098ee
+c0104839:	68 2e 98 10 c0       	push   $0xc010982e
+c010483e:	68 92 00 00 00       	push   $0x92
+c0104843:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104848:	e8 8f bb ff ff       	call   c01003dc <__panic>
+     *(unsigned char *)0x2000 = 0x0b;
+c010484d:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0104852:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c0104855:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c010485a:	83 f8 02             	cmp    $0x2,%eax
+c010485d:	74 1e                	je     c010487d <check_content_set+0x96>
+c010485f:	e8 e6 c1 ff ff       	call   c0100a4a <print_stackframe>
+c0104864:	68 fd 98 10 c0       	push   $0xc01098fd
+c0104869:	68 2e 98 10 c0       	push   $0xc010982e
+c010486e:	68 94 00 00 00       	push   $0x94
+c0104873:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104878:	e8 5f bb ff ff       	call   c01003dc <__panic>
+     *(unsigned char *)0x2010 = 0x0b;
+c010487d:	b8 10 20 00 00       	mov    $0x2010,%eax
+c0104882:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c0104885:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c010488a:	83 f8 02             	cmp    $0x2,%eax
+c010488d:	74 1e                	je     c01048ad <check_content_set+0xc6>
+c010488f:	e8 b6 c1 ff ff       	call   c0100a4a <print_stackframe>
+c0104894:	68 fd 98 10 c0       	push   $0xc01098fd
+c0104899:	68 2e 98 10 c0       	push   $0xc010982e
+c010489e:	68 96 00 00 00       	push   $0x96
+c01048a3:	68 c8 97 10 c0       	push   $0xc01097c8
+c01048a8:	e8 2f bb ff ff       	call   c01003dc <__panic>
+     *(unsigned char *)0x3000 = 0x0c;
+c01048ad:	b8 00 30 00 00       	mov    $0x3000,%eax
+c01048b2:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c01048b5:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c01048ba:	83 f8 03             	cmp    $0x3,%eax
+c01048bd:	74 1e                	je     c01048dd <check_content_set+0xf6>
+c01048bf:	e8 86 c1 ff ff       	call   c0100a4a <print_stackframe>
+c01048c4:	68 0c 99 10 c0       	push   $0xc010990c
+c01048c9:	68 2e 98 10 c0       	push   $0xc010982e
+c01048ce:	68 98 00 00 00       	push   $0x98
+c01048d3:	68 c8 97 10 c0       	push   $0xc01097c8
+c01048d8:	e8 ff ba ff ff       	call   c01003dc <__panic>
+     *(unsigned char *)0x3010 = 0x0c;
+c01048dd:	b8 10 30 00 00       	mov    $0x3010,%eax
+c01048e2:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c01048e5:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c01048ea:	83 f8 03             	cmp    $0x3,%eax
+c01048ed:	74 1e                	je     c010490d <check_content_set+0x126>
+c01048ef:	e8 56 c1 ff ff       	call   c0100a4a <print_stackframe>
+c01048f4:	68 0c 99 10 c0       	push   $0xc010990c
+c01048f9:	68 2e 98 10 c0       	push   $0xc010982e
+c01048fe:	68 9a 00 00 00       	push   $0x9a
+c0104903:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104908:	e8 cf ba ff ff       	call   c01003dc <__panic>
+     *(unsigned char *)0x4000 = 0x0d;
+c010490d:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0104912:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c0104915:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c010491a:	83 f8 04             	cmp    $0x4,%eax
+c010491d:	74 1e                	je     c010493d <check_content_set+0x156>
+c010491f:	e8 26 c1 ff ff       	call   c0100a4a <print_stackframe>
+c0104924:	68 1b 99 10 c0       	push   $0xc010991b
+c0104929:	68 2e 98 10 c0       	push   $0xc010982e
+c010492e:	68 9c 00 00 00       	push   $0x9c
+c0104933:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104938:	e8 9f ba ff ff       	call   c01003dc <__panic>
+     *(unsigned char *)0x4010 = 0x0d;
+c010493d:	b8 10 40 00 00       	mov    $0x4010,%eax
+c0104942:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c0104945:	a1 c8 19 12 c0       	mov    0xc01219c8,%eax
+c010494a:	83 f8 04             	cmp    $0x4,%eax
+c010494d:	74 1e                	je     c010496d <check_content_set+0x186>
+c010494f:	e8 f6 c0 ff ff       	call   c0100a4a <print_stackframe>
+c0104954:	68 1b 99 10 c0       	push   $0xc010991b
+c0104959:	68 2e 98 10 c0       	push   $0xc010982e
+c010495e:	68 9e 00 00 00       	push   $0x9e
+c0104963:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104968:	e8 6f ba ff ff       	call   c01003dc <__panic>
+}
+c010496d:	90                   	nop
+c010496e:	c9                   	leave  
+c010496f:	c3                   	ret    
+
+c0104970 <check_content_access>:
+
+static inline int
+check_content_access(void)
+{
+c0104970:	55                   	push   %ebp
+c0104971:	89 e5                	mov    %esp,%ebp
+c0104973:	83 ec 18             	sub    $0x18,%esp
+    int ret = sm->check_swap();
+c0104976:	a1 d4 19 12 c0       	mov    0xc01219d4,%eax
+c010497b:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010497e:	ff d0                	call   *%eax
+c0104980:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return ret;
+c0104983:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0104986:	c9                   	leave  
+c0104987:	c3                   	ret    
+
+c0104988 <check_swap>:
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+check_swap(void)
+{
+c0104988:	55                   	push   %ebp
+c0104989:	89 e5                	mov    %esp,%ebp
+c010498b:	83 ec 68             	sub    $0x68,%esp
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+c010498e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0104995:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+     list_entry_t *le = &free_list;
+c010499c:	c7 45 e8 44 1b 12 c0 	movl   $0xc0121b44,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c01049a3:	eb 65                	jmp    c0104a0a <check_swap+0x82>
+        struct Page *p = le2page(le, page_link);
+c01049a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01049a8:	83 e8 0c             	sub    $0xc,%eax
+c01049ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(PageProperty(p));
+c01049ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01049b1:	83 c0 04             	add    $0x4,%eax
+c01049b4:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
+c01049bb:	89 45 ac             	mov    %eax,-0x54(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c01049be:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c01049c1:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c01049c4:	0f a3 10             	bt     %edx,(%eax)
+c01049c7:	19 c0                	sbb    %eax,%eax
+c01049c9:	89 45 a8             	mov    %eax,-0x58(%ebp)
+    return oldbit != 0;
+c01049cc:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
+c01049d0:	0f 95 c0             	setne  %al
+c01049d3:	0f b6 c0             	movzbl %al,%eax
+c01049d6:	85 c0                	test   %eax,%eax
+c01049d8:	75 1e                	jne    c01049f8 <check_swap+0x70>
+c01049da:	e8 6b c0 ff ff       	call   c0100a4a <print_stackframe>
+c01049df:	68 2a 99 10 c0       	push   $0xc010992a
+c01049e4:	68 2e 98 10 c0       	push   $0xc010982e
+c01049e9:	68 b9 00 00 00       	push   $0xb9
+c01049ee:	68 c8 97 10 c0       	push   $0xc01097c8
+c01049f3:	e8 e4 b9 ff ff       	call   c01003dc <__panic>
+        count ++, total += p->property;
+c01049f8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c01049fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01049ff:	8b 50 08             	mov    0x8(%eax),%edx
+c0104a02:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a05:	01 d0                	add    %edx,%eax
+c0104a07:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104a0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104a0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0104a10:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0104a13:	8b 40 04             	mov    0x4(%eax),%eax
+check_swap(void)
+{
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+     list_entry_t *le = &free_list;
+     while ((le = list_next(le)) != &free_list) {
+c0104a16:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0104a19:	81 7d e8 44 1b 12 c0 	cmpl   $0xc0121b44,-0x18(%ebp)
+c0104a20:	75 83                	jne    c01049a5 <check_swap+0x1d>
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+     }
+     assert(total == nr_free_pages());
+c0104a22:	e8 03 1a 00 00       	call   c010642a <nr_free_pages>
+c0104a27:	89 c2                	mov    %eax,%edx
+c0104a29:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104a2c:	39 c2                	cmp    %eax,%edx
+c0104a2e:	74 1e                	je     c0104a4e <check_swap+0xc6>
+c0104a30:	e8 15 c0 ff ff       	call   c0100a4a <print_stackframe>
+c0104a35:	68 3a 99 10 c0       	push   $0xc010993a
+c0104a3a:	68 2e 98 10 c0       	push   $0xc010982e
+c0104a3f:	68 bc 00 00 00       	push   $0xbc
+c0104a44:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104a49:	e8 8e b9 ff ff       	call   c01003dc <__panic>
+     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
+c0104a4e:	83 ec 04             	sub    $0x4,%esp
+c0104a51:	ff 75 f0             	pushl  -0x10(%ebp)
+c0104a54:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104a57:	68 54 99 10 c0       	push   $0xc0109954
+c0104a5c:	e8 15 b8 ff ff       	call   c0100276 <cprintf>
+c0104a61:	83 c4 10             	add    $0x10,%esp
+     
+     //now we set the phy pages env     
+     struct mm_struct *mm = mm_create();
+c0104a64:	e8 0a e9 ff ff       	call   c0103373 <mm_create>
+c0104a69:	89 45 d8             	mov    %eax,-0x28(%ebp)
+     assert(mm != NULL);
+c0104a6c:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c0104a70:	75 1e                	jne    c0104a90 <check_swap+0x108>
+c0104a72:	e8 d3 bf ff ff       	call   c0100a4a <print_stackframe>
+c0104a77:	68 7a 99 10 c0       	push   $0xc010997a
+c0104a7c:	68 2e 98 10 c0       	push   $0xc010982e
+c0104a81:	68 c1 00 00 00       	push   $0xc1
+c0104a86:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104a8b:	e8 4c b9 ff ff       	call   c01003dc <__panic>
+
+     extern struct mm_struct *check_mm_struct;
+     assert(check_mm_struct == NULL);
+c0104a90:	a1 70 1a 12 c0       	mov    0xc0121a70,%eax
+c0104a95:	85 c0                	test   %eax,%eax
+c0104a97:	74 1e                	je     c0104ab7 <check_swap+0x12f>
+c0104a99:	e8 ac bf ff ff       	call   c0100a4a <print_stackframe>
+c0104a9e:	68 85 99 10 c0       	push   $0xc0109985
+c0104aa3:	68 2e 98 10 c0       	push   $0xc010982e
+c0104aa8:	68 c4 00 00 00       	push   $0xc4
+c0104aad:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104ab2:	e8 25 b9 ff ff       	call   c01003dc <__panic>
+
+     check_mm_struct = mm;
+c0104ab7:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0104aba:	a3 70 1a 12 c0       	mov    %eax,0xc0121a70
+
+     pde_t *pgdir = mm->pgdir = boot_pgdir;
+c0104abf:	8b 15 e4 19 12 c0    	mov    0xc01219e4,%edx
+c0104ac5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0104ac8:	89 50 0c             	mov    %edx,0xc(%eax)
+c0104acb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0104ace:	8b 40 0c             	mov    0xc(%eax),%eax
+c0104ad1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     assert(pgdir[0] == 0);
+c0104ad4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0104ad7:	8b 00                	mov    (%eax),%eax
+c0104ad9:	85 c0                	test   %eax,%eax
+c0104adb:	74 1e                	je     c0104afb <check_swap+0x173>
+c0104add:	e8 68 bf ff ff       	call   c0100a4a <print_stackframe>
+c0104ae2:	68 9d 99 10 c0       	push   $0xc010999d
+c0104ae7:	68 2e 98 10 c0       	push   $0xc010982e
+c0104aec:	68 c9 00 00 00       	push   $0xc9
+c0104af1:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104af6:	e8 e1 b8 ff ff       	call   c01003dc <__panic>
+
+     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
+c0104afb:	83 ec 04             	sub    $0x4,%esp
+c0104afe:	6a 03                	push   $0x3
+c0104b00:	68 00 60 00 00       	push   $0x6000
+c0104b05:	68 00 10 00 00       	push   $0x1000
+c0104b0a:	e8 e0 e8 ff ff       	call   c01033ef <vma_create>
+c0104b0f:	83 c4 10             	add    $0x10,%esp
+c0104b12:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     assert(vma != NULL);
+c0104b15:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c0104b19:	75 1e                	jne    c0104b39 <check_swap+0x1b1>
+c0104b1b:	e8 2a bf ff ff       	call   c0100a4a <print_stackframe>
+c0104b20:	68 ab 99 10 c0       	push   $0xc01099ab
+c0104b25:	68 2e 98 10 c0       	push   $0xc010982e
+c0104b2a:	68 cc 00 00 00       	push   $0xcc
+c0104b2f:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104b34:	e8 a3 b8 ff ff       	call   c01003dc <__panic>
+
+     insert_vma_struct(mm, vma);
+c0104b39:	83 ec 08             	sub    $0x8,%esp
+c0104b3c:	ff 75 d0             	pushl  -0x30(%ebp)
+c0104b3f:	ff 75 d8             	pushl  -0x28(%ebp)
+c0104b42:	e8 1f ea ff ff       	call   c0103566 <insert_vma_struct>
+c0104b47:	83 c4 10             	add    $0x10,%esp
+
+     //setup the temp Page Table vaddr 0~4MB
+     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
+c0104b4a:	83 ec 0c             	sub    $0xc,%esp
+c0104b4d:	68 b8 99 10 c0       	push   $0xc01099b8
+c0104b52:	e8 1f b7 ff ff       	call   c0100276 <cprintf>
+c0104b57:	83 c4 10             	add    $0x10,%esp
+     pte_t *temp_ptep=NULL;
+c0104b5a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+c0104b61:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0104b64:	8b 40 0c             	mov    0xc(%eax),%eax
+c0104b67:	83 ec 04             	sub    $0x4,%esp
+c0104b6a:	6a 01                	push   $0x1
+c0104b6c:	68 00 10 00 00       	push   $0x1000
+c0104b71:	50                   	push   %eax
+c0104b72:	e8 16 1f 00 00       	call   c0106a8d <get_pte>
+c0104b77:	83 c4 10             	add    $0x10,%esp
+c0104b7a:	89 45 cc             	mov    %eax,-0x34(%ebp)
+     assert(temp_ptep!= NULL);
+c0104b7d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0104b81:	75 1e                	jne    c0104ba1 <check_swap+0x219>
+c0104b83:	e8 c2 be ff ff       	call   c0100a4a <print_stackframe>
+c0104b88:	68 ec 99 10 c0       	push   $0xc01099ec
+c0104b8d:	68 2e 98 10 c0       	push   $0xc010982e
+c0104b92:	68 d4 00 00 00       	push   $0xd4
+c0104b97:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104b9c:	e8 3b b8 ff ff       	call   c01003dc <__panic>
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+c0104ba1:	83 ec 0c             	sub    $0xc,%esp
+c0104ba4:	68 00 9a 10 c0       	push   $0xc0109a00
+c0104ba9:	e8 c8 b6 ff ff       	call   c0100276 <cprintf>
+c0104bae:	83 c4 10             	add    $0x10,%esp
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0104bb1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0104bb8:	e9 9a 00 00 00       	jmp    c0104c57 <check_swap+0x2cf>
+          check_rp[i] = alloc_page();
+c0104bbd:	83 ec 0c             	sub    $0xc,%esp
+c0104bc0:	6a 01                	push   $0x1
+c0104bc2:	e8 c2 17 00 00       	call   c0106389 <alloc_pages>
+c0104bc7:	83 c4 10             	add    $0x10,%esp
+c0104bca:	89 c2                	mov    %eax,%edx
+c0104bcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104bcf:	89 14 85 80 1a 12 c0 	mov    %edx,-0x3fede580(,%eax,4)
+          assert(check_rp[i] != NULL );
+c0104bd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104bd9:	8b 04 85 80 1a 12 c0 	mov    -0x3fede580(,%eax,4),%eax
+c0104be0:	85 c0                	test   %eax,%eax
+c0104be2:	75 1e                	jne    c0104c02 <check_swap+0x27a>
+c0104be4:	e8 61 be ff ff       	call   c0100a4a <print_stackframe>
+c0104be9:	68 24 9a 10 c0       	push   $0xc0109a24
+c0104bee:	68 2e 98 10 c0       	push   $0xc010982e
+c0104bf3:	68 d9 00 00 00       	push   $0xd9
+c0104bf8:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104bfd:	e8 da b7 ff ff       	call   c01003dc <__panic>
+          assert(!PageProperty(check_rp[i]));
+c0104c02:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104c05:	8b 04 85 80 1a 12 c0 	mov    -0x3fede580(,%eax,4),%eax
+c0104c0c:	83 c0 04             	add    $0x4,%eax
+c0104c0f:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+c0104c16:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0104c19:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0104c1c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0104c1f:	0f a3 10             	bt     %edx,(%eax)
+c0104c22:	19 c0                	sbb    %eax,%eax
+c0104c24:	89 45 a0             	mov    %eax,-0x60(%ebp)
+    return oldbit != 0;
+c0104c27:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
+c0104c2b:	0f 95 c0             	setne  %al
+c0104c2e:	0f b6 c0             	movzbl %al,%eax
+c0104c31:	85 c0                	test   %eax,%eax
+c0104c33:	74 1e                	je     c0104c53 <check_swap+0x2cb>
+c0104c35:	e8 10 be ff ff       	call   c0100a4a <print_stackframe>
+c0104c3a:	68 38 9a 10 c0       	push   $0xc0109a38
+c0104c3f:	68 2e 98 10 c0       	push   $0xc010982e
+c0104c44:	68 da 00 00 00       	push   $0xda
+c0104c49:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104c4e:	e8 89 b7 ff ff       	call   c01003dc <__panic>
+     pte_t *temp_ptep=NULL;
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+     assert(temp_ptep!= NULL);
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0104c53:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0104c57:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0104c5b:	0f 8e 5c ff ff ff    	jle    c0104bbd <check_swap+0x235>
+          check_rp[i] = alloc_page();
+          assert(check_rp[i] != NULL );
+          assert(!PageProperty(check_rp[i]));
+     }
+     list_entry_t free_list_store = free_list;
+c0104c61:	a1 44 1b 12 c0       	mov    0xc0121b44,%eax
+c0104c66:	8b 15 48 1b 12 c0    	mov    0xc0121b48,%edx
+c0104c6c:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0104c6f:	89 55 9c             	mov    %edx,-0x64(%ebp)
+c0104c72:	c7 45 c0 44 1b 12 c0 	movl   $0xc0121b44,-0x40(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0104c79:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0104c7c:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c0104c7f:	89 50 04             	mov    %edx,0x4(%eax)
+c0104c82:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0104c85:	8b 50 04             	mov    0x4(%eax),%edx
+c0104c88:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0104c8b:	89 10                	mov    %edx,(%eax)
+c0104c8d:	c7 45 c8 44 1b 12 c0 	movl   $0xc0121b44,-0x38(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0104c94:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0104c97:	8b 40 04             	mov    0x4(%eax),%eax
+c0104c9a:	39 45 c8             	cmp    %eax,-0x38(%ebp)
+c0104c9d:	0f 94 c0             	sete   %al
+c0104ca0:	0f b6 c0             	movzbl %al,%eax
+     list_init(&free_list);
+     assert(list_empty(&free_list));
+c0104ca3:	85 c0                	test   %eax,%eax
+c0104ca5:	75 1e                	jne    c0104cc5 <check_swap+0x33d>
+c0104ca7:	e8 9e bd ff ff       	call   c0100a4a <print_stackframe>
+c0104cac:	68 53 9a 10 c0       	push   $0xc0109a53
+c0104cb1:	68 2e 98 10 c0       	push   $0xc010982e
+c0104cb6:	68 de 00 00 00       	push   $0xde
+c0104cbb:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104cc0:	e8 17 b7 ff ff       	call   c01003dc <__panic>
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+c0104cc5:	a1 4c 1b 12 c0       	mov    0xc0121b4c,%eax
+c0104cca:	89 45 bc             	mov    %eax,-0x44(%ebp)
+     nr_free = 0;
+c0104ccd:	c7 05 4c 1b 12 c0 00 	movl   $0x0,0xc0121b4c
+c0104cd4:	00 00 00 
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0104cd7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0104cde:	eb 1c                	jmp    c0104cfc <check_swap+0x374>
+        free_pages(check_rp[i],1);
+c0104ce0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104ce3:	8b 04 85 80 1a 12 c0 	mov    -0x3fede580(,%eax,4),%eax
+c0104cea:	83 ec 08             	sub    $0x8,%esp
+c0104ced:	6a 01                	push   $0x1
+c0104cef:	50                   	push   %eax
+c0104cf0:	e8 00 17 00 00       	call   c01063f5 <free_pages>
+c0104cf5:	83 c4 10             	add    $0x10,%esp
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+     nr_free = 0;
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0104cf8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0104cfc:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0104d00:	7e de                	jle    c0104ce0 <check_swap+0x358>
+        free_pages(check_rp[i],1);
+     }
+     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
+c0104d02:	a1 4c 1b 12 c0       	mov    0xc0121b4c,%eax
+c0104d07:	83 f8 04             	cmp    $0x4,%eax
+c0104d0a:	74 1e                	je     c0104d2a <check_swap+0x3a2>
+c0104d0c:	e8 39 bd ff ff       	call   c0100a4a <print_stackframe>
+c0104d11:	68 6c 9a 10 c0       	push   $0xc0109a6c
+c0104d16:	68 2e 98 10 c0       	push   $0xc010982e
+c0104d1b:	68 e7 00 00 00       	push   $0xe7
+c0104d20:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104d25:	e8 b2 b6 ff ff       	call   c01003dc <__panic>
+     
+     cprintf("set up init env for check_swap begin!\n");
+c0104d2a:	83 ec 0c             	sub    $0xc,%esp
+c0104d2d:	68 90 9a 10 c0       	push   $0xc0109a90
+c0104d32:	e8 3f b5 ff ff       	call   c0100276 <cprintf>
+c0104d37:	83 c4 10             	add    $0x10,%esp
+     //setup initial vir_page<->phy_page environment for page relpacement algorithm 
+
+     
+     pgfault_num=0;
+c0104d3a:	c7 05 c8 19 12 c0 00 	movl   $0x0,0xc01219c8
+c0104d41:	00 00 00 
+     
+     check_content_set();
+c0104d44:	e8 9e fa ff ff       	call   c01047e7 <check_content_set>
+     assert( nr_free == 0);         
+c0104d49:	a1 4c 1b 12 c0       	mov    0xc0121b4c,%eax
+c0104d4e:	85 c0                	test   %eax,%eax
+c0104d50:	74 1e                	je     c0104d70 <check_swap+0x3e8>
+c0104d52:	e8 f3 bc ff ff       	call   c0100a4a <print_stackframe>
+c0104d57:	68 b7 9a 10 c0       	push   $0xc0109ab7
+c0104d5c:	68 2e 98 10 c0       	push   $0xc010982e
+c0104d61:	68 f0 00 00 00       	push   $0xf0
+c0104d66:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104d6b:	e8 6c b6 ff ff       	call   c01003dc <__panic>
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c0104d70:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0104d77:	eb 26                	jmp    c0104d9f <check_swap+0x417>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+c0104d79:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104d7c:	c7 04 85 a0 1a 12 c0 	movl   $0xffffffff,-0x3fede560(,%eax,4)
+c0104d83:	ff ff ff ff 
+c0104d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104d8a:	8b 14 85 a0 1a 12 c0 	mov    -0x3fede560(,%eax,4),%edx
+c0104d91:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104d94:	89 14 85 e0 1a 12 c0 	mov    %edx,-0x3fede520(,%eax,4)
+     
+     pgfault_num=0;
+     
+     check_content_set();
+     assert( nr_free == 0);         
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c0104d9b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0104d9f:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
+c0104da3:	7e d4                	jle    c0104d79 <check_swap+0x3f1>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0104da5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0104dac:	e9 db 00 00 00       	jmp    c0104e8c <check_swap+0x504>
+         check_ptep[i]=0;
+c0104db1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104db4:	c7 04 85 34 1b 12 c0 	movl   $0x0,-0x3fede4cc(,%eax,4)
+c0104dbb:	00 00 00 00 
+         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
+c0104dbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104dc2:	83 c0 01             	add    $0x1,%eax
+c0104dc5:	c1 e0 0c             	shl    $0xc,%eax
+c0104dc8:	83 ec 04             	sub    $0x4,%esp
+c0104dcb:	6a 00                	push   $0x0
+c0104dcd:	50                   	push   %eax
+c0104dce:	ff 75 d4             	pushl  -0x2c(%ebp)
+c0104dd1:	e8 b7 1c 00 00       	call   c0106a8d <get_pte>
+c0104dd6:	83 c4 10             	add    $0x10,%esp
+c0104dd9:	89 c2                	mov    %eax,%edx
+c0104ddb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104dde:	89 14 85 34 1b 12 c0 	mov    %edx,-0x3fede4cc(,%eax,4)
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+c0104de5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104de8:	8b 04 85 34 1b 12 c0 	mov    -0x3fede4cc(,%eax,4),%eax
+c0104def:	85 c0                	test   %eax,%eax
+c0104df1:	75 1e                	jne    c0104e11 <check_swap+0x489>
+c0104df3:	e8 52 bc ff ff       	call   c0100a4a <print_stackframe>
+c0104df8:	68 c4 9a 10 c0       	push   $0xc0109ac4
+c0104dfd:	68 2e 98 10 c0       	push   $0xc010982e
+c0104e02:	68 f8 00 00 00       	push   $0xf8
+c0104e07:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104e0c:	e8 cb b5 ff ff       	call   c01003dc <__panic>
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+c0104e11:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104e14:	8b 04 85 34 1b 12 c0 	mov    -0x3fede4cc(,%eax,4),%eax
+c0104e1b:	8b 00                	mov    (%eax),%eax
+c0104e1d:	83 ec 0c             	sub    $0xc,%esp
+c0104e20:	50                   	push   %eax
+c0104e21:	e8 72 f6 ff ff       	call   c0104498 <pte2page>
+c0104e26:	83 c4 10             	add    $0x10,%esp
+c0104e29:	89 c2                	mov    %eax,%edx
+c0104e2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104e2e:	8b 04 85 80 1a 12 c0 	mov    -0x3fede580(,%eax,4),%eax
+c0104e35:	39 c2                	cmp    %eax,%edx
+c0104e37:	74 1e                	je     c0104e57 <check_swap+0x4cf>
+c0104e39:	e8 0c bc ff ff       	call   c0100a4a <print_stackframe>
+c0104e3e:	68 dc 9a 10 c0       	push   $0xc0109adc
+c0104e43:	68 2e 98 10 c0       	push   $0xc010982e
+c0104e48:	68 f9 00 00 00       	push   $0xf9
+c0104e4d:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104e52:	e8 85 b5 ff ff       	call   c01003dc <__panic>
+         assert((*check_ptep[i] & PTE_P));          
+c0104e57:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104e5a:	8b 04 85 34 1b 12 c0 	mov    -0x3fede4cc(,%eax,4),%eax
+c0104e61:	8b 00                	mov    (%eax),%eax
+c0104e63:	83 e0 01             	and    $0x1,%eax
+c0104e66:	85 c0                	test   %eax,%eax
+c0104e68:	75 1e                	jne    c0104e88 <check_swap+0x500>
+c0104e6a:	e8 db bb ff ff       	call   c0100a4a <print_stackframe>
+c0104e6f:	68 04 9b 10 c0       	push   $0xc0109b04
+c0104e74:	68 2e 98 10 c0       	push   $0xc010982e
+c0104e79:	68 fa 00 00 00       	push   $0xfa
+c0104e7e:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104e83:	e8 54 b5 ff ff       	call   c01003dc <__panic>
+     check_content_set();
+     assert( nr_free == 0);         
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0104e88:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0104e8c:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0104e90:	0f 8e 1b ff ff ff    	jle    c0104db1 <check_swap+0x429>
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+         assert((*check_ptep[i] & PTE_P));          
+     }
+     cprintf("set up init env for check_swap over!\n");
+c0104e96:	83 ec 0c             	sub    $0xc,%esp
+c0104e99:	68 20 9b 10 c0       	push   $0xc0109b20
+c0104e9e:	e8 d3 b3 ff ff       	call   c0100276 <cprintf>
+c0104ea3:	83 c4 10             	add    $0x10,%esp
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+c0104ea6:	e8 c5 fa ff ff       	call   c0104970 <check_content_access>
+c0104eab:	89 45 b8             	mov    %eax,-0x48(%ebp)
+     assert(ret==0);
+c0104eae:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c0104eb2:	74 1e                	je     c0104ed2 <check_swap+0x54a>
+c0104eb4:	e8 91 bb ff ff       	call   c0100a4a <print_stackframe>
+c0104eb9:	68 46 9b 10 c0       	push   $0xc0109b46
+c0104ebe:	68 2e 98 10 c0       	push   $0xc010982e
+c0104ec3:	68 ff 00 00 00       	push   $0xff
+c0104ec8:	68 c8 97 10 c0       	push   $0xc01097c8
+c0104ecd:	e8 0a b5 ff ff       	call   c01003dc <__panic>
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0104ed2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0104ed9:	eb 1c                	jmp    c0104ef7 <check_swap+0x56f>
+         free_pages(check_rp[i],1);
+c0104edb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104ede:	8b 04 85 80 1a 12 c0 	mov    -0x3fede580(,%eax,4),%eax
+c0104ee5:	83 ec 08             	sub    $0x8,%esp
+c0104ee8:	6a 01                	push   $0x1
+c0104eea:	50                   	push   %eax
+c0104eeb:	e8 05 15 00 00       	call   c01063f5 <free_pages>
+c0104ef0:	83 c4 10             	add    $0x10,%esp
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+     assert(ret==0);
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0104ef3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0104ef7:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0104efb:	7e de                	jle    c0104edb <check_swap+0x553>
+         free_pages(check_rp[i],1);
+     } 
+
+     //free_page(pte2page(*temp_ptep));
+     
+     mm_destroy(mm);
+c0104efd:	83 ec 0c             	sub    $0xc,%esp
+c0104f00:	ff 75 d8             	pushl  -0x28(%ebp)
+c0104f03:	e8 87 e7 ff ff       	call   c010368f <mm_destroy>
+c0104f08:	83 c4 10             	add    $0x10,%esp
+         
+     nr_free = nr_free_store;
+c0104f0b:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0104f0e:	a3 4c 1b 12 c0       	mov    %eax,0xc0121b4c
+     free_list = free_list_store;
+c0104f13:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0104f16:	8b 55 9c             	mov    -0x64(%ebp),%edx
+c0104f19:	a3 44 1b 12 c0       	mov    %eax,0xc0121b44
+c0104f1e:	89 15 48 1b 12 c0    	mov    %edx,0xc0121b48
+
+     
+     le = &free_list;
+c0104f24:	c7 45 e8 44 1b 12 c0 	movl   $0xc0121b44,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c0104f2b:	eb 1d                	jmp    c0104f4a <check_swap+0x5c2>
+         struct Page *p = le2page(le, page_link);
+c0104f2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104f30:	83 e8 0c             	sub    $0xc,%eax
+c0104f33:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+         count --, total -= p->property;
+c0104f36:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0104f3a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0104f3d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0104f40:	8b 40 08             	mov    0x8(%eax),%eax
+c0104f43:	29 c2                	sub    %eax,%edx
+c0104f45:	89 d0                	mov    %edx,%eax
+c0104f47:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104f4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104f4d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0104f50:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0104f53:	8b 40 04             	mov    0x4(%eax),%eax
+     nr_free = nr_free_store;
+     free_list = free_list_store;
+
+     
+     le = &free_list;
+     while ((le = list_next(le)) != &free_list) {
+c0104f56:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0104f59:	81 7d e8 44 1b 12 c0 	cmpl   $0xc0121b44,-0x18(%ebp)
+c0104f60:	75 cb                	jne    c0104f2d <check_swap+0x5a5>
+         struct Page *p = le2page(le, page_link);
+         count --, total -= p->property;
+     }
+     cprintf("count is %d, total is %d\n",count,total);
+c0104f62:	83 ec 04             	sub    $0x4,%esp
+c0104f65:	ff 75 f0             	pushl  -0x10(%ebp)
+c0104f68:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104f6b:	68 4d 9b 10 c0       	push   $0xc0109b4d
+c0104f70:	e8 01 b3 ff ff       	call   c0100276 <cprintf>
+c0104f75:	83 c4 10             	add    $0x10,%esp
+     //assert(count == 0);
+     
+     cprintf("check_swap() succeeded!\n");
+c0104f78:	83 ec 0c             	sub    $0xc,%esp
+c0104f7b:	68 67 9b 10 c0       	push   $0xc0109b67
+c0104f80:	e8 f1 b2 ff ff       	call   c0100276 <cprintf>
+c0104f85:	83 c4 10             	add    $0x10,%esp
+}
+c0104f88:	90                   	nop
+c0104f89:	c9                   	leave  
+c0104f8a:	c3                   	ret    
+
+c0104f8b <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0104f8b:	55                   	push   %ebp
+c0104f8c:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0104f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f91:	8b 15 58 1b 12 c0    	mov    0xc0121b58,%edx
+c0104f97:	29 d0                	sub    %edx,%eax
+c0104f99:	c1 f8 05             	sar    $0x5,%eax
+}
+c0104f9c:	5d                   	pop    %ebp
+c0104f9d:	c3                   	ret    
+
+c0104f9e <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c0104f9e:	55                   	push   %ebp
+c0104f9f:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c0104fa1:	ff 75 08             	pushl  0x8(%ebp)
+c0104fa4:	e8 e2 ff ff ff       	call   c0104f8b <page2ppn>
+c0104fa9:	83 c4 04             	add    $0x4,%esp
+c0104fac:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0104faf:	c9                   	leave  
+c0104fb0:	c3                   	ret    
+
+c0104fb1 <page_ref>:
+pde2page(pde_t pde) {
+    return pa2page(PDE_ADDR(pde));
+}
+
+static inline int
+page_ref(struct Page *page) {
+c0104fb1:	55                   	push   %ebp
+c0104fb2:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c0104fb4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fb7:	8b 00                	mov    (%eax),%eax
+}
+c0104fb9:	5d                   	pop    %ebp
+c0104fba:	c3                   	ret    
+
+c0104fbb <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c0104fbb:	55                   	push   %ebp
+c0104fbc:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c0104fbe:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104fc1:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0104fc4:	89 10                	mov    %edx,(%eax)
+}
+c0104fc6:	90                   	nop
+c0104fc7:	5d                   	pop    %ebp
+c0104fc8:	c3                   	ret    
+
+c0104fc9 <default_init>:
+
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+default_init(void) {
+c0104fc9:	55                   	push   %ebp
+c0104fca:	89 e5                	mov    %esp,%ebp
+c0104fcc:	83 ec 10             	sub    $0x10,%esp
+c0104fcf:	c7 45 fc 44 1b 12 c0 	movl   $0xc0121b44,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0104fd6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0104fd9:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0104fdc:	89 50 04             	mov    %edx,0x4(%eax)
+c0104fdf:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0104fe2:	8b 50 04             	mov    0x4(%eax),%edx
+c0104fe5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0104fe8:	89 10                	mov    %edx,(%eax)
+    list_init(&free_list);
+    nr_free = 0;
+c0104fea:	c7 05 4c 1b 12 c0 00 	movl   $0x0,0xc0121b4c
+c0104ff1:	00 00 00 
+}
+c0104ff4:	90                   	nop
+c0104ff5:	c9                   	leave  
+c0104ff6:	c3                   	ret    
+
+c0104ff7 <default_init_memmap>:
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+c0104ff7:	55                   	push   %ebp
+c0104ff8:	89 e5                	mov    %esp,%ebp
+c0104ffa:	83 ec 48             	sub    $0x48,%esp
+    assert(n > 0);
+c0104ffd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0105001:	75 1b                	jne    c010501e <default_init_memmap+0x27>
+c0105003:	e8 42 ba ff ff       	call   c0100a4a <print_stackframe>
+c0105008:	68 80 9b 10 c0       	push   $0xc0109b80
+c010500d:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105012:	6a 46                	push   $0x46
+c0105014:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105019:	e8 be b3 ff ff       	call   c01003dc <__panic>
+    struct Page *p = base;
+c010501e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105021:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p ++) {
+c0105024:	e9 8a 00 00 00       	jmp    c01050b3 <default_init_memmap+0xbc>
+        assert(PageReserved(p));
+c0105029:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010502c:	83 c0 04             	add    $0x4,%eax
+c010502f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+c0105036:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0105039:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010503c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010503f:	0f a3 10             	bt     %edx,(%eax)
+c0105042:	19 c0                	sbb    %eax,%eax
+c0105044:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    return oldbit != 0;
+c0105047:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c010504b:	0f 95 c0             	setne  %al
+c010504e:	0f b6 c0             	movzbl %al,%eax
+c0105051:	85 c0                	test   %eax,%eax
+c0105053:	75 1b                	jne    c0105070 <default_init_memmap+0x79>
+c0105055:	e8 f0 b9 ff ff       	call   c0100a4a <print_stackframe>
+c010505a:	68 b1 9b 10 c0       	push   $0xc0109bb1
+c010505f:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105064:	6a 49                	push   $0x49
+c0105066:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c010506b:	e8 6c b3 ff ff       	call   c01003dc <__panic>
+        p->flags = p->property = 0;
+c0105070:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105073:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+c010507a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010507d:	8b 50 08             	mov    0x8(%eax),%edx
+c0105080:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105083:	89 50 04             	mov    %edx,0x4(%eax)
+        set_page_ref(p, 0);
+c0105086:	83 ec 08             	sub    $0x8,%esp
+c0105089:	6a 00                	push   $0x0
+c010508b:	ff 75 f4             	pushl  -0xc(%ebp)
+c010508e:	e8 28 ff ff ff       	call   c0104fbb <set_page_ref>
+c0105093:	83 c4 10             	add    $0x10,%esp
+	SetPageProperty(p);
+c0105096:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105099:	83 c0 04             	add    $0x4,%eax
+c010509c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+c01050a3:	89 45 d8             	mov    %eax,-0x28(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01050a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01050a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01050ac:	0f ab 10             	bts    %edx,(%eax)
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+c01050af:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c01050b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01050b6:	c1 e0 05             	shl    $0x5,%eax
+c01050b9:	89 c2                	mov    %eax,%edx
+c01050bb:	8b 45 08             	mov    0x8(%ebp),%eax
+c01050be:	01 d0                	add    %edx,%eax
+c01050c0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01050c3:	0f 85 60 ff ff ff    	jne    c0105029 <default_init_memmap+0x32>
+        assert(PageReserved(p));
+        p->flags = p->property = 0;
+        set_page_ref(p, 0);
+	SetPageProperty(p);
+    }
+    base->property = n;
+c01050c9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01050cc:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01050cf:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c01050d2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01050d5:	83 c0 04             	add    $0x4,%eax
+c01050d8:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
+c01050df:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c01050e2:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c01050e5:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01050e8:	0f ab 10             	bts    %edx,(%eax)
+    nr_free += n;
+c01050eb:	8b 15 4c 1b 12 c0    	mov    0xc0121b4c,%edx
+c01050f1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01050f4:	01 d0                	add    %edx,%eax
+c01050f6:	a3 4c 1b 12 c0       	mov    %eax,0xc0121b4c
+    list_add(&free_list, &(base->page_link));
+c01050fb:	8b 45 08             	mov    0x8(%ebp),%eax
+c01050fe:	83 c0 0c             	add    $0xc,%eax
+c0105101:	c7 45 ec 44 1b 12 c0 	movl   $0xc0121b44,-0x14(%ebp)
+c0105108:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c010510b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010510e:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0105111:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0105114:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0105117:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010511a:	8b 40 04             	mov    0x4(%eax),%eax
+c010511d:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0105120:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c0105123:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0105126:	89 55 c4             	mov    %edx,-0x3c(%ebp)
+c0105129:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010512c:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010512f:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0105132:	89 10                	mov    %edx,(%eax)
+c0105134:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0105137:	8b 10                	mov    (%eax),%edx
+c0105139:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010513c:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010513f:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0105142:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c0105145:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0105148:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010514b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c010514e:	89 10                	mov    %edx,(%eax)
+}
+c0105150:	90                   	nop
+c0105151:	c9                   	leave  
+c0105152:	c3                   	ret    
+
+c0105153 <default_alloc_pages>:
+
+static struct Page *
+default_alloc_pages(size_t n) {
+c0105153:	55                   	push   %ebp
+c0105154:	89 e5                	mov    %esp,%ebp
+c0105156:	83 ec 58             	sub    $0x58,%esp
+	//cprintf("alloc\n");
+    assert(n > 0);
+c0105159:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010515d:	75 1b                	jne    c010517a <default_alloc_pages+0x27>
+c010515f:	e8 e6 b8 ff ff       	call   c0100a4a <print_stackframe>
+c0105164:	68 80 9b 10 c0       	push   $0xc0109b80
+c0105169:	68 86 9b 10 c0       	push   $0xc0109b86
+c010516e:	6a 57                	push   $0x57
+c0105170:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105175:	e8 62 b2 ff ff       	call   c01003dc <__panic>
+    if (n > nr_free) {
+c010517a:	a1 4c 1b 12 c0       	mov    0xc0121b4c,%eax
+c010517f:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0105182:	73 0a                	jae    c010518e <default_alloc_pages+0x3b>
+        return NULL;
+c0105184:	b8 00 00 00 00       	mov    $0x0,%eax
+c0105189:	e9 43 01 00 00       	jmp    c01052d1 <default_alloc_pages+0x17e>
+    }
+    struct Page *page = NULL;
+c010518e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    list_entry_t *le = &free_list;
+c0105195:	c7 45 f0 44 1b 12 c0 	movl   $0xc0121b44,-0x10(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c010519c:	eb 1c                	jmp    c01051ba <default_alloc_pages+0x67>
+        struct Page *p = le2page(le, page_link);
+c010519e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01051a1:	83 e8 0c             	sub    $0xc,%eax
+c01051a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        if (p->property >= n) {
+c01051a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01051aa:	8b 40 08             	mov    0x8(%eax),%eax
+c01051ad:	3b 45 08             	cmp    0x8(%ebp),%eax
+c01051b0:	72 08                	jb     c01051ba <default_alloc_pages+0x67>
+            page = p;
+c01051b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01051b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            break;
+c01051b8:	eb 18                	jmp    c01051d2 <default_alloc_pages+0x7f>
+c01051ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01051bd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01051c0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01051c3:	8b 40 04             	mov    0x4(%eax),%eax
+    if (n > nr_free) {
+        return NULL;
+    }
+    struct Page *page = NULL;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c01051c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01051c9:	81 7d f0 44 1b 12 c0 	cmpl   $0xc0121b44,-0x10(%ebp)
+c01051d0:	75 cc                	jne    c010519e <default_alloc_pages+0x4b>
+        if (p->property >= n) {
+            page = p;
+            break;
+        }
+    }
+    if (page != NULL) {
+c01051d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01051d6:	0f 84 f2 00 00 00    	je     c01052ce <default_alloc_pages+0x17b>
+	    for (struct Page *p = page; p != (page + n); ++p) {
+c01051dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01051df:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01051e2:	eb 1d                	jmp    c0105201 <default_alloc_pages+0xae>
+		    ClearPageProperty(p);
+c01051e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01051e7:	83 c0 04             	add    $0x4,%eax
+c01051ea:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
+c01051f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ * @nr:     the bit to clear
+ * @addr:   the address to start counting from
+ * */
+static inline void
+clear_bit(int nr, volatile void *addr) {
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01051f4:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01051f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01051fa:	0f b3 10             	btr    %edx,(%eax)
+            page = p;
+            break;
+        }
+    }
+    if (page != NULL) {
+	    for (struct Page *p = page; p != (page + n); ++p) {
+c01051fd:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
+c0105201:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105204:	c1 e0 05             	shl    $0x5,%eax
+c0105207:	89 c2                	mov    %eax,%edx
+c0105209:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010520c:	01 d0                	add    %edx,%eax
+c010520e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0105211:	75 d1                	jne    c01051e4 <default_alloc_pages+0x91>
+		    ClearPageProperty(p);
+	    }
+	    if (page->property > n) {
+c0105213:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105216:	8b 40 08             	mov    0x8(%eax),%eax
+c0105219:	3b 45 08             	cmp    0x8(%ebp),%eax
+c010521c:	76 78                	jbe    c0105296 <default_alloc_pages+0x143>
+		    struct Page *p = page + n;
+c010521e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105221:	c1 e0 05             	shl    $0x5,%eax
+c0105224:	89 c2                	mov    %eax,%edx
+c0105226:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105229:	01 d0                	add    %edx,%eax
+c010522b:	89 45 dc             	mov    %eax,-0x24(%ebp)
+		    p->property = page->property - n;
+c010522e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105231:	8b 40 08             	mov    0x8(%eax),%eax
+c0105234:	2b 45 08             	sub    0x8(%ebp),%eax
+c0105237:	89 c2                	mov    %eax,%edx
+c0105239:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010523c:	89 50 08             	mov    %edx,0x8(%eax)
+		    list_add(&(page->page_link), &(p->page_link));
+c010523f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105242:	83 c0 0c             	add    $0xc,%eax
+c0105245:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105248:	83 c2 0c             	add    $0xc,%edx
+c010524b:	89 55 e0             	mov    %edx,-0x20(%ebp)
+c010524e:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c0105251:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105254:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0105257:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010525a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c010525d:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0105260:	8b 40 04             	mov    0x4(%eax),%eax
+c0105263:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0105266:	89 55 c0             	mov    %edx,-0x40(%ebp)
+c0105269:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c010526c:	89 55 bc             	mov    %edx,-0x44(%ebp)
+c010526f:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0105272:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0105275:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c0105278:	89 10                	mov    %edx,(%eax)
+c010527a:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c010527d:	8b 10                	mov    (%eax),%edx
+c010527f:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0105282:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0105285:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0105288:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c010528b:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010528e:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0105291:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c0105294:	89 10                	mov    %edx,(%eax)
+	    }
+	    list_del(&(page->page_link));
+c0105296:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105299:	83 c0 0c             	add    $0xc,%eax
+c010529c:	89 45 d8             	mov    %eax,-0x28(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010529f:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01052a2:	8b 40 04             	mov    0x4(%eax),%eax
+c01052a5:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c01052a8:	8b 12                	mov    (%edx),%edx
+c01052aa:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+c01052ad:	89 45 b0             	mov    %eax,-0x50(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01052b0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c01052b3:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c01052b6:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01052b9:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c01052bc:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01052bf:	89 10                	mov    %edx,(%eax)
+	    nr_free -= n;
+c01052c1:	a1 4c 1b 12 c0       	mov    0xc0121b4c,%eax
+c01052c6:	2b 45 08             	sub    0x8(%ebp),%eax
+c01052c9:	a3 4c 1b 12 c0       	mov    %eax,0xc0121b4c
+        nr_free -= n;
+        ClearPageProperty(page);
+    }
+    */
+	//cprintf("\\alloc\n");
+    return page;
+c01052ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01052d1:	c9                   	leave  
+c01052d2:	c3                   	ret    
+
+c01052d3 <merge_backward>:
+
+static bool
+merge_backward(struct Page *base) {
+c01052d3:	55                   	push   %ebp
+c01052d4:	89 e5                	mov    %esp,%ebp
+c01052d6:	83 ec 30             	sub    $0x30,%esp
+	list_entry_t *le = list_next(&(base->page_link));
+c01052d9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01052dc:	83 c0 0c             	add    $0xc,%eax
+c01052df:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01052e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01052e5:	8b 40 04             	mov    0x4(%eax),%eax
+c01052e8:	89 45 f8             	mov    %eax,-0x8(%ebp)
+	//cprintf("base: %08x le: %08x free_list: %08x\n", &(base->page_link), le, &free_list);
+	if (le == &free_list) return 0;
+c01052eb:	81 7d f8 44 1b 12 c0 	cmpl   $0xc0121b44,-0x8(%ebp)
+c01052f2:	75 0a                	jne    c01052fe <merge_backward+0x2b>
+c01052f4:	b8 00 00 00 00       	mov    $0x0,%eax
+c01052f9:	e9 a3 00 00 00       	jmp    c01053a1 <merge_backward+0xce>
+	struct Page *p = le2page(le, page_link);
+c01052fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0105301:	83 e8 0c             	sub    $0xc,%eax
+c0105304:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	if (PageProperty(p) == 0) return 0;
+c0105307:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010530a:	83 c0 04             	add    $0x4,%eax
+c010530d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+c0105314:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0105317:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010531a:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010531d:	0f a3 10             	bt     %edx,(%eax)
+c0105320:	19 c0                	sbb    %eax,%eax
+c0105322:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return oldbit != 0;
+c0105325:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0105329:	0f 95 c0             	setne  %al
+c010532c:	0f b6 c0             	movzbl %al,%eax
+c010532f:	85 c0                	test   %eax,%eax
+c0105331:	75 07                	jne    c010533a <merge_backward+0x67>
+c0105333:	b8 00 00 00 00       	mov    $0x0,%eax
+c0105338:	eb 67                	jmp    c01053a1 <merge_backward+0xce>
+	if (base + base->property != p) return 0;
+c010533a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010533d:	8b 40 08             	mov    0x8(%eax),%eax
+c0105340:	c1 e0 05             	shl    $0x5,%eax
+c0105343:	89 c2                	mov    %eax,%edx
+c0105345:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105348:	01 d0                	add    %edx,%eax
+c010534a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c010534d:	74 07                	je     c0105356 <merge_backward+0x83>
+c010534f:	b8 00 00 00 00       	mov    $0x0,%eax
+c0105354:	eb 4b                	jmp    c01053a1 <merge_backward+0xce>
+	base->property += p->property;
+c0105356:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105359:	8b 50 08             	mov    0x8(%eax),%edx
+c010535c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010535f:	8b 40 08             	mov    0x8(%eax),%eax
+c0105362:	01 c2                	add    %eax,%edx
+c0105364:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105367:	89 50 08             	mov    %edx,0x8(%eax)
+	p->property = 0;
+c010536a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010536d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+c0105374:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0105377:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010537a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010537d:	8b 40 04             	mov    0x4(%eax),%eax
+c0105380:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0105383:	8b 12                	mov    (%edx),%edx
+c0105385:	89 55 e0             	mov    %edx,-0x20(%ebp)
+c0105388:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c010538b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010538e:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105391:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0105394:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105397:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010539a:	89 10                	mov    %edx,(%eax)
+	list_del(le);
+	//cprintf("************ merged! ************\n");
+	return 1;
+c010539c:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c01053a1:	c9                   	leave  
+c01053a2:	c3                   	ret    
+
+c01053a3 <default_free_pages>:
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+c01053a3:	55                   	push   %ebp
+c01053a4:	89 e5                	mov    %esp,%ebp
+c01053a6:	83 ec 58             	sub    $0x58,%esp
+	//cprintf("free\n");
+    assert(n > 0);
+c01053a9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c01053ad:	75 1e                	jne    c01053cd <default_free_pages+0x2a>
+c01053af:	e8 96 b6 ff ff       	call   c0100a4a <print_stackframe>
+c01053b4:	68 80 9b 10 c0       	push   $0xc0109b80
+c01053b9:	68 86 9b 10 c0       	push   $0xc0109b86
+c01053be:	68 93 00 00 00       	push   $0x93
+c01053c3:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c01053c8:	e8 0f b0 ff ff       	call   c01003dc <__panic>
+    struct Page *p = base;
+c01053cd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01053d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != (base + n); p ++) {
+c01053d3:	e9 a3 00 00 00       	jmp    c010547b <default_free_pages+0xd8>
+        assert(!PageReserved(p) && !PageProperty(p));
+c01053d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01053db:	83 c0 04             	add    $0x4,%eax
+c01053de:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+c01053e5:	89 45 c8             	mov    %eax,-0x38(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c01053e8:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01053eb:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01053ee:	0f a3 10             	bt     %edx,(%eax)
+c01053f1:	19 c0                	sbb    %eax,%eax
+c01053f3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    return oldbit != 0;
+c01053f6:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
+c01053fa:	0f 95 c0             	setne  %al
+c01053fd:	0f b6 c0             	movzbl %al,%eax
+c0105400:	85 c0                	test   %eax,%eax
+c0105402:	75 2c                	jne    c0105430 <default_free_pages+0x8d>
+c0105404:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105407:	83 c0 04             	add    $0x4,%eax
+c010540a:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
+c0105411:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0105414:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0105417:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010541a:	0f a3 10             	bt     %edx,(%eax)
+c010541d:	19 c0                	sbb    %eax,%eax
+c010541f:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    return oldbit != 0;
+c0105422:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0105426:	0f 95 c0             	setne  %al
+c0105429:	0f b6 c0             	movzbl %al,%eax
+c010542c:	85 c0                	test   %eax,%eax
+c010542e:	74 1e                	je     c010544e <default_free_pages+0xab>
+c0105430:	e8 15 b6 ff ff       	call   c0100a4a <print_stackframe>
+c0105435:	68 c4 9b 10 c0       	push   $0xc0109bc4
+c010543a:	68 86 9b 10 c0       	push   $0xc0109b86
+c010543f:	68 96 00 00 00       	push   $0x96
+c0105444:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105449:	e8 8e af ff ff       	call   c01003dc <__panic>
+	SetPageProperty(p);
+c010544e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105451:	83 c0 04             	add    $0x4,%eax
+c0105454:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+c010545b:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c010545e:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0105461:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0105464:	0f ab 10             	bts    %edx,(%eax)
+        set_page_ref(p, 0);
+c0105467:	83 ec 08             	sub    $0x8,%esp
+c010546a:	6a 00                	push   $0x0
+c010546c:	ff 75 f4             	pushl  -0xc(%ebp)
+c010546f:	e8 47 fb ff ff       	call   c0104fbb <set_page_ref>
+c0105474:	83 c4 10             	add    $0x10,%esp
+static void
+default_free_pages(struct Page *base, size_t n) {
+	//cprintf("free\n");
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != (base + n); p ++) {
+c0105477:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c010547b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010547e:	c1 e0 05             	shl    $0x5,%eax
+c0105481:	89 c2                	mov    %eax,%edx
+c0105483:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105486:	01 d0                	add    %edx,%eax
+c0105488:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c010548b:	0f 85 47 ff ff ff    	jne    c01053d8 <default_free_pages+0x35>
+        assert(!PageReserved(p) && !PageProperty(p));
+	SetPageProperty(p);
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+c0105491:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105494:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105497:	89 50 08             	mov    %edx,0x8(%eax)
+c010549a:	c7 45 e0 44 1b 12 c0 	movl   $0xc0121b44,-0x20(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01054a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01054a4:	8b 40 04             	mov    0x4(%eax),%eax
+    //SetPageProperty(base);
+    list_entry_t *le = list_next(&free_list);
+c01054a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    //cprintf("to find position\n");
+    for (; le != (&free_list) && le < (&(base->page_link)); le = list_next(le));
+c01054aa:	eb 0f                	jmp    c01054bb <default_free_pages+0x118>
+c01054ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01054af:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01054b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01054b5:	8b 40 04             	mov    0x4(%eax),%eax
+c01054b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01054bb:	81 7d f0 44 1b 12 c0 	cmpl   $0xc0121b44,-0x10(%ebp)
+c01054c2:	74 0b                	je     c01054cf <default_free_pages+0x12c>
+c01054c4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01054c7:	83 c0 0c             	add    $0xc,%eax
+c01054ca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01054cd:	77 dd                	ja     c01054ac <default_free_pages+0x109>
+    //cprintf("found position\n");
+    list_add_before(le, &(base->page_link));
+c01054cf:	8b 45 08             	mov    0x8(%ebp),%eax
+c01054d2:	8d 50 0c             	lea    0xc(%eax),%edx
+c01054d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01054d8:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c01054db:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c01054de:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01054e1:	8b 00                	mov    (%eax),%eax
+c01054e3:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01054e6:	89 55 b0             	mov    %edx,-0x50(%ebp)
+c01054e9:	89 45 ac             	mov    %eax,-0x54(%ebp)
+c01054ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01054ef:	89 45 a8             	mov    %eax,-0x58(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c01054f2:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c01054f5:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c01054f8:	89 10                	mov    %edx,(%eax)
+c01054fa:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c01054fd:	8b 10                	mov    (%eax),%edx
+c01054ff:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0105502:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0105505:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0105508:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c010550b:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010550e:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0105511:	8b 55 ac             	mov    -0x54(%ebp),%edx
+c0105514:	89 10                	mov    %edx,(%eax)
+    nr_free += n;
+c0105516:	8b 15 4c 1b 12 c0    	mov    0xc0121b4c,%edx
+c010551c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010551f:	01 d0                	add    %edx,%eax
+c0105521:	a3 4c 1b 12 c0       	mov    %eax,0xc0121b4c
+    //cprintf("to merge backward\n");
+    while (merge_backward(base));
+c0105526:	90                   	nop
+c0105527:	83 ec 0c             	sub    $0xc,%esp
+c010552a:	ff 75 08             	pushl  0x8(%ebp)
+c010552d:	e8 a1 fd ff ff       	call   c01052d3 <merge_backward>
+c0105532:	83 c4 10             	add    $0x10,%esp
+c0105535:	85 c0                	test   %eax,%eax
+c0105537:	75 ee                	jne    c0105527 <default_free_pages+0x184>
+    //cprintf("merged backward\n");
+    for (list_entry_t *i = list_prev(&(base->page_link)); i!= &free_list; i = list_prev(i)) {
+c0105539:	8b 45 08             	mov    0x8(%ebp),%eax
+c010553c:	83 c0 0c             	add    $0xc,%eax
+c010553f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c0105542:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0105545:	8b 00                	mov    (%eax),%eax
+c0105547:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010554a:	eb 24                	jmp    c0105570 <default_free_pages+0x1cd>
+	    if (!merge_backward(le2page(i, page_link))) break;
+c010554c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010554f:	83 e8 0c             	sub    $0xc,%eax
+c0105552:	83 ec 0c             	sub    $0xc,%esp
+c0105555:	50                   	push   %eax
+c0105556:	e8 78 fd ff ff       	call   c01052d3 <merge_backward>
+c010555b:	83 c4 10             	add    $0x10,%esp
+c010555e:	85 c0                	test   %eax,%eax
+c0105560:	74 19                	je     c010557b <default_free_pages+0x1d8>
+c0105562:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105565:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0105568:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010556b:	8b 00                	mov    (%eax),%eax
+    list_add_before(le, &(base->page_link));
+    nr_free += n;
+    //cprintf("to merge backward\n");
+    while (merge_backward(base));
+    //cprintf("merged backward\n");
+    for (list_entry_t *i = list_prev(&(base->page_link)); i!= &free_list; i = list_prev(i)) {
+c010556d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105570:	81 7d ec 44 1b 12 c0 	cmpl   $0xc0121b44,-0x14(%ebp)
+c0105577:	75 d3                	jne    c010554c <default_free_pages+0x1a9>
+	    if (!merge_backward(le2page(i, page_link))) break;
+    }
+	//cprintf("\\free\n");
+	
+}
+c0105579:	eb 01                	jmp    c010557c <default_free_pages+0x1d9>
+    nr_free += n;
+    //cprintf("to merge backward\n");
+    while (merge_backward(base));
+    //cprintf("merged backward\n");
+    for (list_entry_t *i = list_prev(&(base->page_link)); i!= &free_list; i = list_prev(i)) {
+	    if (!merge_backward(le2page(i, page_link))) break;
+c010557b:	90                   	nop
+    }
+	//cprintf("\\free\n");
+	
+}
+c010557c:	90                   	nop
+c010557d:	c9                   	leave  
+c010557e:	c3                   	ret    
+
+c010557f <default_nr_free_pages>:
+
+static size_t
+default_nr_free_pages(void) {
+c010557f:	55                   	push   %ebp
+c0105580:	89 e5                	mov    %esp,%ebp
+    return nr_free;
+c0105582:	a1 4c 1b 12 c0       	mov    0xc0121b4c,%eax
+}
+c0105587:	5d                   	pop    %ebp
+c0105588:	c3                   	ret    
+
+c0105589 <basic_check>:
+
+static void
+basic_check(void) {
+c0105589:	55                   	push   %ebp
+c010558a:	89 e5                	mov    %esp,%ebp
+c010558c:	83 ec 38             	sub    $0x38,%esp
+    struct Page *p0, *p1, *p2;
+    p0 = p1 = p2 = NULL;
+c010558f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0105596:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105599:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010559c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010559f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    assert((p0 = alloc_page()) != NULL);
+c01055a2:	83 ec 0c             	sub    $0xc,%esp
+c01055a5:	6a 01                	push   $0x1
+c01055a7:	e8 dd 0d 00 00       	call   c0106389 <alloc_pages>
+c01055ac:	83 c4 10             	add    $0x10,%esp
+c01055af:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01055b2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01055b6:	75 1e                	jne    c01055d6 <basic_check+0x4d>
+c01055b8:	e8 8d b4 ff ff       	call   c0100a4a <print_stackframe>
+c01055bd:	68 e9 9b 10 c0       	push   $0xc0109be9
+c01055c2:	68 86 9b 10 c0       	push   $0xc0109b86
+c01055c7:	68 b5 00 00 00       	push   $0xb5
+c01055cc:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c01055d1:	e8 06 ae ff ff       	call   c01003dc <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c01055d6:	83 ec 0c             	sub    $0xc,%esp
+c01055d9:	6a 01                	push   $0x1
+c01055db:	e8 a9 0d 00 00       	call   c0106389 <alloc_pages>
+c01055e0:	83 c4 10             	add    $0x10,%esp
+c01055e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01055e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01055ea:	75 1e                	jne    c010560a <basic_check+0x81>
+c01055ec:	e8 59 b4 ff ff       	call   c0100a4a <print_stackframe>
+c01055f1:	68 05 9c 10 c0       	push   $0xc0109c05
+c01055f6:	68 86 9b 10 c0       	push   $0xc0109b86
+c01055fb:	68 b6 00 00 00       	push   $0xb6
+c0105600:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105605:	e8 d2 ad ff ff       	call   c01003dc <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c010560a:	83 ec 0c             	sub    $0xc,%esp
+c010560d:	6a 01                	push   $0x1
+c010560f:	e8 75 0d 00 00       	call   c0106389 <alloc_pages>
+c0105614:	83 c4 10             	add    $0x10,%esp
+c0105617:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010561a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010561e:	75 1e                	jne    c010563e <basic_check+0xb5>
+c0105620:	e8 25 b4 ff ff       	call   c0100a4a <print_stackframe>
+c0105625:	68 21 9c 10 c0       	push   $0xc0109c21
+c010562a:	68 86 9b 10 c0       	push   $0xc0109b86
+c010562f:	68 b7 00 00 00       	push   $0xb7
+c0105634:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105639:	e8 9e ad ff ff       	call   c01003dc <__panic>
+
+    assert(p0 != p1 && p0 != p2 && p1 != p2);
+c010563e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105641:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0105644:	74 10                	je     c0105656 <basic_check+0xcd>
+c0105646:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105649:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c010564c:	74 08                	je     c0105656 <basic_check+0xcd>
+c010564e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105651:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0105654:	75 1e                	jne    c0105674 <basic_check+0xeb>
+c0105656:	e8 ef b3 ff ff       	call   c0100a4a <print_stackframe>
+c010565b:	68 40 9c 10 c0       	push   $0xc0109c40
+c0105660:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105665:	68 b9 00 00 00       	push   $0xb9
+c010566a:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c010566f:	e8 68 ad ff ff       	call   c01003dc <__panic>
+    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
+c0105674:	83 ec 0c             	sub    $0xc,%esp
+c0105677:	ff 75 ec             	pushl  -0x14(%ebp)
+c010567a:	e8 32 f9 ff ff       	call   c0104fb1 <page_ref>
+c010567f:	83 c4 10             	add    $0x10,%esp
+c0105682:	85 c0                	test   %eax,%eax
+c0105684:	75 24                	jne    c01056aa <basic_check+0x121>
+c0105686:	83 ec 0c             	sub    $0xc,%esp
+c0105689:	ff 75 f0             	pushl  -0x10(%ebp)
+c010568c:	e8 20 f9 ff ff       	call   c0104fb1 <page_ref>
+c0105691:	83 c4 10             	add    $0x10,%esp
+c0105694:	85 c0                	test   %eax,%eax
+c0105696:	75 12                	jne    c01056aa <basic_check+0x121>
+c0105698:	83 ec 0c             	sub    $0xc,%esp
+c010569b:	ff 75 f4             	pushl  -0xc(%ebp)
+c010569e:	e8 0e f9 ff ff       	call   c0104fb1 <page_ref>
+c01056a3:	83 c4 10             	add    $0x10,%esp
+c01056a6:	85 c0                	test   %eax,%eax
+c01056a8:	74 1e                	je     c01056c8 <basic_check+0x13f>
+c01056aa:	e8 9b b3 ff ff       	call   c0100a4a <print_stackframe>
+c01056af:	68 64 9c 10 c0       	push   $0xc0109c64
+c01056b4:	68 86 9b 10 c0       	push   $0xc0109b86
+c01056b9:	68 ba 00 00 00       	push   $0xba
+c01056be:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c01056c3:	e8 14 ad ff ff       	call   c01003dc <__panic>
+
+    assert(page2pa(p0) < npage * PGSIZE);
+c01056c8:	83 ec 0c             	sub    $0xc,%esp
+c01056cb:	ff 75 ec             	pushl  -0x14(%ebp)
+c01056ce:	e8 cb f8 ff ff       	call   c0104f9e <page2pa>
+c01056d3:	83 c4 10             	add    $0x10,%esp
+c01056d6:	89 c2                	mov    %eax,%edx
+c01056d8:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c01056dd:	c1 e0 0c             	shl    $0xc,%eax
+c01056e0:	39 c2                	cmp    %eax,%edx
+c01056e2:	72 1e                	jb     c0105702 <basic_check+0x179>
+c01056e4:	e8 61 b3 ff ff       	call   c0100a4a <print_stackframe>
+c01056e9:	68 a0 9c 10 c0       	push   $0xc0109ca0
+c01056ee:	68 86 9b 10 c0       	push   $0xc0109b86
+c01056f3:	68 bc 00 00 00       	push   $0xbc
+c01056f8:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c01056fd:	e8 da ac ff ff       	call   c01003dc <__panic>
+    assert(page2pa(p1) < npage * PGSIZE);
+c0105702:	83 ec 0c             	sub    $0xc,%esp
+c0105705:	ff 75 f0             	pushl  -0x10(%ebp)
+c0105708:	e8 91 f8 ff ff       	call   c0104f9e <page2pa>
+c010570d:	83 c4 10             	add    $0x10,%esp
+c0105710:	89 c2                	mov    %eax,%edx
+c0105712:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c0105717:	c1 e0 0c             	shl    $0xc,%eax
+c010571a:	39 c2                	cmp    %eax,%edx
+c010571c:	72 1e                	jb     c010573c <basic_check+0x1b3>
+c010571e:	e8 27 b3 ff ff       	call   c0100a4a <print_stackframe>
+c0105723:	68 bd 9c 10 c0       	push   $0xc0109cbd
+c0105728:	68 86 9b 10 c0       	push   $0xc0109b86
+c010572d:	68 bd 00 00 00       	push   $0xbd
+c0105732:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105737:	e8 a0 ac ff ff       	call   c01003dc <__panic>
+    assert(page2pa(p2) < npage * PGSIZE);
+c010573c:	83 ec 0c             	sub    $0xc,%esp
+c010573f:	ff 75 f4             	pushl  -0xc(%ebp)
+c0105742:	e8 57 f8 ff ff       	call   c0104f9e <page2pa>
+c0105747:	83 c4 10             	add    $0x10,%esp
+c010574a:	89 c2                	mov    %eax,%edx
+c010574c:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c0105751:	c1 e0 0c             	shl    $0xc,%eax
+c0105754:	39 c2                	cmp    %eax,%edx
+c0105756:	72 1e                	jb     c0105776 <basic_check+0x1ed>
+c0105758:	e8 ed b2 ff ff       	call   c0100a4a <print_stackframe>
+c010575d:	68 da 9c 10 c0       	push   $0xc0109cda
+c0105762:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105767:	68 be 00 00 00       	push   $0xbe
+c010576c:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105771:	e8 66 ac ff ff       	call   c01003dc <__panic>
+
+    list_entry_t free_list_store = free_list;
+c0105776:	a1 44 1b 12 c0       	mov    0xc0121b44,%eax
+c010577b:	8b 15 48 1b 12 c0    	mov    0xc0121b48,%edx
+c0105781:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0105784:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c0105787:	c7 45 e4 44 1b 12 c0 	movl   $0xc0121b44,-0x1c(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010578e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105791:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0105794:	89 50 04             	mov    %edx,0x4(%eax)
+c0105797:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010579a:	8b 50 04             	mov    0x4(%eax),%edx
+c010579d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01057a0:	89 10                	mov    %edx,(%eax)
+c01057a2:	c7 45 d8 44 1b 12 c0 	movl   $0xc0121b44,-0x28(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c01057a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01057ac:	8b 40 04             	mov    0x4(%eax),%eax
+c01057af:	39 45 d8             	cmp    %eax,-0x28(%ebp)
+c01057b2:	0f 94 c0             	sete   %al
+c01057b5:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c01057b8:	85 c0                	test   %eax,%eax
+c01057ba:	75 1e                	jne    c01057da <basic_check+0x251>
+c01057bc:	e8 89 b2 ff ff       	call   c0100a4a <print_stackframe>
+c01057c1:	68 f7 9c 10 c0       	push   $0xc0109cf7
+c01057c6:	68 86 9b 10 c0       	push   $0xc0109b86
+c01057cb:	68 c2 00 00 00       	push   $0xc2
+c01057d0:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c01057d5:	e8 02 ac ff ff       	call   c01003dc <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c01057da:	a1 4c 1b 12 c0       	mov    0xc0121b4c,%eax
+c01057df:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    nr_free = 0;
+c01057e2:	c7 05 4c 1b 12 c0 00 	movl   $0x0,0xc0121b4c
+c01057e9:	00 00 00 
+
+    assert(alloc_page() == NULL);
+c01057ec:	83 ec 0c             	sub    $0xc,%esp
+c01057ef:	6a 01                	push   $0x1
+c01057f1:	e8 93 0b 00 00       	call   c0106389 <alloc_pages>
+c01057f6:	83 c4 10             	add    $0x10,%esp
+c01057f9:	85 c0                	test   %eax,%eax
+c01057fb:	74 1e                	je     c010581b <basic_check+0x292>
+c01057fd:	e8 48 b2 ff ff       	call   c0100a4a <print_stackframe>
+c0105802:	68 0e 9d 10 c0       	push   $0xc0109d0e
+c0105807:	68 86 9b 10 c0       	push   $0xc0109b86
+c010580c:	68 c7 00 00 00       	push   $0xc7
+c0105811:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105816:	e8 c1 ab ff ff       	call   c01003dc <__panic>
+
+    free_page(p0);
+c010581b:	83 ec 08             	sub    $0x8,%esp
+c010581e:	6a 01                	push   $0x1
+c0105820:	ff 75 ec             	pushl  -0x14(%ebp)
+c0105823:	e8 cd 0b 00 00       	call   c01063f5 <free_pages>
+c0105828:	83 c4 10             	add    $0x10,%esp
+    free_page(p1);
+c010582b:	83 ec 08             	sub    $0x8,%esp
+c010582e:	6a 01                	push   $0x1
+c0105830:	ff 75 f0             	pushl  -0x10(%ebp)
+c0105833:	e8 bd 0b 00 00       	call   c01063f5 <free_pages>
+c0105838:	83 c4 10             	add    $0x10,%esp
+    free_page(p2);
+c010583b:	83 ec 08             	sub    $0x8,%esp
+c010583e:	6a 01                	push   $0x1
+c0105840:	ff 75 f4             	pushl  -0xc(%ebp)
+c0105843:	e8 ad 0b 00 00       	call   c01063f5 <free_pages>
+c0105848:	83 c4 10             	add    $0x10,%esp
+    assert(nr_free == 3);
+c010584b:	a1 4c 1b 12 c0       	mov    0xc0121b4c,%eax
+c0105850:	83 f8 03             	cmp    $0x3,%eax
+c0105853:	74 1e                	je     c0105873 <basic_check+0x2ea>
+c0105855:	e8 f0 b1 ff ff       	call   c0100a4a <print_stackframe>
+c010585a:	68 23 9d 10 c0       	push   $0xc0109d23
+c010585f:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105864:	68 cc 00 00 00       	push   $0xcc
+c0105869:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c010586e:	e8 69 ab ff ff       	call   c01003dc <__panic>
+
+    assert((p0 = alloc_page()) != NULL);
+c0105873:	83 ec 0c             	sub    $0xc,%esp
+c0105876:	6a 01                	push   $0x1
+c0105878:	e8 0c 0b 00 00       	call   c0106389 <alloc_pages>
+c010587d:	83 c4 10             	add    $0x10,%esp
+c0105880:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105883:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0105887:	75 1e                	jne    c01058a7 <basic_check+0x31e>
+c0105889:	e8 bc b1 ff ff       	call   c0100a4a <print_stackframe>
+c010588e:	68 e9 9b 10 c0       	push   $0xc0109be9
+c0105893:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105898:	68 ce 00 00 00       	push   $0xce
+c010589d:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c01058a2:	e8 35 ab ff ff       	call   c01003dc <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c01058a7:	83 ec 0c             	sub    $0xc,%esp
+c01058aa:	6a 01                	push   $0x1
+c01058ac:	e8 d8 0a 00 00       	call   c0106389 <alloc_pages>
+c01058b1:	83 c4 10             	add    $0x10,%esp
+c01058b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01058b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01058bb:	75 1e                	jne    c01058db <basic_check+0x352>
+c01058bd:	e8 88 b1 ff ff       	call   c0100a4a <print_stackframe>
+c01058c2:	68 05 9c 10 c0       	push   $0xc0109c05
+c01058c7:	68 86 9b 10 c0       	push   $0xc0109b86
+c01058cc:	68 cf 00 00 00       	push   $0xcf
+c01058d1:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c01058d6:	e8 01 ab ff ff       	call   c01003dc <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c01058db:	83 ec 0c             	sub    $0xc,%esp
+c01058de:	6a 01                	push   $0x1
+c01058e0:	e8 a4 0a 00 00       	call   c0106389 <alloc_pages>
+c01058e5:	83 c4 10             	add    $0x10,%esp
+c01058e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01058eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01058ef:	75 1e                	jne    c010590f <basic_check+0x386>
+c01058f1:	e8 54 b1 ff ff       	call   c0100a4a <print_stackframe>
+c01058f6:	68 21 9c 10 c0       	push   $0xc0109c21
+c01058fb:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105900:	68 d0 00 00 00       	push   $0xd0
+c0105905:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c010590a:	e8 cd aa ff ff       	call   c01003dc <__panic>
+
+    assert(alloc_page() == NULL);
+c010590f:	83 ec 0c             	sub    $0xc,%esp
+c0105912:	6a 01                	push   $0x1
+c0105914:	e8 70 0a 00 00       	call   c0106389 <alloc_pages>
+c0105919:	83 c4 10             	add    $0x10,%esp
+c010591c:	85 c0                	test   %eax,%eax
+c010591e:	74 1e                	je     c010593e <basic_check+0x3b5>
+c0105920:	e8 25 b1 ff ff       	call   c0100a4a <print_stackframe>
+c0105925:	68 0e 9d 10 c0       	push   $0xc0109d0e
+c010592a:	68 86 9b 10 c0       	push   $0xc0109b86
+c010592f:	68 d2 00 00 00       	push   $0xd2
+c0105934:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105939:	e8 9e aa ff ff       	call   c01003dc <__panic>
+
+    free_page(p0);
+c010593e:	83 ec 08             	sub    $0x8,%esp
+c0105941:	6a 01                	push   $0x1
+c0105943:	ff 75 ec             	pushl  -0x14(%ebp)
+c0105946:	e8 aa 0a 00 00       	call   c01063f5 <free_pages>
+c010594b:	83 c4 10             	add    $0x10,%esp
+c010594e:	c7 45 e8 44 1b 12 c0 	movl   $0xc0121b44,-0x18(%ebp)
+c0105955:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105958:	8b 40 04             	mov    0x4(%eax),%eax
+c010595b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c010595e:	0f 94 c0             	sete   %al
+c0105961:	0f b6 c0             	movzbl %al,%eax
+    assert(!list_empty(&free_list));
+c0105964:	85 c0                	test   %eax,%eax
+c0105966:	74 1e                	je     c0105986 <basic_check+0x3fd>
+c0105968:	e8 dd b0 ff ff       	call   c0100a4a <print_stackframe>
+c010596d:	68 30 9d 10 c0       	push   $0xc0109d30
+c0105972:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105977:	68 d5 00 00 00       	push   $0xd5
+c010597c:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105981:	e8 56 aa ff ff       	call   c01003dc <__panic>
+
+    struct Page *p;
+    assert((p = alloc_page()) == p0);
+c0105986:	83 ec 0c             	sub    $0xc,%esp
+c0105989:	6a 01                	push   $0x1
+c010598b:	e8 f9 09 00 00       	call   c0106389 <alloc_pages>
+c0105990:	83 c4 10             	add    $0x10,%esp
+c0105993:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105996:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105999:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010599c:	74 1e                	je     c01059bc <basic_check+0x433>
+c010599e:	e8 a7 b0 ff ff       	call   c0100a4a <print_stackframe>
+c01059a3:	68 48 9d 10 c0       	push   $0xc0109d48
+c01059a8:	68 86 9b 10 c0       	push   $0xc0109b86
+c01059ad:	68 d8 00 00 00       	push   $0xd8
+c01059b2:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c01059b7:	e8 20 aa ff ff       	call   c01003dc <__panic>
+    assert(alloc_page() == NULL);
+c01059bc:	83 ec 0c             	sub    $0xc,%esp
+c01059bf:	6a 01                	push   $0x1
+c01059c1:	e8 c3 09 00 00       	call   c0106389 <alloc_pages>
+c01059c6:	83 c4 10             	add    $0x10,%esp
+c01059c9:	85 c0                	test   %eax,%eax
+c01059cb:	74 1e                	je     c01059eb <basic_check+0x462>
+c01059cd:	e8 78 b0 ff ff       	call   c0100a4a <print_stackframe>
+c01059d2:	68 0e 9d 10 c0       	push   $0xc0109d0e
+c01059d7:	68 86 9b 10 c0       	push   $0xc0109b86
+c01059dc:	68 d9 00 00 00       	push   $0xd9
+c01059e1:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c01059e6:	e8 f1 a9 ff ff       	call   c01003dc <__panic>
+
+    assert(nr_free == 0);
+c01059eb:	a1 4c 1b 12 c0       	mov    0xc0121b4c,%eax
+c01059f0:	85 c0                	test   %eax,%eax
+c01059f2:	74 1e                	je     c0105a12 <basic_check+0x489>
+c01059f4:	e8 51 b0 ff ff       	call   c0100a4a <print_stackframe>
+c01059f9:	68 61 9d 10 c0       	push   $0xc0109d61
+c01059fe:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105a03:	68 db 00 00 00       	push   $0xdb
+c0105a08:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105a0d:	e8 ca a9 ff ff       	call   c01003dc <__panic>
+    free_list = free_list_store;
+c0105a12:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105a15:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0105a18:	a3 44 1b 12 c0       	mov    %eax,0xc0121b44
+c0105a1d:	89 15 48 1b 12 c0    	mov    %edx,0xc0121b48
+    nr_free = nr_free_store;
+c0105a23:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105a26:	a3 4c 1b 12 c0       	mov    %eax,0xc0121b4c
+
+    free_page(p);
+c0105a2b:	83 ec 08             	sub    $0x8,%esp
+c0105a2e:	6a 01                	push   $0x1
+c0105a30:	ff 75 dc             	pushl  -0x24(%ebp)
+c0105a33:	e8 bd 09 00 00       	call   c01063f5 <free_pages>
+c0105a38:	83 c4 10             	add    $0x10,%esp
+    free_page(p1);
+c0105a3b:	83 ec 08             	sub    $0x8,%esp
+c0105a3e:	6a 01                	push   $0x1
+c0105a40:	ff 75 f0             	pushl  -0x10(%ebp)
+c0105a43:	e8 ad 09 00 00       	call   c01063f5 <free_pages>
+c0105a48:	83 c4 10             	add    $0x10,%esp
+    free_page(p2);
+c0105a4b:	83 ec 08             	sub    $0x8,%esp
+c0105a4e:	6a 01                	push   $0x1
+c0105a50:	ff 75 f4             	pushl  -0xc(%ebp)
+c0105a53:	e8 9d 09 00 00       	call   c01063f5 <free_pages>
+c0105a58:	83 c4 10             	add    $0x10,%esp
+}
+c0105a5b:	90                   	nop
+c0105a5c:	c9                   	leave  
+c0105a5d:	c3                   	ret    
+
+c0105a5e <default_check>:
+
+// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+c0105a5e:	55                   	push   %ebp
+c0105a5f:	89 e5                	mov    %esp,%ebp
+c0105a61:	81 ec 88 00 00 00    	sub    $0x88,%esp
+    int count = 0, total = 0;
+c0105a67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0105a6e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    list_entry_t *le = &free_list;
+c0105a75:	c7 45 ec 44 1b 12 c0 	movl   $0xc0121b44,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c0105a7c:	eb 65                	jmp    c0105ae3 <default_check+0x85>
+        struct Page *p = le2page(le, page_link);
+c0105a7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105a81:	83 e8 0c             	sub    $0xc,%eax
+c0105a84:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        assert(PageProperty(p));
+c0105a87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105a8a:	83 c0 04             	add    $0x4,%eax
+c0105a8d:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
+c0105a94:	89 45 ac             	mov    %eax,-0x54(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0105a97:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0105a9a:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c0105a9d:	0f a3 10             	bt     %edx,(%eax)
+c0105aa0:	19 c0                	sbb    %eax,%eax
+c0105aa2:	89 45 a8             	mov    %eax,-0x58(%ebp)
+    return oldbit != 0;
+c0105aa5:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
+c0105aa9:	0f 95 c0             	setne  %al
+c0105aac:	0f b6 c0             	movzbl %al,%eax
+c0105aaf:	85 c0                	test   %eax,%eax
+c0105ab1:	75 1e                	jne    c0105ad1 <default_check+0x73>
+c0105ab3:	e8 92 af ff ff       	call   c0100a4a <print_stackframe>
+c0105ab8:	68 6e 9d 10 c0       	push   $0xc0109d6e
+c0105abd:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105ac2:	68 ec 00 00 00       	push   $0xec
+c0105ac7:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105acc:	e8 0b a9 ff ff       	call   c01003dc <__panic>
+        count ++, total += p->property;
+c0105ad1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0105ad5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105ad8:	8b 50 08             	mov    0x8(%eax),%edx
+c0105adb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105ade:	01 d0                	add    %edx,%eax
+c0105ae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105ae3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105ae6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0105ae9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105aec:	8b 40 04             	mov    0x4(%eax),%eax
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+    int count = 0, total = 0;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c0105aef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105af2:	81 7d ec 44 1b 12 c0 	cmpl   $0xc0121b44,-0x14(%ebp)
+c0105af9:	75 83                	jne    c0105a7e <default_check+0x20>
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+    }
+    assert(total == nr_free_pages());
+c0105afb:	e8 2a 09 00 00       	call   c010642a <nr_free_pages>
+c0105b00:	89 c2                	mov    %eax,%edx
+c0105b02:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105b05:	39 c2                	cmp    %eax,%edx
+c0105b07:	74 1e                	je     c0105b27 <default_check+0xc9>
+c0105b09:	e8 3c af ff ff       	call   c0100a4a <print_stackframe>
+c0105b0e:	68 7e 9d 10 c0       	push   $0xc0109d7e
+c0105b13:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105b18:	68 ef 00 00 00       	push   $0xef
+c0105b1d:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105b22:	e8 b5 a8 ff ff       	call   c01003dc <__panic>
+    //cprintf("count = %08x\n", count);
+
+    basic_check();
+c0105b27:	e8 5d fa ff ff       	call   c0105589 <basic_check>
+
+    struct Page *p0 = alloc_pages(5), *p1, *p2;
+c0105b2c:	83 ec 0c             	sub    $0xc,%esp
+c0105b2f:	6a 05                	push   $0x5
+c0105b31:	e8 53 08 00 00       	call   c0106389 <alloc_pages>
+c0105b36:	83 c4 10             	add    $0x10,%esp
+c0105b39:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    assert(p0 != NULL);
+c0105b3c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105b40:	75 1e                	jne    c0105b60 <default_check+0x102>
+c0105b42:	e8 03 af ff ff       	call   c0100a4a <print_stackframe>
+c0105b47:	68 97 9d 10 c0       	push   $0xc0109d97
+c0105b4c:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105b51:	68 f5 00 00 00       	push   $0xf5
+c0105b56:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105b5b:	e8 7c a8 ff ff       	call   c01003dc <__panic>
+    assert(!PageProperty(p0));
+c0105b60:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105b63:	83 c0 04             	add    $0x4,%eax
+c0105b66:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
+c0105b6d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0105b70:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0105b73:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0105b76:	0f a3 10             	bt     %edx,(%eax)
+c0105b79:	19 c0                	sbb    %eax,%eax
+c0105b7b:	89 45 a0             	mov    %eax,-0x60(%ebp)
+    return oldbit != 0;
+c0105b7e:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
+c0105b82:	0f 95 c0             	setne  %al
+c0105b85:	0f b6 c0             	movzbl %al,%eax
+c0105b88:	85 c0                	test   %eax,%eax
+c0105b8a:	74 1e                	je     c0105baa <default_check+0x14c>
+c0105b8c:	e8 b9 ae ff ff       	call   c0100a4a <print_stackframe>
+c0105b91:	68 a2 9d 10 c0       	push   $0xc0109da2
+c0105b96:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105b9b:	68 f6 00 00 00       	push   $0xf6
+c0105ba0:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105ba5:	e8 32 a8 ff ff       	call   c01003dc <__panic>
+
+    list_entry_t free_list_store = free_list;
+c0105baa:	a1 44 1b 12 c0       	mov    0xc0121b44,%eax
+c0105baf:	8b 15 48 1b 12 c0    	mov    0xc0121b48,%edx
+c0105bb5:	89 45 80             	mov    %eax,-0x80(%ebp)
+c0105bb8:	89 55 84             	mov    %edx,-0x7c(%ebp)
+c0105bbb:	c7 45 d0 44 1b 12 c0 	movl   $0xc0121b44,-0x30(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0105bc2:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105bc5:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0105bc8:	89 50 04             	mov    %edx,0x4(%eax)
+c0105bcb:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105bce:	8b 50 04             	mov    0x4(%eax),%edx
+c0105bd1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105bd4:	89 10                	mov    %edx,(%eax)
+c0105bd6:	c7 45 d8 44 1b 12 c0 	movl   $0xc0121b44,-0x28(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0105bdd:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0105be0:	8b 40 04             	mov    0x4(%eax),%eax
+c0105be3:	39 45 d8             	cmp    %eax,-0x28(%ebp)
+c0105be6:	0f 94 c0             	sete   %al
+c0105be9:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c0105bec:	85 c0                	test   %eax,%eax
+c0105bee:	75 1e                	jne    c0105c0e <default_check+0x1b0>
+c0105bf0:	e8 55 ae ff ff       	call   c0100a4a <print_stackframe>
+c0105bf5:	68 f7 9c 10 c0       	push   $0xc0109cf7
+c0105bfa:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105bff:	68 fa 00 00 00       	push   $0xfa
+c0105c04:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105c09:	e8 ce a7 ff ff       	call   c01003dc <__panic>
+    assert(alloc_page() == NULL);
+c0105c0e:	83 ec 0c             	sub    $0xc,%esp
+c0105c11:	6a 01                	push   $0x1
+c0105c13:	e8 71 07 00 00       	call   c0106389 <alloc_pages>
+c0105c18:	83 c4 10             	add    $0x10,%esp
+c0105c1b:	85 c0                	test   %eax,%eax
+c0105c1d:	74 1e                	je     c0105c3d <default_check+0x1df>
+c0105c1f:	e8 26 ae ff ff       	call   c0100a4a <print_stackframe>
+c0105c24:	68 0e 9d 10 c0       	push   $0xc0109d0e
+c0105c29:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105c2e:	68 fb 00 00 00       	push   $0xfb
+c0105c33:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105c38:	e8 9f a7 ff ff       	call   c01003dc <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c0105c3d:	a1 4c 1b 12 c0       	mov    0xc0121b4c,%eax
+c0105c42:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    nr_free = 0;
+c0105c45:	c7 05 4c 1b 12 c0 00 	movl   $0x0,0xc0121b4c
+c0105c4c:	00 00 00 
+
+    free_pages(p0 + 2, 3);
+c0105c4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105c52:	83 c0 40             	add    $0x40,%eax
+c0105c55:	83 ec 08             	sub    $0x8,%esp
+c0105c58:	6a 03                	push   $0x3
+c0105c5a:	50                   	push   %eax
+c0105c5b:	e8 95 07 00 00       	call   c01063f5 <free_pages>
+c0105c60:	83 c4 10             	add    $0x10,%esp
+    assert(alloc_pages(4) == NULL);
+c0105c63:	83 ec 0c             	sub    $0xc,%esp
+c0105c66:	6a 04                	push   $0x4
+c0105c68:	e8 1c 07 00 00       	call   c0106389 <alloc_pages>
+c0105c6d:	83 c4 10             	add    $0x10,%esp
+c0105c70:	85 c0                	test   %eax,%eax
+c0105c72:	74 1e                	je     c0105c92 <default_check+0x234>
+c0105c74:	e8 d1 ad ff ff       	call   c0100a4a <print_stackframe>
+c0105c79:	68 b4 9d 10 c0       	push   $0xc0109db4
+c0105c7e:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105c83:	68 01 01 00 00       	push   $0x101
+c0105c88:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105c8d:	e8 4a a7 ff ff       	call   c01003dc <__panic>
+    assert(PageProperty(p0 + 2) && p0[2].property == 3);
+c0105c92:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105c95:	83 c0 40             	add    $0x40,%eax
+c0105c98:	83 c0 04             	add    $0x4,%eax
+c0105c9b:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
+c0105ca2:	89 45 9c             	mov    %eax,-0x64(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0105ca5:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0105ca8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0105cab:	0f a3 10             	bt     %edx,(%eax)
+c0105cae:	19 c0                	sbb    %eax,%eax
+c0105cb0:	89 45 98             	mov    %eax,-0x68(%ebp)
+    return oldbit != 0;
+c0105cb3:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
+c0105cb7:	0f 95 c0             	setne  %al
+c0105cba:	0f b6 c0             	movzbl %al,%eax
+c0105cbd:	85 c0                	test   %eax,%eax
+c0105cbf:	74 0e                	je     c0105ccf <default_check+0x271>
+c0105cc1:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105cc4:	83 c0 40             	add    $0x40,%eax
+c0105cc7:	8b 40 08             	mov    0x8(%eax),%eax
+c0105cca:	83 f8 03             	cmp    $0x3,%eax
+c0105ccd:	74 1e                	je     c0105ced <default_check+0x28f>
+c0105ccf:	e8 76 ad ff ff       	call   c0100a4a <print_stackframe>
+c0105cd4:	68 cc 9d 10 c0       	push   $0xc0109dcc
+c0105cd9:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105cde:	68 02 01 00 00       	push   $0x102
+c0105ce3:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105ce8:	e8 ef a6 ff ff       	call   c01003dc <__panic>
+    assert((p1 = alloc_pages(3)) != NULL);
+c0105ced:	83 ec 0c             	sub    $0xc,%esp
+c0105cf0:	6a 03                	push   $0x3
+c0105cf2:	e8 92 06 00 00       	call   c0106389 <alloc_pages>
+c0105cf7:	83 c4 10             	add    $0x10,%esp
+c0105cfa:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c0105cfd:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
+c0105d01:	75 1e                	jne    c0105d21 <default_check+0x2c3>
+c0105d03:	e8 42 ad ff ff       	call   c0100a4a <print_stackframe>
+c0105d08:	68 f8 9d 10 c0       	push   $0xc0109df8
+c0105d0d:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105d12:	68 03 01 00 00       	push   $0x103
+c0105d17:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105d1c:	e8 bb a6 ff ff       	call   c01003dc <__panic>
+    assert(alloc_page() == NULL);
+c0105d21:	83 ec 0c             	sub    $0xc,%esp
+c0105d24:	6a 01                	push   $0x1
+c0105d26:	e8 5e 06 00 00       	call   c0106389 <alloc_pages>
+c0105d2b:	83 c4 10             	add    $0x10,%esp
+c0105d2e:	85 c0                	test   %eax,%eax
+c0105d30:	74 1e                	je     c0105d50 <default_check+0x2f2>
+c0105d32:	e8 13 ad ff ff       	call   c0100a4a <print_stackframe>
+c0105d37:	68 0e 9d 10 c0       	push   $0xc0109d0e
+c0105d3c:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105d41:	68 04 01 00 00       	push   $0x104
+c0105d46:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105d4b:	e8 8c a6 ff ff       	call   c01003dc <__panic>
+    assert(p0 + 2 == p1);
+c0105d50:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105d53:	83 c0 40             	add    $0x40,%eax
+c0105d56:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
+c0105d59:	74 1e                	je     c0105d79 <default_check+0x31b>
+c0105d5b:	e8 ea ac ff ff       	call   c0100a4a <print_stackframe>
+c0105d60:	68 16 9e 10 c0       	push   $0xc0109e16
+c0105d65:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105d6a:	68 05 01 00 00       	push   $0x105
+c0105d6f:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105d74:	e8 63 a6 ff ff       	call   c01003dc <__panic>
+
+    p2 = p0 + 1;
+c0105d79:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105d7c:	83 c0 20             	add    $0x20,%eax
+c0105d7f:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    free_page(p0);
+c0105d82:	83 ec 08             	sub    $0x8,%esp
+c0105d85:	6a 01                	push   $0x1
+c0105d87:	ff 75 dc             	pushl  -0x24(%ebp)
+c0105d8a:	e8 66 06 00 00       	call   c01063f5 <free_pages>
+c0105d8f:	83 c4 10             	add    $0x10,%esp
+    free_pages(p1, 3);
+c0105d92:	83 ec 08             	sub    $0x8,%esp
+c0105d95:	6a 03                	push   $0x3
+c0105d97:	ff 75 c4             	pushl  -0x3c(%ebp)
+c0105d9a:	e8 56 06 00 00       	call   c01063f5 <free_pages>
+c0105d9f:	83 c4 10             	add    $0x10,%esp
+    //cprintf("%08x %08x\n", PageProperty(p0), p0->property);
+    assert(PageProperty(p0) && p0->property == 1);
+c0105da2:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105da5:	83 c0 04             	add    $0x4,%eax
+c0105da8:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
+c0105daf:	89 45 94             	mov    %eax,-0x6c(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0105db2:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0105db5:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0105db8:	0f a3 10             	bt     %edx,(%eax)
+c0105dbb:	19 c0                	sbb    %eax,%eax
+c0105dbd:	89 45 90             	mov    %eax,-0x70(%ebp)
+    return oldbit != 0;
+c0105dc0:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
+c0105dc4:	0f 95 c0             	setne  %al
+c0105dc7:	0f b6 c0             	movzbl %al,%eax
+c0105dca:	85 c0                	test   %eax,%eax
+c0105dcc:	74 0b                	je     c0105dd9 <default_check+0x37b>
+c0105dce:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105dd1:	8b 40 08             	mov    0x8(%eax),%eax
+c0105dd4:	83 f8 01             	cmp    $0x1,%eax
+c0105dd7:	74 1e                	je     c0105df7 <default_check+0x399>
+c0105dd9:	e8 6c ac ff ff       	call   c0100a4a <print_stackframe>
+c0105dde:	68 24 9e 10 c0       	push   $0xc0109e24
+c0105de3:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105de8:	68 0b 01 00 00       	push   $0x10b
+c0105ded:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105df2:	e8 e5 a5 ff ff       	call   c01003dc <__panic>
+    assert(PageProperty(p1) && p1->property == 3);
+c0105df7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0105dfa:	83 c0 04             	add    $0x4,%eax
+c0105dfd:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+c0105e04:	89 45 8c             	mov    %eax,-0x74(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0105e07:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0105e0a:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c0105e0d:	0f a3 10             	bt     %edx,(%eax)
+c0105e10:	19 c0                	sbb    %eax,%eax
+c0105e12:	89 45 88             	mov    %eax,-0x78(%ebp)
+    return oldbit != 0;
+c0105e15:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
+c0105e19:	0f 95 c0             	setne  %al
+c0105e1c:	0f b6 c0             	movzbl %al,%eax
+c0105e1f:	85 c0                	test   %eax,%eax
+c0105e21:	74 0b                	je     c0105e2e <default_check+0x3d0>
+c0105e23:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0105e26:	8b 40 08             	mov    0x8(%eax),%eax
+c0105e29:	83 f8 03             	cmp    $0x3,%eax
+c0105e2c:	74 1e                	je     c0105e4c <default_check+0x3ee>
+c0105e2e:	e8 17 ac ff ff       	call   c0100a4a <print_stackframe>
+c0105e33:	68 4c 9e 10 c0       	push   $0xc0109e4c
+c0105e38:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105e3d:	68 0c 01 00 00       	push   $0x10c
+c0105e42:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105e47:	e8 90 a5 ff ff       	call   c01003dc <__panic>
+
+    assert((p0 = alloc_page()) == p2 - 1);
+c0105e4c:	83 ec 0c             	sub    $0xc,%esp
+c0105e4f:	6a 01                	push   $0x1
+c0105e51:	e8 33 05 00 00       	call   c0106389 <alloc_pages>
+c0105e56:	83 c4 10             	add    $0x10,%esp
+c0105e59:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105e5c:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0105e5f:	83 e8 20             	sub    $0x20,%eax
+c0105e62:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c0105e65:	74 1e                	je     c0105e85 <default_check+0x427>
+c0105e67:	e8 de ab ff ff       	call   c0100a4a <print_stackframe>
+c0105e6c:	68 72 9e 10 c0       	push   $0xc0109e72
+c0105e71:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105e76:	68 0e 01 00 00       	push   $0x10e
+c0105e7b:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105e80:	e8 57 a5 ff ff       	call   c01003dc <__panic>
+    free_page(p0);
+c0105e85:	83 ec 08             	sub    $0x8,%esp
+c0105e88:	6a 01                	push   $0x1
+c0105e8a:	ff 75 dc             	pushl  -0x24(%ebp)
+c0105e8d:	e8 63 05 00 00       	call   c01063f5 <free_pages>
+c0105e92:	83 c4 10             	add    $0x10,%esp
+    assert((p0 = alloc_pages(2)) == p2 + 1);
+c0105e95:	83 ec 0c             	sub    $0xc,%esp
+c0105e98:	6a 02                	push   $0x2
+c0105e9a:	e8 ea 04 00 00       	call   c0106389 <alloc_pages>
+c0105e9f:	83 c4 10             	add    $0x10,%esp
+c0105ea2:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105ea5:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0105ea8:	83 c0 20             	add    $0x20,%eax
+c0105eab:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c0105eae:	74 1e                	je     c0105ece <default_check+0x470>
+c0105eb0:	e8 95 ab ff ff       	call   c0100a4a <print_stackframe>
+c0105eb5:	68 90 9e 10 c0       	push   $0xc0109e90
+c0105eba:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105ebf:	68 10 01 00 00       	push   $0x110
+c0105ec4:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105ec9:	e8 0e a5 ff ff       	call   c01003dc <__panic>
+
+    free_pages(p0, 2);
+c0105ece:	83 ec 08             	sub    $0x8,%esp
+c0105ed1:	6a 02                	push   $0x2
+c0105ed3:	ff 75 dc             	pushl  -0x24(%ebp)
+c0105ed6:	e8 1a 05 00 00       	call   c01063f5 <free_pages>
+c0105edb:	83 c4 10             	add    $0x10,%esp
+    free_page(p2);
+c0105ede:	83 ec 08             	sub    $0x8,%esp
+c0105ee1:	6a 01                	push   $0x1
+c0105ee3:	ff 75 c0             	pushl  -0x40(%ebp)
+c0105ee6:	e8 0a 05 00 00       	call   c01063f5 <free_pages>
+c0105eeb:	83 c4 10             	add    $0x10,%esp
+
+    assert((p0 = alloc_pages(5)) != NULL);
+c0105eee:	83 ec 0c             	sub    $0xc,%esp
+c0105ef1:	6a 05                	push   $0x5
+c0105ef3:	e8 91 04 00 00       	call   c0106389 <alloc_pages>
+c0105ef8:	83 c4 10             	add    $0x10,%esp
+c0105efb:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105efe:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105f02:	75 1e                	jne    c0105f22 <default_check+0x4c4>
+c0105f04:	e8 41 ab ff ff       	call   c0100a4a <print_stackframe>
+c0105f09:	68 b0 9e 10 c0       	push   $0xc0109eb0
+c0105f0e:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105f13:	68 15 01 00 00       	push   $0x115
+c0105f18:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105f1d:	e8 ba a4 ff ff       	call   c01003dc <__panic>
+    assert(alloc_page() == NULL);
+c0105f22:	83 ec 0c             	sub    $0xc,%esp
+c0105f25:	6a 01                	push   $0x1
+c0105f27:	e8 5d 04 00 00       	call   c0106389 <alloc_pages>
+c0105f2c:	83 c4 10             	add    $0x10,%esp
+c0105f2f:	85 c0                	test   %eax,%eax
+c0105f31:	74 1e                	je     c0105f51 <default_check+0x4f3>
+c0105f33:	e8 12 ab ff ff       	call   c0100a4a <print_stackframe>
+c0105f38:	68 0e 9d 10 c0       	push   $0xc0109d0e
+c0105f3d:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105f42:	68 16 01 00 00       	push   $0x116
+c0105f47:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105f4c:	e8 8b a4 ff ff       	call   c01003dc <__panic>
+
+    assert(nr_free == 0);
+c0105f51:	a1 4c 1b 12 c0       	mov    0xc0121b4c,%eax
+c0105f56:	85 c0                	test   %eax,%eax
+c0105f58:	74 1e                	je     c0105f78 <default_check+0x51a>
+c0105f5a:	e8 eb aa ff ff       	call   c0100a4a <print_stackframe>
+c0105f5f:	68 61 9d 10 c0       	push   $0xc0109d61
+c0105f64:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105f69:	68 18 01 00 00       	push   $0x118
+c0105f6e:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105f73:	e8 64 a4 ff ff       	call   c01003dc <__panic>
+    nr_free = nr_free_store;
+c0105f78:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0105f7b:	a3 4c 1b 12 c0       	mov    %eax,0xc0121b4c
+
+    free_list = free_list_store;
+c0105f80:	8b 45 80             	mov    -0x80(%ebp),%eax
+c0105f83:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c0105f86:	a3 44 1b 12 c0       	mov    %eax,0xc0121b44
+c0105f8b:	89 15 48 1b 12 c0    	mov    %edx,0xc0121b48
+    free_pages(p0, 5);
+c0105f91:	83 ec 08             	sub    $0x8,%esp
+c0105f94:	6a 05                	push   $0x5
+c0105f96:	ff 75 dc             	pushl  -0x24(%ebp)
+c0105f99:	e8 57 04 00 00       	call   c01063f5 <free_pages>
+c0105f9e:	83 c4 10             	add    $0x10,%esp
+
+    le = &free_list;
+c0105fa1:	c7 45 ec 44 1b 12 c0 	movl   $0xc0121b44,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c0105fa8:	eb 1d                	jmp    c0105fc7 <default_check+0x569>
+        struct Page *p = le2page(le, page_link);
+c0105faa:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105fad:	83 e8 0c             	sub    $0xc,%eax
+c0105fb0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+        count --, total -= p->property;
+c0105fb3:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0105fb7:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0105fba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0105fbd:	8b 40 08             	mov    0x8(%eax),%eax
+c0105fc0:	29 c2                	sub    %eax,%edx
+c0105fc2:	89 d0                	mov    %edx,%eax
+c0105fc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105fc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105fca:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0105fcd:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0105fd0:	8b 40 04             	mov    0x4(%eax),%eax
+
+    free_list = free_list_store;
+    free_pages(p0, 5);
+
+    le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c0105fd3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105fd6:	81 7d ec 44 1b 12 c0 	cmpl   $0xc0121b44,-0x14(%ebp)
+c0105fdd:	75 cb                	jne    c0105faa <default_check+0x54c>
+        struct Page *p = le2page(le, page_link);
+        count --, total -= p->property;
+	//cprintf("Page: %08x %08x %08x size: %08x\n", p, p + p->property, PageProperty(p), p->property);
+    }
+    //cprintf("count = %08x\n", count);
+    assert(count == 0);
+c0105fdf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105fe3:	74 1e                	je     c0106003 <default_check+0x5a5>
+c0105fe5:	e8 60 aa ff ff       	call   c0100a4a <print_stackframe>
+c0105fea:	68 ce 9e 10 c0       	push   $0xc0109ece
+c0105fef:	68 86 9b 10 c0       	push   $0xc0109b86
+c0105ff4:	68 25 01 00 00       	push   $0x125
+c0105ff9:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0105ffe:	e8 d9 a3 ff ff       	call   c01003dc <__panic>
+    assert(total == 0);
+c0106003:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106007:	74 1e                	je     c0106027 <default_check+0x5c9>
+c0106009:	e8 3c aa ff ff       	call   c0100a4a <print_stackframe>
+c010600e:	68 d9 9e 10 c0       	push   $0xc0109ed9
+c0106013:	68 86 9b 10 c0       	push   $0xc0109b86
+c0106018:	68 26 01 00 00       	push   $0x126
+c010601d:	68 9b 9b 10 c0       	push   $0xc0109b9b
+c0106022:	e8 b5 a3 ff ff       	call   c01003dc <__panic>
+}
+c0106027:	90                   	nop
+c0106028:	c9                   	leave  
+c0106029:	c3                   	ret    
+
+c010602a <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c010602a:	55                   	push   %ebp
+c010602b:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c010602d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106030:	8b 15 58 1b 12 c0    	mov    0xc0121b58,%edx
+c0106036:	29 d0                	sub    %edx,%eax
+c0106038:	c1 f8 05             	sar    $0x5,%eax
+}
+c010603b:	5d                   	pop    %ebp
+c010603c:	c3                   	ret    
+
+c010603d <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c010603d:	55                   	push   %ebp
+c010603e:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c0106040:	ff 75 08             	pushl  0x8(%ebp)
+c0106043:	e8 e2 ff ff ff       	call   c010602a <page2ppn>
+c0106048:	83 c4 04             	add    $0x4,%esp
+c010604b:	c1 e0 0c             	shl    $0xc,%eax
+}
+c010604e:	c9                   	leave  
+c010604f:	c3                   	ret    
+
+c0106050 <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0106050:	55                   	push   %ebp
+c0106051:	89 e5                	mov    %esp,%ebp
+c0106053:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c0106056:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106059:	c1 e8 0c             	shr    $0xc,%eax
+c010605c:	89 c2                	mov    %eax,%edx
+c010605e:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c0106063:	39 c2                	cmp    %eax,%edx
+c0106065:	72 19                	jb     c0106080 <pa2page+0x30>
+        panic("pa2page called with invalid pa");
+c0106067:	e8 de a9 ff ff       	call   c0100a4a <print_stackframe>
+c010606c:	83 ec 04             	sub    $0x4,%esp
+c010606f:	68 14 9f 10 c0       	push   $0xc0109f14
+c0106074:	6a 5b                	push   $0x5b
+c0106076:	68 33 9f 10 c0       	push   $0xc0109f33
+c010607b:	e8 5c a3 ff ff       	call   c01003dc <__panic>
+    }
+    return &pages[PPN(pa)];
+c0106080:	a1 58 1b 12 c0       	mov    0xc0121b58,%eax
+c0106085:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106088:	c1 ea 0c             	shr    $0xc,%edx
+c010608b:	c1 e2 05             	shl    $0x5,%edx
+c010608e:	01 d0                	add    %edx,%eax
+}
+c0106090:	c9                   	leave  
+c0106091:	c3                   	ret    
+
+c0106092 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c0106092:	55                   	push   %ebp
+c0106093:	89 e5                	mov    %esp,%ebp
+c0106095:	83 ec 18             	sub    $0x18,%esp
+    return KADDR(page2pa(page));
+c0106098:	ff 75 08             	pushl  0x8(%ebp)
+c010609b:	e8 9d ff ff ff       	call   c010603d <page2pa>
+c01060a0:	83 c4 04             	add    $0x4,%esp
+c01060a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01060a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01060a9:	c1 e8 0c             	shr    $0xc,%eax
+c01060ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01060af:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c01060b4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c01060b7:	72 19                	jb     c01060d2 <page2kva+0x40>
+c01060b9:	e8 8c a9 ff ff       	call   c0100a4a <print_stackframe>
+c01060be:	ff 75 f4             	pushl  -0xc(%ebp)
+c01060c1:	68 44 9f 10 c0       	push   $0xc0109f44
+c01060c6:	6a 62                	push   $0x62
+c01060c8:	68 33 9f 10 c0       	push   $0xc0109f33
+c01060cd:	e8 0a a3 ff ff       	call   c01003dc <__panic>
+c01060d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01060d5:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c01060da:	c9                   	leave  
+c01060db:	c3                   	ret    
+
+c01060dc <kva2page>:
+
+static inline struct Page *
+kva2page(void *kva) {
+c01060dc:	55                   	push   %ebp
+c01060dd:	89 e5                	mov    %esp,%ebp
+c01060df:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PADDR(kva));
+c01060e2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01060e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01060e8:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c01060ef:	77 19                	ja     c010610a <kva2page+0x2e>
+c01060f1:	e8 54 a9 ff ff       	call   c0100a4a <print_stackframe>
+c01060f6:	ff 75 f4             	pushl  -0xc(%ebp)
+c01060f9:	68 68 9f 10 c0       	push   $0xc0109f68
+c01060fe:	6a 67                	push   $0x67
+c0106100:	68 33 9f 10 c0       	push   $0xc0109f33
+c0106105:	e8 d2 a2 ff ff       	call   c01003dc <__panic>
+c010610a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010610d:	05 00 00 00 40       	add    $0x40000000,%eax
+c0106112:	83 ec 0c             	sub    $0xc,%esp
+c0106115:	50                   	push   %eax
+c0106116:	e8 35 ff ff ff       	call   c0106050 <pa2page>
+c010611b:	83 c4 10             	add    $0x10,%esp
+}
+c010611e:	c9                   	leave  
+c010611f:	c3                   	ret    
+
+c0106120 <pte2page>:
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c0106120:	55                   	push   %ebp
+c0106121:	89 e5                	mov    %esp,%ebp
+c0106123:	83 ec 08             	sub    $0x8,%esp
+    if (!(pte & PTE_P)) {
+c0106126:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106129:	83 e0 01             	and    $0x1,%eax
+c010612c:	85 c0                	test   %eax,%eax
+c010612e:	75 19                	jne    c0106149 <pte2page+0x29>
+        panic("pte2page called with invalid pte");
+c0106130:	e8 15 a9 ff ff       	call   c0100a4a <print_stackframe>
+c0106135:	83 ec 04             	sub    $0x4,%esp
+c0106138:	68 8c 9f 10 c0       	push   $0xc0109f8c
+c010613d:	6a 6d                	push   $0x6d
+c010613f:	68 33 9f 10 c0       	push   $0xc0109f33
+c0106144:	e8 93 a2 ff ff       	call   c01003dc <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c0106149:	8b 45 08             	mov    0x8(%ebp),%eax
+c010614c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106151:	83 ec 0c             	sub    $0xc,%esp
+c0106154:	50                   	push   %eax
+c0106155:	e8 f6 fe ff ff       	call   c0106050 <pa2page>
+c010615a:	83 c4 10             	add    $0x10,%esp
+}
+c010615d:	c9                   	leave  
+c010615e:	c3                   	ret    
+
+c010615f <pde2page>:
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c010615f:	55                   	push   %ebp
+c0106160:	89 e5                	mov    %esp,%ebp
+c0106162:	83 ec 08             	sub    $0x8,%esp
+    return pa2page(PDE_ADDR(pde));
+c0106165:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106168:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010616d:	83 ec 0c             	sub    $0xc,%esp
+c0106170:	50                   	push   %eax
+c0106171:	e8 da fe ff ff       	call   c0106050 <pa2page>
+c0106176:	83 c4 10             	add    $0x10,%esp
+}
+c0106179:	c9                   	leave  
+c010617a:	c3                   	ret    
+
+c010617b <page_ref>:
+
+static inline int
+page_ref(struct Page *page) {
+c010617b:	55                   	push   %ebp
+c010617c:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c010617e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106181:	8b 00                	mov    (%eax),%eax
+}
+c0106183:	5d                   	pop    %ebp
+c0106184:	c3                   	ret    
+
+c0106185 <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c0106185:	55                   	push   %ebp
+c0106186:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c0106188:	8b 45 08             	mov    0x8(%ebp),%eax
+c010618b:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010618e:	89 10                	mov    %edx,(%eax)
+}
+c0106190:	90                   	nop
+c0106191:	5d                   	pop    %ebp
+c0106192:	c3                   	ret    
+
+c0106193 <page_ref_inc>:
+
+static inline int
+page_ref_inc(struct Page *page) {
+c0106193:	55                   	push   %ebp
+c0106194:	89 e5                	mov    %esp,%ebp
+    page->ref += 1;
+c0106196:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106199:	8b 00                	mov    (%eax),%eax
+c010619b:	8d 50 01             	lea    0x1(%eax),%edx
+c010619e:	8b 45 08             	mov    0x8(%ebp),%eax
+c01061a1:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c01061a3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01061a6:	8b 00                	mov    (%eax),%eax
+}
+c01061a8:	5d                   	pop    %ebp
+c01061a9:	c3                   	ret    
+
+c01061aa <page_ref_dec>:
+
+static inline int
+page_ref_dec(struct Page *page) {
+c01061aa:	55                   	push   %ebp
+c01061ab:	89 e5                	mov    %esp,%ebp
+    page->ref -= 1;
+c01061ad:	8b 45 08             	mov    0x8(%ebp),%eax
+c01061b0:	8b 00                	mov    (%eax),%eax
+c01061b2:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01061b5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01061b8:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c01061ba:	8b 45 08             	mov    0x8(%ebp),%eax
+c01061bd:	8b 00                	mov    (%eax),%eax
+}
+c01061bf:	5d                   	pop    %ebp
+c01061c0:	c3                   	ret    
+
+c01061c1 <__intr_save>:
+#include <x86.h>
+#include <intr.h>
+#include <mmu.h>
+
+static inline bool
+__intr_save(void) {
+c01061c1:	55                   	push   %ebp
+c01061c2:	89 e5                	mov    %esp,%ebp
+c01061c4:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c01061c7:	9c                   	pushf  
+c01061c8:	58                   	pop    %eax
+c01061c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c01061cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c01061cf:	25 00 02 00 00       	and    $0x200,%eax
+c01061d4:	85 c0                	test   %eax,%eax
+c01061d6:	74 0c                	je     c01061e4 <__intr_save+0x23>
+        intr_disable();
+c01061d8:	e8 d1 be ff ff       	call   c01020ae <intr_disable>
+        return 1;
+c01061dd:	b8 01 00 00 00       	mov    $0x1,%eax
+c01061e2:	eb 05                	jmp    c01061e9 <__intr_save+0x28>
+    }
+    return 0;
+c01061e4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01061e9:	c9                   	leave  
+c01061ea:	c3                   	ret    
+
+c01061eb <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c01061eb:	55                   	push   %ebp
+c01061ec:	89 e5                	mov    %esp,%ebp
+c01061ee:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c01061f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01061f5:	74 05                	je     c01061fc <__intr_restore+0x11>
+        intr_enable();
+c01061f7:	e8 ab be ff ff       	call   c01020a7 <intr_enable>
+    }
+}
+c01061fc:	90                   	nop
+c01061fd:	c9                   	leave  
+c01061fe:	c3                   	ret    
+
+c01061ff <lgdt>:
+/* *
+ * lgdt - load the global descriptor table register and reset the
+ * data/code segement registers for kernel.
+ * */
+static inline void
+lgdt(struct pseudodesc *pd) {
+c01061ff:	55                   	push   %ebp
+c0106200:	89 e5                	mov    %esp,%ebp
+    asm volatile ("lgdt (%0)" :: "r" (pd));
+c0106202:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106205:	0f 01 10             	lgdtl  (%eax)
+    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
+c0106208:	b8 23 00 00 00       	mov    $0x23,%eax
+c010620d:	8e e8                	mov    %eax,%gs
+    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
+c010620f:	b8 23 00 00 00       	mov    $0x23,%eax
+c0106214:	8e e0                	mov    %eax,%fs
+    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
+c0106216:	b8 10 00 00 00       	mov    $0x10,%eax
+c010621b:	8e c0                	mov    %eax,%es
+    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
+c010621d:	b8 10 00 00 00       	mov    $0x10,%eax
+c0106222:	8e d8                	mov    %eax,%ds
+    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
+c0106224:	b8 10 00 00 00       	mov    $0x10,%eax
+c0106229:	8e d0                	mov    %eax,%ss
+    // reload cs
+    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
+c010622b:	ea 32 62 10 c0 08 00 	ljmp   $0x8,$0xc0106232
+}
+c0106232:	90                   	nop
+c0106233:	5d                   	pop    %ebp
+c0106234:	c3                   	ret    
+
+c0106235 <load_esp0>:
+ * load_esp0 - change the ESP0 in default task state segment,
+ * so that we can use different kernel stack when we trap frame
+ * user to kernel.
+ * */
+void
+load_esp0(uintptr_t esp0) {
+c0106235:	55                   	push   %ebp
+c0106236:	89 e5                	mov    %esp,%ebp
+    ts.ts_esp0 = esp0;
+c0106238:	8b 45 08             	mov    0x8(%ebp),%eax
+c010623b:	a3 04 1a 12 c0       	mov    %eax,0xc0121a04
+}
+c0106240:	90                   	nop
+c0106241:	5d                   	pop    %ebp
+c0106242:	c3                   	ret    
+
+c0106243 <gdt_init>:
+
+/* gdt_init - initialize the default GDT and TSS */
+static void
+gdt_init(void) {
+c0106243:	55                   	push   %ebp
+c0106244:	89 e5                	mov    %esp,%ebp
+c0106246:	83 ec 10             	sub    $0x10,%esp
+    // set boot kernel stack and default SS0
+    load_esp0((uintptr_t)bootstacktop);
+c0106249:	b8 00 00 12 c0       	mov    $0xc0120000,%eax
+c010624e:	50                   	push   %eax
+c010624f:	e8 e1 ff ff ff       	call   c0106235 <load_esp0>
+c0106254:	83 c4 04             	add    $0x4,%esp
+    ts.ts_ss0 = KERNEL_DS;
+c0106257:	66 c7 05 08 1a 12 c0 	movw   $0x10,0xc0121a08
+c010625e:	10 00 
+
+    // initialize the TSS filed of the gdt
+    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
+c0106260:	66 c7 05 48 0a 12 c0 	movw   $0x68,0xc0120a48
+c0106267:	68 00 
+c0106269:	b8 00 1a 12 c0       	mov    $0xc0121a00,%eax
+c010626e:	66 a3 4a 0a 12 c0    	mov    %ax,0xc0120a4a
+c0106274:	b8 00 1a 12 c0       	mov    $0xc0121a00,%eax
+c0106279:	c1 e8 10             	shr    $0x10,%eax
+c010627c:	a2 4c 0a 12 c0       	mov    %al,0xc0120a4c
+c0106281:	0f b6 05 4d 0a 12 c0 	movzbl 0xc0120a4d,%eax
+c0106288:	83 e0 f0             	and    $0xfffffff0,%eax
+c010628b:	83 c8 09             	or     $0x9,%eax
+c010628e:	a2 4d 0a 12 c0       	mov    %al,0xc0120a4d
+c0106293:	0f b6 05 4d 0a 12 c0 	movzbl 0xc0120a4d,%eax
+c010629a:	83 e0 ef             	and    $0xffffffef,%eax
+c010629d:	a2 4d 0a 12 c0       	mov    %al,0xc0120a4d
+c01062a2:	0f b6 05 4d 0a 12 c0 	movzbl 0xc0120a4d,%eax
+c01062a9:	83 e0 9f             	and    $0xffffff9f,%eax
+c01062ac:	a2 4d 0a 12 c0       	mov    %al,0xc0120a4d
+c01062b1:	0f b6 05 4d 0a 12 c0 	movzbl 0xc0120a4d,%eax
+c01062b8:	83 c8 80             	or     $0xffffff80,%eax
+c01062bb:	a2 4d 0a 12 c0       	mov    %al,0xc0120a4d
+c01062c0:	0f b6 05 4e 0a 12 c0 	movzbl 0xc0120a4e,%eax
+c01062c7:	83 e0 f0             	and    $0xfffffff0,%eax
+c01062ca:	a2 4e 0a 12 c0       	mov    %al,0xc0120a4e
+c01062cf:	0f b6 05 4e 0a 12 c0 	movzbl 0xc0120a4e,%eax
+c01062d6:	83 e0 ef             	and    $0xffffffef,%eax
+c01062d9:	a2 4e 0a 12 c0       	mov    %al,0xc0120a4e
+c01062de:	0f b6 05 4e 0a 12 c0 	movzbl 0xc0120a4e,%eax
+c01062e5:	83 e0 df             	and    $0xffffffdf,%eax
+c01062e8:	a2 4e 0a 12 c0       	mov    %al,0xc0120a4e
+c01062ed:	0f b6 05 4e 0a 12 c0 	movzbl 0xc0120a4e,%eax
+c01062f4:	83 c8 40             	or     $0x40,%eax
+c01062f7:	a2 4e 0a 12 c0       	mov    %al,0xc0120a4e
+c01062fc:	0f b6 05 4e 0a 12 c0 	movzbl 0xc0120a4e,%eax
+c0106303:	83 e0 7f             	and    $0x7f,%eax
+c0106306:	a2 4e 0a 12 c0       	mov    %al,0xc0120a4e
+c010630b:	b8 00 1a 12 c0       	mov    $0xc0121a00,%eax
+c0106310:	c1 e8 18             	shr    $0x18,%eax
+c0106313:	a2 4f 0a 12 c0       	mov    %al,0xc0120a4f
+
+    // reload all segment registers
+    lgdt(&gdt_pd);
+c0106318:	68 50 0a 12 c0       	push   $0xc0120a50
+c010631d:	e8 dd fe ff ff       	call   c01061ff <lgdt>
+c0106322:	83 c4 04             	add    $0x4,%esp
+c0106325:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
+    asm volatile ("cli" ::: "memory");
+}
+
+static inline void
+ltr(uint16_t sel) {
+    asm volatile ("ltr %0" :: "r" (sel) : "memory");
+c010632b:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c010632f:	0f 00 d8             	ltr    %ax
+
+    // load the TSS
+    ltr(GD_TSS);
+}
+c0106332:	90                   	nop
+c0106333:	c9                   	leave  
+c0106334:	c3                   	ret    
+
+c0106335 <init_pmm_manager>:
+
+//init_pmm_manager - initialize a pmm_manager instance
+static void
+init_pmm_manager(void) {
+c0106335:	55                   	push   %ebp
+c0106336:	89 e5                	mov    %esp,%ebp
+c0106338:	83 ec 08             	sub    $0x8,%esp
+    pmm_manager = &default_pmm_manager;
+c010633b:	c7 05 50 1b 12 c0 f8 	movl   $0xc0109ef8,0xc0121b50
+c0106342:	9e 10 c0 
+    cprintf("memory management: %s\n", pmm_manager->name);
+c0106345:	a1 50 1b 12 c0       	mov    0xc0121b50,%eax
+c010634a:	8b 00                	mov    (%eax),%eax
+c010634c:	83 ec 08             	sub    $0x8,%esp
+c010634f:	50                   	push   %eax
+c0106350:	68 b8 9f 10 c0       	push   $0xc0109fb8
+c0106355:	e8 1c 9f ff ff       	call   c0100276 <cprintf>
+c010635a:	83 c4 10             	add    $0x10,%esp
+    pmm_manager->init();
+c010635d:	a1 50 1b 12 c0       	mov    0xc0121b50,%eax
+c0106362:	8b 40 04             	mov    0x4(%eax),%eax
+c0106365:	ff d0                	call   *%eax
+}
+c0106367:	90                   	nop
+c0106368:	c9                   	leave  
+c0106369:	c3                   	ret    
+
+c010636a <init_memmap>:
+
+//init_memmap - call pmm->init_memmap to build Page struct for free memory  
+static void
+init_memmap(struct Page *base, size_t n) {
+c010636a:	55                   	push   %ebp
+c010636b:	89 e5                	mov    %esp,%ebp
+c010636d:	83 ec 08             	sub    $0x8,%esp
+    pmm_manager->init_memmap(base, n);
+c0106370:	a1 50 1b 12 c0       	mov    0xc0121b50,%eax
+c0106375:	8b 40 08             	mov    0x8(%eax),%eax
+c0106378:	83 ec 08             	sub    $0x8,%esp
+c010637b:	ff 75 0c             	pushl  0xc(%ebp)
+c010637e:	ff 75 08             	pushl  0x8(%ebp)
+c0106381:	ff d0                	call   *%eax
+c0106383:	83 c4 10             	add    $0x10,%esp
+}
+c0106386:	90                   	nop
+c0106387:	c9                   	leave  
+c0106388:	c3                   	ret    
+
+c0106389 <alloc_pages>:
+
+//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
+struct Page *
+alloc_pages(size_t n) {
+c0106389:	55                   	push   %ebp
+c010638a:	89 e5                	mov    %esp,%ebp
+c010638c:	83 ec 18             	sub    $0x18,%esp
+    struct Page *page=NULL;
+c010638f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    
+    while (1)
+    {
+         local_intr_save(intr_flag);
+c0106396:	e8 26 fe ff ff       	call   c01061c1 <__intr_save>
+c010639b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+         {
+              page = pmm_manager->alloc_pages(n);
+c010639e:	a1 50 1b 12 c0       	mov    0xc0121b50,%eax
+c01063a3:	8b 40 0c             	mov    0xc(%eax),%eax
+c01063a6:	83 ec 0c             	sub    $0xc,%esp
+c01063a9:	ff 75 08             	pushl  0x8(%ebp)
+c01063ac:	ff d0                	call   *%eax
+c01063ae:	83 c4 10             	add    $0x10,%esp
+c01063b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+         }
+         local_intr_restore(intr_flag);
+c01063b4:	83 ec 0c             	sub    $0xc,%esp
+c01063b7:	ff 75 f0             	pushl  -0x10(%ebp)
+c01063ba:	e8 2c fe ff ff       	call   c01061eb <__intr_restore>
+c01063bf:	83 c4 10             	add    $0x10,%esp
+
+         if (page != NULL || n > 1 || swap_init_ok == 0) break;
+c01063c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01063c6:	75 28                	jne    c01063f0 <alloc_pages+0x67>
+c01063c8:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
+c01063cc:	77 22                	ja     c01063f0 <alloc_pages+0x67>
+c01063ce:	a1 cc 19 12 c0       	mov    0xc01219cc,%eax
+c01063d3:	85 c0                	test   %eax,%eax
+c01063d5:	74 19                	je     c01063f0 <alloc_pages+0x67>
+         
+         extern struct mm_struct *check_mm_struct;
+         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
+         swap_out(check_mm_struct, n, 0);
+c01063d7:	8b 55 08             	mov    0x8(%ebp),%edx
+c01063da:	a1 70 1a 12 c0       	mov    0xc0121a70,%eax
+c01063df:	83 ec 04             	sub    $0x4,%esp
+c01063e2:	6a 00                	push   $0x0
+c01063e4:	52                   	push   %edx
+c01063e5:	50                   	push   %eax
+c01063e6:	e8 e9 e1 ff ff       	call   c01045d4 <swap_out>
+c01063eb:	83 c4 10             	add    $0x10,%esp
+    }
+c01063ee:	eb a6                	jmp    c0106396 <alloc_pages+0xd>
+    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
+    return page;
+c01063f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01063f3:	c9                   	leave  
+c01063f4:	c3                   	ret    
+
+c01063f5 <free_pages>:
+
+//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
+void
+free_pages(struct Page *base, size_t n) {
+c01063f5:	55                   	push   %ebp
+c01063f6:	89 e5                	mov    %esp,%ebp
+c01063f8:	83 ec 18             	sub    $0x18,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c01063fb:	e8 c1 fd ff ff       	call   c01061c1 <__intr_save>
+c0106400:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        pmm_manager->free_pages(base, n);
+c0106403:	a1 50 1b 12 c0       	mov    0xc0121b50,%eax
+c0106408:	8b 40 10             	mov    0x10(%eax),%eax
+c010640b:	83 ec 08             	sub    $0x8,%esp
+c010640e:	ff 75 0c             	pushl  0xc(%ebp)
+c0106411:	ff 75 08             	pushl  0x8(%ebp)
+c0106414:	ff d0                	call   *%eax
+c0106416:	83 c4 10             	add    $0x10,%esp
+    }
+    local_intr_restore(intr_flag);
+c0106419:	83 ec 0c             	sub    $0xc,%esp
+c010641c:	ff 75 f4             	pushl  -0xc(%ebp)
+c010641f:	e8 c7 fd ff ff       	call   c01061eb <__intr_restore>
+c0106424:	83 c4 10             	add    $0x10,%esp
+}
+c0106427:	90                   	nop
+c0106428:	c9                   	leave  
+c0106429:	c3                   	ret    
+
+c010642a <nr_free_pages>:
+
+//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
+//of current free memory
+size_t
+nr_free_pages(void) {
+c010642a:	55                   	push   %ebp
+c010642b:	89 e5                	mov    %esp,%ebp
+c010642d:	83 ec 18             	sub    $0x18,%esp
+    size_t ret;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0106430:	e8 8c fd ff ff       	call   c01061c1 <__intr_save>
+c0106435:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        ret = pmm_manager->nr_free_pages();
+c0106438:	a1 50 1b 12 c0       	mov    0xc0121b50,%eax
+c010643d:	8b 40 14             	mov    0x14(%eax),%eax
+c0106440:	ff d0                	call   *%eax
+c0106442:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    local_intr_restore(intr_flag);
+c0106445:	83 ec 0c             	sub    $0xc,%esp
+c0106448:	ff 75 f4             	pushl  -0xc(%ebp)
+c010644b:	e8 9b fd ff ff       	call   c01061eb <__intr_restore>
+c0106450:	83 c4 10             	add    $0x10,%esp
+    return ret;
+c0106453:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c0106456:	c9                   	leave  
+c0106457:	c3                   	ret    
+
+c0106458 <page_init>:
+
+/* pmm_init - initialize the physical memory management */
+static void
+page_init(void) {
+c0106458:	55                   	push   %ebp
+c0106459:	89 e5                	mov    %esp,%ebp
+c010645b:	57                   	push   %edi
+c010645c:	56                   	push   %esi
+c010645d:	53                   	push   %ebx
+c010645e:	83 ec 7c             	sub    $0x7c,%esp
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+c0106461:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
+    uint64_t maxpa = 0;
+c0106468:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+c010646f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+
+    cprintf("e820map:\n");
+c0106476:	83 ec 0c             	sub    $0xc,%esp
+c0106479:	68 cf 9f 10 c0       	push   $0xc0109fcf
+c010647e:	e8 f3 9d ff ff       	call   c0100276 <cprintf>
+c0106483:	83 c4 10             	add    $0x10,%esp
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+c0106486:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c010648d:	e9 fc 00 00 00       	jmp    c010658e <page_init+0x136>
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c0106492:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0106495:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0106498:	89 d0                	mov    %edx,%eax
+c010649a:	c1 e0 02             	shl    $0x2,%eax
+c010649d:	01 d0                	add    %edx,%eax
+c010649f:	c1 e0 02             	shl    $0x2,%eax
+c01064a2:	01 c8                	add    %ecx,%eax
+c01064a4:	8b 50 08             	mov    0x8(%eax),%edx
+c01064a7:	8b 40 04             	mov    0x4(%eax),%eax
+c01064aa:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c01064ad:	89 55 bc             	mov    %edx,-0x44(%ebp)
+c01064b0:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01064b3:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01064b6:	89 d0                	mov    %edx,%eax
+c01064b8:	c1 e0 02             	shl    $0x2,%eax
+c01064bb:	01 d0                	add    %edx,%eax
+c01064bd:	c1 e0 02             	shl    $0x2,%eax
+c01064c0:	01 c8                	add    %ecx,%eax
+c01064c2:	8b 48 0c             	mov    0xc(%eax),%ecx
+c01064c5:	8b 58 10             	mov    0x10(%eax),%ebx
+c01064c8:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c01064cb:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c01064ce:	01 c8                	add    %ecx,%eax
+c01064d0:	11 da                	adc    %ebx,%edx
+c01064d2:	89 45 b0             	mov    %eax,-0x50(%ebp)
+c01064d5:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
+c01064d8:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01064db:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01064de:	89 d0                	mov    %edx,%eax
+c01064e0:	c1 e0 02             	shl    $0x2,%eax
+c01064e3:	01 d0                	add    %edx,%eax
+c01064e5:	c1 e0 02             	shl    $0x2,%eax
+c01064e8:	01 c8                	add    %ecx,%eax
+c01064ea:	83 c0 14             	add    $0x14,%eax
+c01064ed:	8b 00                	mov    (%eax),%eax
+c01064ef:	89 45 84             	mov    %eax,-0x7c(%ebp)
+c01064f2:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c01064f5:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01064f8:	83 c0 ff             	add    $0xffffffff,%eax
+c01064fb:	83 d2 ff             	adc    $0xffffffff,%edx
+c01064fe:	89 c1                	mov    %eax,%ecx
+c0106500:	89 d3                	mov    %edx,%ebx
+c0106502:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0106505:	89 55 80             	mov    %edx,-0x80(%ebp)
+c0106508:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010650b:	89 d0                	mov    %edx,%eax
+c010650d:	c1 e0 02             	shl    $0x2,%eax
+c0106510:	01 d0                	add    %edx,%eax
+c0106512:	c1 e0 02             	shl    $0x2,%eax
+c0106515:	03 45 80             	add    -0x80(%ebp),%eax
+c0106518:	8b 50 10             	mov    0x10(%eax),%edx
+c010651b:	8b 40 0c             	mov    0xc(%eax),%eax
+c010651e:	ff 75 84             	pushl  -0x7c(%ebp)
+c0106521:	53                   	push   %ebx
+c0106522:	51                   	push   %ecx
+c0106523:	ff 75 bc             	pushl  -0x44(%ebp)
+c0106526:	ff 75 b8             	pushl  -0x48(%ebp)
+c0106529:	52                   	push   %edx
+c010652a:	50                   	push   %eax
+c010652b:	68 dc 9f 10 c0       	push   $0xc0109fdc
+c0106530:	e8 41 9d ff ff       	call   c0100276 <cprintf>
+c0106535:	83 c4 20             	add    $0x20,%esp
+                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
+        if (memmap->map[i].type == E820_ARM) {
+c0106538:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c010653b:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010653e:	89 d0                	mov    %edx,%eax
+c0106540:	c1 e0 02             	shl    $0x2,%eax
+c0106543:	01 d0                	add    %edx,%eax
+c0106545:	c1 e0 02             	shl    $0x2,%eax
+c0106548:	01 c8                	add    %ecx,%eax
+c010654a:	83 c0 14             	add    $0x14,%eax
+c010654d:	8b 00                	mov    (%eax),%eax
+c010654f:	83 f8 01             	cmp    $0x1,%eax
+c0106552:	75 36                	jne    c010658a <page_init+0x132>
+            if (maxpa < end && begin < KMEMSIZE) {
+c0106554:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106557:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010655a:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
+c010655d:	77 2b                	ja     c010658a <page_init+0x132>
+c010655f:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
+c0106562:	72 05                	jb     c0106569 <page_init+0x111>
+c0106564:	3b 45 b0             	cmp    -0x50(%ebp),%eax
+c0106567:	73 21                	jae    c010658a <page_init+0x132>
+c0106569:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c010656d:	77 1b                	ja     c010658a <page_init+0x132>
+c010656f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0106573:	72 09                	jb     c010657e <page_init+0x126>
+c0106575:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
+c010657c:	77 0c                	ja     c010658a <page_init+0x132>
+                maxpa = end;
+c010657e:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0106581:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c0106584:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0106587:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+    uint64_t maxpa = 0;
+
+    cprintf("e820map:\n");
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+c010658a:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c010658e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0106591:	8b 00                	mov    (%eax),%eax
+c0106593:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c0106596:	0f 8f f6 fe ff ff    	jg     c0106492 <page_init+0x3a>
+            if (maxpa < end && begin < KMEMSIZE) {
+                maxpa = end;
+            }
+        }
+    }
+    if (maxpa > KMEMSIZE) {
+c010659c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c01065a0:	72 1d                	jb     c01065bf <page_init+0x167>
+c01065a2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c01065a6:	77 09                	ja     c01065b1 <page_init+0x159>
+c01065a8:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
+c01065af:	76 0e                	jbe    c01065bf <page_init+0x167>
+        maxpa = KMEMSIZE;
+c01065b1:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
+c01065b8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    }
+
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+c01065bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01065c2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01065c5:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c01065c9:	c1 ea 0c             	shr    $0xc,%edx
+c01065cc:	a3 e0 19 12 c0       	mov    %eax,0xc01219e0
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+c01065d1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
+c01065d8:	b8 5c 1b 12 c0       	mov    $0xc0121b5c,%eax
+c01065dd:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01065e0:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c01065e3:	01 d0                	add    %edx,%eax
+c01065e5:	89 45 a8             	mov    %eax,-0x58(%ebp)
+c01065e8:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c01065eb:	ba 00 00 00 00       	mov    $0x0,%edx
+c01065f0:	f7 75 ac             	divl   -0x54(%ebp)
+c01065f3:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c01065f6:	29 d0                	sub    %edx,%eax
+c01065f8:	a3 58 1b 12 c0       	mov    %eax,0xc0121b58
+
+    for (i = 0; i < npage; i ++) {
+c01065fd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0106604:	eb 27                	jmp    c010662d <page_init+0x1d5>
+        SetPageReserved(pages + i);
+c0106606:	a1 58 1b 12 c0       	mov    0xc0121b58,%eax
+c010660b:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010660e:	c1 e2 05             	shl    $0x5,%edx
+c0106611:	01 d0                	add    %edx,%eax
+c0106613:	83 c0 04             	add    $0x4,%eax
+c0106616:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
+c010661d:	89 45 8c             	mov    %eax,-0x74(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0106620:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0106623:	8b 55 90             	mov    -0x70(%ebp),%edx
+c0106626:	0f ab 10             	bts    %edx,(%eax)
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+
+    for (i = 0; i < npage; i ++) {
+c0106629:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c010662d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0106630:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c0106635:	39 c2                	cmp    %eax,%edx
+c0106637:	72 cd                	jb     c0106606 <page_init+0x1ae>
+        SetPageReserved(pages + i);
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+c0106639:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c010663e:	c1 e0 05             	shl    $0x5,%eax
+c0106641:	89 c2                	mov    %eax,%edx
+c0106643:	a1 58 1b 12 c0       	mov    0xc0121b58,%eax
+c0106648:	01 d0                	add    %edx,%eax
+c010664a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+c010664d:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
+c0106654:	77 1c                	ja     c0106672 <page_init+0x21a>
+c0106656:	e8 ef a3 ff ff       	call   c0100a4a <print_stackframe>
+c010665b:	ff 75 a4             	pushl  -0x5c(%ebp)
+c010665e:	68 68 9f 10 c0       	push   $0xc0109f68
+c0106663:	68 e8 00 00 00       	push   $0xe8
+c0106668:	68 0c a0 10 c0       	push   $0xc010a00c
+c010666d:	e8 6a 9d ff ff       	call   c01003dc <__panic>
+c0106672:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0106675:	05 00 00 00 40       	add    $0x40000000,%eax
+c010667a:	89 45 a0             	mov    %eax,-0x60(%ebp)
+
+    for (i = 0; i < memmap->nr_map; i ++) {
+c010667d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0106684:	e9 69 01 00 00       	jmp    c01067f2 <page_init+0x39a>
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c0106689:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c010668c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010668f:	89 d0                	mov    %edx,%eax
+c0106691:	c1 e0 02             	shl    $0x2,%eax
+c0106694:	01 d0                	add    %edx,%eax
+c0106696:	c1 e0 02             	shl    $0x2,%eax
+c0106699:	01 c8                	add    %ecx,%eax
+c010669b:	8b 50 08             	mov    0x8(%eax),%edx
+c010669e:	8b 40 04             	mov    0x4(%eax),%eax
+c01066a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c01066a4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c01066a7:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01066aa:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01066ad:	89 d0                	mov    %edx,%eax
+c01066af:	c1 e0 02             	shl    $0x2,%eax
+c01066b2:	01 d0                	add    %edx,%eax
+c01066b4:	c1 e0 02             	shl    $0x2,%eax
+c01066b7:	01 c8                	add    %ecx,%eax
+c01066b9:	8b 48 0c             	mov    0xc(%eax),%ecx
+c01066bc:	8b 58 10             	mov    0x10(%eax),%ebx
+c01066bf:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01066c2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01066c5:	01 c8                	add    %ecx,%eax
+c01066c7:	11 da                	adc    %ebx,%edx
+c01066c9:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c01066cc:	89 55 cc             	mov    %edx,-0x34(%ebp)
+        if (memmap->map[i].type == E820_ARM) {
+c01066cf:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01066d2:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01066d5:	89 d0                	mov    %edx,%eax
+c01066d7:	c1 e0 02             	shl    $0x2,%eax
+c01066da:	01 d0                	add    %edx,%eax
+c01066dc:	c1 e0 02             	shl    $0x2,%eax
+c01066df:	01 c8                	add    %ecx,%eax
+c01066e1:	83 c0 14             	add    $0x14,%eax
+c01066e4:	8b 00                	mov    (%eax),%eax
+c01066e6:	83 f8 01             	cmp    $0x1,%eax
+c01066e9:	0f 85 ff 00 00 00    	jne    c01067ee <page_init+0x396>
+            if (begin < freemem) {
+c01066ef:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c01066f2:	ba 00 00 00 00       	mov    $0x0,%edx
+c01066f7:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c01066fa:	72 17                	jb     c0106713 <page_init+0x2bb>
+c01066fc:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c01066ff:	77 05                	ja     c0106706 <page_init+0x2ae>
+c0106701:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+c0106704:	76 0d                	jbe    c0106713 <page_init+0x2bb>
+                begin = freemem;
+c0106706:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0106709:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010670c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+            }
+            if (end > KMEMSIZE) {
+c0106713:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0106717:	72 1d                	jb     c0106736 <page_init+0x2de>
+c0106719:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c010671d:	77 09                	ja     c0106728 <page_init+0x2d0>
+c010671f:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
+c0106726:	76 0e                	jbe    c0106736 <page_init+0x2de>
+                end = KMEMSIZE;
+c0106728:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
+c010672f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+            }
+            if (begin < end) {
+c0106736:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0106739:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010673c:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c010673f:	0f 87 a9 00 00 00    	ja     c01067ee <page_init+0x396>
+c0106745:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0106748:	72 09                	jb     c0106753 <page_init+0x2fb>
+c010674a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c010674d:	0f 83 9b 00 00 00    	jae    c01067ee <page_init+0x396>
+                begin = ROUNDUP(begin, PGSIZE);
+c0106753:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
+c010675a:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010675d:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0106760:	01 d0                	add    %edx,%eax
+c0106762:	83 e8 01             	sub    $0x1,%eax
+c0106765:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0106768:	8b 45 98             	mov    -0x68(%ebp),%eax
+c010676b:	ba 00 00 00 00       	mov    $0x0,%edx
+c0106770:	f7 75 9c             	divl   -0x64(%ebp)
+c0106773:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0106776:	29 d0                	sub    %edx,%eax
+c0106778:	ba 00 00 00 00       	mov    $0x0,%edx
+c010677d:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0106780:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+                end = ROUNDDOWN(end, PGSIZE);
+c0106783:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0106786:	89 45 94             	mov    %eax,-0x6c(%ebp)
+c0106789:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c010678c:	ba 00 00 00 00       	mov    $0x0,%edx
+c0106791:	89 c3                	mov    %eax,%ebx
+c0106793:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+c0106799:	89 de                	mov    %ebx,%esi
+c010679b:	89 d0                	mov    %edx,%eax
+c010679d:	83 e0 00             	and    $0x0,%eax
+c01067a0:	89 c7                	mov    %eax,%edi
+c01067a2:	89 75 c8             	mov    %esi,-0x38(%ebp)
+c01067a5:	89 7d cc             	mov    %edi,-0x34(%ebp)
+                if (begin < end) {
+c01067a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01067ab:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01067ae:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c01067b1:	77 3b                	ja     c01067ee <page_init+0x396>
+c01067b3:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c01067b6:	72 05                	jb     c01067bd <page_init+0x365>
+c01067b8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c01067bb:	73 31                	jae    c01067ee <page_init+0x396>
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+c01067bd:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01067c0:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01067c3:	2b 45 d0             	sub    -0x30(%ebp),%eax
+c01067c6:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
+c01067c9:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c01067cd:	c1 ea 0c             	shr    $0xc,%edx
+c01067d0:	89 c3                	mov    %eax,%ebx
+c01067d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01067d5:	83 ec 0c             	sub    $0xc,%esp
+c01067d8:	50                   	push   %eax
+c01067d9:	e8 72 f8 ff ff       	call   c0106050 <pa2page>
+c01067de:	83 c4 10             	add    $0x10,%esp
+c01067e1:	83 ec 08             	sub    $0x8,%esp
+c01067e4:	53                   	push   %ebx
+c01067e5:	50                   	push   %eax
+c01067e6:	e8 7f fb ff ff       	call   c010636a <init_memmap>
+c01067eb:	83 c4 10             	add    $0x10,%esp
+        SetPageReserved(pages + i);
+    }
+
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+
+    for (i = 0; i < memmap->nr_map; i ++) {
+c01067ee:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c01067f2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c01067f5:	8b 00                	mov    (%eax),%eax
+c01067f7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c01067fa:	0f 8f 89 fe ff ff    	jg     c0106689 <page_init+0x231>
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+                }
+            }
+        }
+    }
+}
+c0106800:	90                   	nop
+c0106801:	8d 65 f4             	lea    -0xc(%ebp),%esp
+c0106804:	5b                   	pop    %ebx
+c0106805:	5e                   	pop    %esi
+c0106806:	5f                   	pop    %edi
+c0106807:	5d                   	pop    %ebp
+c0106808:	c3                   	ret    
+
+c0106809 <enable_paging>:
+
+static void
+enable_paging(void) {
+c0106809:	55                   	push   %ebp
+c010680a:	89 e5                	mov    %esp,%ebp
+c010680c:	83 ec 10             	sub    $0x10,%esp
+    lcr3(boot_cr3);
+c010680f:	a1 54 1b 12 c0       	mov    0xc0121b54,%eax
+c0106814:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+}
+
+static inline void
+lcr3(uintptr_t cr3) {
+    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
+c0106817:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010681a:	0f 22 d8             	mov    %eax,%cr3
+}
+
+static inline uintptr_t
+rcr0(void) {
+    uintptr_t cr0;
+    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
+c010681d:	0f 20 c0             	mov    %cr0,%eax
+c0106820:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return cr0;
+c0106823:	8b 45 f4             	mov    -0xc(%ebp),%eax
+
+    // turn on paging
+    uint32_t cr0 = rcr0();
+c0106826:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
+c0106829:	81 4d f8 2f 00 05 80 	orl    $0x8005002f,-0x8(%ebp)
+    cr0 &= ~(CR0_TS | CR0_EM);
+c0106830:	83 65 f8 f3          	andl   $0xfffffff3,-0x8(%ebp)
+c0106834:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0106837:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile ("pushl %0; popfl" :: "r" (eflags));
+}
+
+static inline void
+lcr0(uintptr_t cr0) {
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+c010683a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010683d:	0f 22 c0             	mov    %eax,%cr0
+    lcr0(cr0);
+}
+c0106840:	90                   	nop
+c0106841:	c9                   	leave  
+c0106842:	c3                   	ret    
+
+c0106843 <boot_map_segment>:
+//  la:   linear address of this memory need to map (after x86 segment map)
+//  size: memory size
+//  pa:   physical address of this memory
+//  perm: permission of this memory  
+static void
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+c0106843:	55                   	push   %ebp
+c0106844:	89 e5                	mov    %esp,%ebp
+c0106846:	83 ec 28             	sub    $0x28,%esp
+    assert(PGOFF(la) == PGOFF(pa));
+c0106849:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010684c:	33 45 14             	xor    0x14(%ebp),%eax
+c010684f:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0106854:	85 c0                	test   %eax,%eax
+c0106856:	74 1e                	je     c0106876 <boot_map_segment+0x33>
+c0106858:	e8 ed a1 ff ff       	call   c0100a4a <print_stackframe>
+c010685d:	68 1a a0 10 c0       	push   $0xc010a01a
+c0106862:	68 31 a0 10 c0       	push   $0xc010a031
+c0106867:	68 11 01 00 00       	push   $0x111
+c010686c:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106871:	e8 66 9b ff ff       	call   c01003dc <__panic>
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+c0106876:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
+c010687d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106880:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0106885:	89 c2                	mov    %eax,%edx
+c0106887:	8b 45 10             	mov    0x10(%ebp),%eax
+c010688a:	01 c2                	add    %eax,%edx
+c010688c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010688f:	01 d0                	add    %edx,%eax
+c0106891:	83 e8 01             	sub    $0x1,%eax
+c0106894:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0106897:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010689a:	ba 00 00 00 00       	mov    $0x0,%edx
+c010689f:	f7 75 f0             	divl   -0x10(%ebp)
+c01068a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01068a5:	29 d0                	sub    %edx,%eax
+c01068a7:	c1 e8 0c             	shr    $0xc,%eax
+c01068aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    la = ROUNDDOWN(la, PGSIZE);
+c01068ad:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01068b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c01068b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01068b6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01068bb:	89 45 0c             	mov    %eax,0xc(%ebp)
+    pa = ROUNDDOWN(pa, PGSIZE);
+c01068be:	8b 45 14             	mov    0x14(%ebp),%eax
+c01068c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c01068c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01068c7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01068cc:	89 45 14             	mov    %eax,0x14(%ebp)
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+c01068cf:	eb 5c                	jmp    c010692d <boot_map_segment+0xea>
+        pte_t *ptep = get_pte(pgdir, la, 1);
+c01068d1:	83 ec 04             	sub    $0x4,%esp
+c01068d4:	6a 01                	push   $0x1
+c01068d6:	ff 75 0c             	pushl  0xc(%ebp)
+c01068d9:	ff 75 08             	pushl  0x8(%ebp)
+c01068dc:	e8 ac 01 00 00       	call   c0106a8d <get_pte>
+c01068e1:	83 c4 10             	add    $0x10,%esp
+c01068e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(ptep != NULL);
+c01068e7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c01068eb:	75 1e                	jne    c010690b <boot_map_segment+0xc8>
+c01068ed:	e8 58 a1 ff ff       	call   c0100a4a <print_stackframe>
+c01068f2:	68 46 a0 10 c0       	push   $0xc010a046
+c01068f7:	68 31 a0 10 c0       	push   $0xc010a031
+c01068fc:	68 17 01 00 00       	push   $0x117
+c0106901:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106906:	e8 d1 9a ff ff       	call   c01003dc <__panic>
+        *ptep = pa | PTE_P | perm;
+c010690b:	8b 45 14             	mov    0x14(%ebp),%eax
+c010690e:	0b 45 18             	or     0x18(%ebp),%eax
+c0106911:	83 c8 01             	or     $0x1,%eax
+c0106914:	89 c2                	mov    %eax,%edx
+c0106916:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106919:	89 10                	mov    %edx,(%eax)
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+    assert(PGOFF(la) == PGOFF(pa));
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+    la = ROUNDDOWN(la, PGSIZE);
+    pa = ROUNDDOWN(pa, PGSIZE);
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+c010691b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c010691f:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+c0106926:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
+c010692d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106931:	75 9e                	jne    c01068d1 <boot_map_segment+0x8e>
+        pte_t *ptep = get_pte(pgdir, la, 1);
+        assert(ptep != NULL);
+        *ptep = pa | PTE_P | perm;
+    }
+}
+c0106933:	90                   	nop
+c0106934:	c9                   	leave  
+c0106935:	c3                   	ret    
+
+c0106936 <boot_alloc_page>:
+
+//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
+// return value: the kernel virtual address of this allocated page
+//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
+static void *
+boot_alloc_page(void) {
+c0106936:	55                   	push   %ebp
+c0106937:	89 e5                	mov    %esp,%ebp
+c0106939:	83 ec 18             	sub    $0x18,%esp
+    struct Page *p = alloc_page();
+c010693c:	83 ec 0c             	sub    $0xc,%esp
+c010693f:	6a 01                	push   $0x1
+c0106941:	e8 43 fa ff ff       	call   c0106389 <alloc_pages>
+c0106946:	83 c4 10             	add    $0x10,%esp
+c0106949:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (p == NULL) {
+c010694c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106950:	75 1c                	jne    c010696e <boot_alloc_page+0x38>
+        panic("boot_alloc_page failed.\n");
+c0106952:	e8 f3 a0 ff ff       	call   c0100a4a <print_stackframe>
+c0106957:	83 ec 04             	sub    $0x4,%esp
+c010695a:	68 53 a0 10 c0       	push   $0xc010a053
+c010695f:	68 23 01 00 00       	push   $0x123
+c0106964:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106969:	e8 6e 9a ff ff       	call   c01003dc <__panic>
+    }
+    return page2kva(p);
+c010696e:	83 ec 0c             	sub    $0xc,%esp
+c0106971:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106974:	e8 19 f7 ff ff       	call   c0106092 <page2kva>
+c0106979:	83 c4 10             	add    $0x10,%esp
+}
+c010697c:	c9                   	leave  
+c010697d:	c3                   	ret    
+
+c010697e <pmm_init>:
+
+//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
+//         - check the correctness of pmm & paging mechanism, print PDT&PT
+void
+pmm_init(void) {
+c010697e:	55                   	push   %ebp
+c010697f:	89 e5                	mov    %esp,%ebp
+c0106981:	83 ec 18             	sub    $0x18,%esp
+    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
+    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
+    //First we should init a physical memory manager(pmm) based on the framework.
+    //Then pmm can alloc/free the physical memory. 
+    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
+    init_pmm_manager();
+c0106984:	e8 ac f9 ff ff       	call   c0106335 <init_pmm_manager>
+
+    // detect physical memory space, reserve already used memory,
+    // then use pmm->init_memmap to create free page list
+    page_init();
+c0106989:	e8 ca fa ff ff       	call   c0106458 <page_init>
+
+    //use pmm->check to verify the correctness of the alloc/free function in a pmm
+    //cprintf("to check alloc page\n");
+    check_alloc_page();
+c010698e:	e8 2f 05 00 00       	call   c0106ec2 <check_alloc_page>
+
+    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
+    boot_pgdir = boot_alloc_page();
+c0106993:	e8 9e ff ff ff       	call   c0106936 <boot_alloc_page>
+c0106998:	a3 e4 19 12 c0       	mov    %eax,0xc01219e4
+    memset(boot_pgdir, 0, PGSIZE);
+c010699d:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01069a2:	83 ec 04             	sub    $0x4,%esp
+c01069a5:	68 00 10 00 00       	push   $0x1000
+c01069aa:	6a 00                	push   $0x0
+c01069ac:	50                   	push   %eax
+c01069ad:	e8 78 16 00 00       	call   c010802a <memset>
+c01069b2:	83 c4 10             	add    $0x10,%esp
+    boot_cr3 = PADDR(boot_pgdir);
+c01069b5:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01069ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01069bd:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c01069c4:	77 1c                	ja     c01069e2 <pmm_init+0x64>
+c01069c6:	e8 7f a0 ff ff       	call   c0100a4a <print_stackframe>
+c01069cb:	ff 75 f4             	pushl  -0xc(%ebp)
+c01069ce:	68 68 9f 10 c0       	push   $0xc0109f68
+c01069d3:	68 3e 01 00 00       	push   $0x13e
+c01069d8:	68 0c a0 10 c0       	push   $0xc010a00c
+c01069dd:	e8 fa 99 ff ff       	call   c01003dc <__panic>
+c01069e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01069e5:	05 00 00 00 40       	add    $0x40000000,%eax
+c01069ea:	a3 54 1b 12 c0       	mov    %eax,0xc0121b54
+
+    check_pgdir();
+c01069ef:	e8 f1 04 00 00       	call   c0106ee5 <check_pgdir>
+
+    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
+
+    // recursively insert boot_pgdir in itself
+    // to form a virtual page table at virtual address VPT
+    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
+c01069f4:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01069f9:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
+c01069ff:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0106a04:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106a07:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
+c0106a0e:	77 1c                	ja     c0106a2c <pmm_init+0xae>
+c0106a10:	e8 35 a0 ff ff       	call   c0100a4a <print_stackframe>
+c0106a15:	ff 75 f0             	pushl  -0x10(%ebp)
+c0106a18:	68 68 9f 10 c0       	push   $0xc0109f68
+c0106a1d:	68 46 01 00 00       	push   $0x146
+c0106a22:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106a27:	e8 b0 99 ff ff       	call   c01003dc <__panic>
+c0106a2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a2f:	05 00 00 00 40       	add    $0x40000000,%eax
+c0106a34:	83 c8 03             	or     $0x3,%eax
+c0106a37:	89 02                	mov    %eax,(%edx)
+
+    // map all physical memory to linear memory with base linear addr KERNBASE
+    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
+    //But shouldn't use this map until enable_paging() & gdt_init() finished.
+    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
+c0106a39:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0106a3e:	83 ec 0c             	sub    $0xc,%esp
+c0106a41:	6a 02                	push   $0x2
+c0106a43:	6a 00                	push   $0x0
+c0106a45:	68 00 00 00 38       	push   $0x38000000
+c0106a4a:	68 00 00 00 c0       	push   $0xc0000000
+c0106a4f:	50                   	push   %eax
+c0106a50:	e8 ee fd ff ff       	call   c0106843 <boot_map_segment>
+c0106a55:	83 c4 20             	add    $0x20,%esp
+
+    //temporary map: 
+    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
+    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
+c0106a58:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0106a5d:	8b 15 e4 19 12 c0    	mov    0xc01219e4,%edx
+c0106a63:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
+c0106a69:	89 10                	mov    %edx,(%eax)
+
+    enable_paging();
+c0106a6b:	e8 99 fd ff ff       	call   c0106809 <enable_paging>
+
+    //reload gdt(third time,the last time) to map all physical memory
+    //virtual_addr 0~4G=liear_addr 0~4G
+    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
+    gdt_init();
+c0106a70:	e8 ce f7 ff ff       	call   c0106243 <gdt_init>
+
+    //disable the map of virtual_addr 0~4M
+    boot_pgdir[0] = 0;
+c0106a75:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0106a7a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    //now the basic virtual memory map(see memalyout.h) is established.
+    //check the correctness of the basic virtual memory map.
+    check_boot_pgdir();
+c0106a80:	e8 48 0a 00 00       	call   c01074cd <check_boot_pgdir>
+
+    print_pgdir();
+c0106a85:	e8 7a 0e 00 00       	call   c0107904 <print_pgdir>
+
+}
+c0106a8a:	90                   	nop
+c0106a8b:	c9                   	leave  
+c0106a8c:	c3                   	ret    
+
+c0106a8d <get_pte>:
+//  pgdir:  the kernel virtual base address of PDT
+//  la:     the linear address need to map
+//  create: a logical value to decide if alloc a page for PT
+// return vaule: the kernel virtual address of this pte
+pte_t *
+get_pte(pde_t *pgdir, uintptr_t la, bool create) {
+c0106a8d:	55                   	push   %ebp
+c0106a8e:	89 e5                	mov    %esp,%ebp
+c0106a90:	83 ec 28             	sub    $0x28,%esp
+    pte_t *pt_addr;
+    if (pgdir[(PDX(la))] & PTE_P) {
+	            pt_addr = (pte_t *)(KADDR(pgdir[(PDX(la))] & 0XFFFFF000)); 
+		            return &pt_addr[(PTX(la))]; 
+			        }*/
+    pde_t *pdep = pgdir + PDX(la); // get the page-dir entry
+c0106a93:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106a96:	c1 e8 16             	shr    $0x16,%eax
+c0106a99:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0106aa0:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106aa3:	01 d0                	add    %edx,%eax
+c0106aa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    //cprintf("%08x\n", *pdep & PTE_P);
+    pte_t *ptep = ((pte_t *) (KADDR(*pdep & ~0XFFF)) + PTX(la));
+c0106aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106aab:	8b 00                	mov    (%eax),%eax
+c0106aad:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106ab2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106ab5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106ab8:	c1 e8 0c             	shr    $0xc,%eax
+c0106abb:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0106abe:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c0106ac3:	39 45 ec             	cmp    %eax,-0x14(%ebp)
+c0106ac6:	72 1c                	jb     c0106ae4 <get_pte+0x57>
+c0106ac8:	e8 7d 9f ff ff       	call   c0100a4a <print_stackframe>
+c0106acd:	ff 75 f0             	pushl  -0x10(%ebp)
+c0106ad0:	68 44 9f 10 c0       	push   $0xc0109f44
+c0106ad5:	68 95 01 00 00       	push   $0x195
+c0106ada:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106adf:	e8 f8 98 ff ff       	call   c01003dc <__panic>
+c0106ae4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106ae7:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0106aec:	89 c2                	mov    %eax,%edx
+c0106aee:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106af1:	c1 e8 0c             	shr    $0xc,%eax
+c0106af4:	25 ff 03 00 00       	and    $0x3ff,%eax
+c0106af9:	c1 e0 02             	shl    $0x2,%eax
+c0106afc:	01 d0                	add    %edx,%eax
+c0106afe:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    //cprintf("%08x\n", *ptep & PTE_P);
+    if (*pdep & PTE_P) return ptep; // check if the entry is presented
+c0106b01:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106b04:	8b 00                	mov    (%eax),%eax
+c0106b06:	83 e0 01             	and    $0x1,%eax
+c0106b09:	85 c0                	test   %eax,%eax
+c0106b0b:	74 08                	je     c0106b15 <get_pte+0x88>
+c0106b0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106b10:	e9 d4 00 00 00       	jmp    c0106be9 <get_pte+0x15c>
+    if (!create) return NULL; // check if create a new page-table
+c0106b15:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0106b19:	75 0a                	jne    c0106b25 <get_pte+0x98>
+c0106b1b:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106b20:	e9 c4 00 00 00       	jmp    c0106be9 <get_pte+0x15c>
+    struct Page* pt = alloc_page(); // allocate a page frame for the page-table
+c0106b25:	83 ec 0c             	sub    $0xc,%esp
+c0106b28:	6a 01                	push   $0x1
+c0106b2a:	e8 5a f8 ff ff       	call   c0106389 <alloc_pages>
+c0106b2f:	83 c4 10             	add    $0x10,%esp
+c0106b32:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if (pt == NULL) return NULL;
+c0106b35:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0106b39:	75 0a                	jne    c0106b45 <get_pte+0xb8>
+c0106b3b:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106b40:	e9 a4 00 00 00       	jmp    c0106be9 <get_pte+0x15c>
+    set_page_ref(pt, 1);
+c0106b45:	83 ec 08             	sub    $0x8,%esp
+c0106b48:	6a 01                	push   $0x1
+c0106b4a:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0106b4d:	e8 33 f6 ff ff       	call   c0106185 <set_page_ref>
+c0106b52:	83 c4 10             	add    $0x10,%esp
+    ptep = KADDR(page2pa(pt)); // get the virtual address of page pt
+c0106b55:	83 ec 0c             	sub    $0xc,%esp
+c0106b58:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0106b5b:	e8 dd f4 ff ff       	call   c010603d <page2pa>
+c0106b60:	83 c4 10             	add    $0x10,%esp
+c0106b63:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0106b66:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106b69:	c1 e8 0c             	shr    $0xc,%eax
+c0106b6c:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0106b6f:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c0106b74:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c0106b77:	72 1c                	jb     c0106b95 <get_pte+0x108>
+c0106b79:	e8 cc 9e ff ff       	call   c0100a4a <print_stackframe>
+c0106b7e:	ff 75 e0             	pushl  -0x20(%ebp)
+c0106b81:	68 44 9f 10 c0       	push   $0xc0109f44
+c0106b86:	68 9c 01 00 00       	push   $0x19c
+c0106b8b:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106b90:	e8 47 98 ff ff       	call   c01003dc <__panic>
+c0106b95:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106b98:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0106b9d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    memset(ptep, 0, PGSIZE);
+c0106ba0:	83 ec 04             	sub    $0x4,%esp
+c0106ba3:	68 00 10 00 00       	push   $0x1000
+c0106ba8:	6a 00                	push   $0x0
+c0106baa:	ff 75 e8             	pushl  -0x18(%ebp)
+c0106bad:	e8 78 14 00 00       	call   c010802a <memset>
+c0106bb2:	83 c4 10             	add    $0x10,%esp
+    *pdep = (page2pa(pt) & ~0XFFF) | PTE_U | PTE_W | PTE_P;
+c0106bb5:	83 ec 0c             	sub    $0xc,%esp
+c0106bb8:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0106bbb:	e8 7d f4 ff ff       	call   c010603d <page2pa>
+c0106bc0:	83 c4 10             	add    $0x10,%esp
+c0106bc3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106bc8:	83 c8 07             	or     $0x7,%eax
+c0106bcb:	89 c2                	mov    %eax,%edx
+c0106bcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106bd0:	89 10                	mov    %edx,(%eax)
+    return ptep + PTX(la);
+c0106bd2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106bd5:	c1 e8 0c             	shr    $0xc,%eax
+c0106bd8:	25 ff 03 00 00       	and    $0x3ff,%eax
+c0106bdd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0106be4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106be7:	01 d0                	add    %edx,%eax
+}
+c0106be9:	c9                   	leave  
+c0106bea:	c3                   	ret    
+
+c0106beb <get_page>:
+
+//get_page - get related Page struct for linear address la using PDT pgdir
+struct Page *
+get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
+c0106beb:	55                   	push   %ebp
+c0106bec:	89 e5                	mov    %esp,%ebp
+c0106bee:	83 ec 18             	sub    $0x18,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c0106bf1:	83 ec 04             	sub    $0x4,%esp
+c0106bf4:	6a 00                	push   $0x0
+c0106bf6:	ff 75 0c             	pushl  0xc(%ebp)
+c0106bf9:	ff 75 08             	pushl  0x8(%ebp)
+c0106bfc:	e8 8c fe ff ff       	call   c0106a8d <get_pte>
+c0106c01:	83 c4 10             	add    $0x10,%esp
+c0106c04:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep_store != NULL) {
+c0106c07:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0106c0b:	74 08                	je     c0106c15 <get_page+0x2a>
+        *ptep_store = ptep;
+c0106c0d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c10:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106c13:	89 10                	mov    %edx,(%eax)
+    }
+    if (ptep != NULL && *ptep & PTE_P) {
+c0106c15:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106c19:	74 1f                	je     c0106c3a <get_page+0x4f>
+c0106c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106c1e:	8b 00                	mov    (%eax),%eax
+c0106c20:	83 e0 01             	and    $0x1,%eax
+c0106c23:	85 c0                	test   %eax,%eax
+c0106c25:	74 13                	je     c0106c3a <get_page+0x4f>
+        return pte2page(*ptep);
+c0106c27:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106c2a:	8b 00                	mov    (%eax),%eax
+c0106c2c:	83 ec 0c             	sub    $0xc,%esp
+c0106c2f:	50                   	push   %eax
+c0106c30:	e8 eb f4 ff ff       	call   c0106120 <pte2page>
+c0106c35:	83 c4 10             	add    $0x10,%esp
+c0106c38:	eb 05                	jmp    c0106c3f <get_page+0x54>
+    }
+    return NULL;
+c0106c3a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106c3f:	c9                   	leave  
+c0106c40:	c3                   	ret    
+
+c0106c41 <page_remove_pte>:
+
+//page_remove_pte - free an Page sturct which is related linear address la
+//                - and clean(invalidate) pte which is related linear address la
+//note: PT is changed, so the TLB need to be invalidate 
+static inline void
+page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
+c0106c41:	55                   	push   %ebp
+c0106c42:	89 e5                	mov    %esp,%ebp
+c0106c44:	83 ec 18             	sub    $0x18,%esp
+                                  //(4) and free this page when page reference reachs 0
+                                  //(5) clear second page table entry
+                                  //(6) flush tlb
+    }
+#endif
+    assert(*ptep & PTE_P); // check if pte is valid
+c0106c47:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c4a:	8b 00                	mov    (%eax),%eax
+c0106c4c:	83 e0 01             	and    $0x1,%eax
+c0106c4f:	85 c0                	test   %eax,%eax
+c0106c51:	75 1e                	jne    c0106c71 <page_remove_pte+0x30>
+c0106c53:	e8 f2 9d ff ff       	call   c0100a4a <print_stackframe>
+c0106c58:	68 6c a0 10 c0       	push   $0xc010a06c
+c0106c5d:	68 31 a0 10 c0       	push   $0xc010a031
+c0106c62:	68 cd 01 00 00       	push   $0x1cd
+c0106c67:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106c6c:	e8 6b 97 ff ff       	call   c01003dc <__panic>
+    struct Page *page = pte2page(*ptep);
+c0106c71:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106c74:	8b 00                	mov    (%eax),%eax
+c0106c76:	83 ec 0c             	sub    $0xc,%esp
+c0106c79:	50                   	push   %eax
+c0106c7a:	e8 a1 f4 ff ff       	call   c0106120 <pte2page>
+c0106c7f:	83 c4 10             	add    $0x10,%esp
+c0106c82:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    page->ref --;
+c0106c85:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106c88:	8b 00                	mov    (%eax),%eax
+c0106c8a:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0106c8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106c90:	89 10                	mov    %edx,(%eax)
+    if (!page->ref) free_page(page);
+c0106c92:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106c95:	8b 00                	mov    (%eax),%eax
+c0106c97:	85 c0                	test   %eax,%eax
+c0106c99:	75 10                	jne    c0106cab <page_remove_pte+0x6a>
+c0106c9b:	83 ec 08             	sub    $0x8,%esp
+c0106c9e:	6a 01                	push   $0x1
+c0106ca0:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106ca3:	e8 4d f7 ff ff       	call   c01063f5 <free_pages>
+c0106ca8:	83 c4 10             	add    $0x10,%esp
+    *ptep &= (~PTE_P);
+c0106cab:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106cae:	8b 00                	mov    (%eax),%eax
+c0106cb0:	83 e0 fe             	and    $0xfffffffe,%eax
+c0106cb3:	89 c2                	mov    %eax,%edx
+c0106cb5:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106cb8:	89 10                	mov    %edx,(%eax)
+    tlb_invalidate(pgdir, la);
+c0106cba:	83 ec 08             	sub    $0x8,%esp
+c0106cbd:	ff 75 0c             	pushl  0xc(%ebp)
+c0106cc0:	ff 75 08             	pushl  0x8(%ebp)
+c0106cc3:	e8 f8 00 00 00       	call   c0106dc0 <tlb_invalidate>
+c0106cc8:	83 c4 10             	add    $0x10,%esp
+}
+c0106ccb:	90                   	nop
+c0106ccc:	c9                   	leave  
+c0106ccd:	c3                   	ret    
+
+c0106cce <page_remove>:
+
+//page_remove - free an Page which is related linear address la and has an validated pte
+void
+page_remove(pde_t *pgdir, uintptr_t la) {
+c0106cce:	55                   	push   %ebp
+c0106ccf:	89 e5                	mov    %esp,%ebp
+c0106cd1:	83 ec 18             	sub    $0x18,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c0106cd4:	83 ec 04             	sub    $0x4,%esp
+c0106cd7:	6a 00                	push   $0x0
+c0106cd9:	ff 75 0c             	pushl  0xc(%ebp)
+c0106cdc:	ff 75 08             	pushl  0x8(%ebp)
+c0106cdf:	e8 a9 fd ff ff       	call   c0106a8d <get_pte>
+c0106ce4:	83 c4 10             	add    $0x10,%esp
+c0106ce7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep != NULL) {
+c0106cea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106cee:	74 14                	je     c0106d04 <page_remove+0x36>
+        page_remove_pte(pgdir, la, ptep);
+c0106cf0:	83 ec 04             	sub    $0x4,%esp
+c0106cf3:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106cf6:	ff 75 0c             	pushl  0xc(%ebp)
+c0106cf9:	ff 75 08             	pushl  0x8(%ebp)
+c0106cfc:	e8 40 ff ff ff       	call   c0106c41 <page_remove_pte>
+c0106d01:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0106d04:	90                   	nop
+c0106d05:	c9                   	leave  
+c0106d06:	c3                   	ret    
+
+c0106d07 <page_insert>:
+//  la:    the linear address need to map
+//  perm:  the permission of this Page which is setted in related pte
+// return value: always 0
+//note: PT is changed, so the TLB need to be invalidate 
+int
+page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
+c0106d07:	55                   	push   %ebp
+c0106d08:	89 e5                	mov    %esp,%ebp
+c0106d0a:	83 ec 18             	sub    $0x18,%esp
+    pte_t *ptep = get_pte(pgdir, la, 1);
+c0106d0d:	83 ec 04             	sub    $0x4,%esp
+c0106d10:	6a 01                	push   $0x1
+c0106d12:	ff 75 10             	pushl  0x10(%ebp)
+c0106d15:	ff 75 08             	pushl  0x8(%ebp)
+c0106d18:	e8 70 fd ff ff       	call   c0106a8d <get_pte>
+c0106d1d:	83 c4 10             	add    $0x10,%esp
+c0106d20:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep == NULL) {
+c0106d23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106d27:	75 0a                	jne    c0106d33 <page_insert+0x2c>
+        return -E_NO_MEM;
+c0106d29:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0106d2e:	e9 8b 00 00 00       	jmp    c0106dbe <page_insert+0xb7>
+    }
+    page_ref_inc(page);
+c0106d33:	83 ec 0c             	sub    $0xc,%esp
+c0106d36:	ff 75 0c             	pushl  0xc(%ebp)
+c0106d39:	e8 55 f4 ff ff       	call   c0106193 <page_ref_inc>
+c0106d3e:	83 c4 10             	add    $0x10,%esp
+    if (*ptep & PTE_P) {
+c0106d41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106d44:	8b 00                	mov    (%eax),%eax
+c0106d46:	83 e0 01             	and    $0x1,%eax
+c0106d49:	85 c0                	test   %eax,%eax
+c0106d4b:	74 40                	je     c0106d8d <page_insert+0x86>
+        struct Page *p = pte2page(*ptep);
+c0106d4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106d50:	8b 00                	mov    (%eax),%eax
+c0106d52:	83 ec 0c             	sub    $0xc,%esp
+c0106d55:	50                   	push   %eax
+c0106d56:	e8 c5 f3 ff ff       	call   c0106120 <pte2page>
+c0106d5b:	83 c4 10             	add    $0x10,%esp
+c0106d5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (p == page) {
+c0106d61:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106d64:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106d67:	75 10                	jne    c0106d79 <page_insert+0x72>
+            page_ref_dec(page);
+c0106d69:	83 ec 0c             	sub    $0xc,%esp
+c0106d6c:	ff 75 0c             	pushl  0xc(%ebp)
+c0106d6f:	e8 36 f4 ff ff       	call   c01061aa <page_ref_dec>
+c0106d74:	83 c4 10             	add    $0x10,%esp
+c0106d77:	eb 14                	jmp    c0106d8d <page_insert+0x86>
+        }
+        else {
+            page_remove_pte(pgdir, la, ptep);
+c0106d79:	83 ec 04             	sub    $0x4,%esp
+c0106d7c:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106d7f:	ff 75 10             	pushl  0x10(%ebp)
+c0106d82:	ff 75 08             	pushl  0x8(%ebp)
+c0106d85:	e8 b7 fe ff ff       	call   c0106c41 <page_remove_pte>
+c0106d8a:	83 c4 10             	add    $0x10,%esp
+        }
+    }
+    *ptep = page2pa(page) | PTE_P | perm;
+c0106d8d:	83 ec 0c             	sub    $0xc,%esp
+c0106d90:	ff 75 0c             	pushl  0xc(%ebp)
+c0106d93:	e8 a5 f2 ff ff       	call   c010603d <page2pa>
+c0106d98:	83 c4 10             	add    $0x10,%esp
+c0106d9b:	0b 45 14             	or     0x14(%ebp),%eax
+c0106d9e:	83 c8 01             	or     $0x1,%eax
+c0106da1:	89 c2                	mov    %eax,%edx
+c0106da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106da6:	89 10                	mov    %edx,(%eax)
+    tlb_invalidate(pgdir, la);
+c0106da8:	83 ec 08             	sub    $0x8,%esp
+c0106dab:	ff 75 10             	pushl  0x10(%ebp)
+c0106dae:	ff 75 08             	pushl  0x8(%ebp)
+c0106db1:	e8 0a 00 00 00       	call   c0106dc0 <tlb_invalidate>
+c0106db6:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c0106db9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106dbe:	c9                   	leave  
+c0106dbf:	c3                   	ret    
+
+c0106dc0 <tlb_invalidate>:
+
+// invalidate a TLB entry, but only if the page tables being
+// edited are the ones currently in use by the processor.
+void
+tlb_invalidate(pde_t *pgdir, uintptr_t la) {
+c0106dc0:	55                   	push   %ebp
+c0106dc1:	89 e5                	mov    %esp,%ebp
+c0106dc3:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uintptr_t
+rcr3(void) {
+    uintptr_t cr3;
+    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
+c0106dc6:	0f 20 d8             	mov    %cr3,%eax
+c0106dc9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    return cr3;
+c0106dcc:	8b 55 ec             	mov    -0x14(%ebp),%edx
+    if (rcr3() == PADDR(pgdir)) {
+c0106dcf:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106dd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106dd5:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
+c0106ddc:	77 1c                	ja     c0106dfa <tlb_invalidate+0x3a>
+c0106dde:	e8 67 9c ff ff       	call   c0100a4a <print_stackframe>
+c0106de3:	ff 75 f0             	pushl  -0x10(%ebp)
+c0106de6:	68 68 9f 10 c0       	push   $0xc0109f68
+c0106deb:	68 ff 01 00 00       	push   $0x1ff
+c0106df0:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106df5:	e8 e2 95 ff ff       	call   c01003dc <__panic>
+c0106dfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106dfd:	05 00 00 00 40       	add    $0x40000000,%eax
+c0106e02:	39 c2                	cmp    %eax,%edx
+c0106e04:	75 0c                	jne    c0106e12 <tlb_invalidate+0x52>
+        invlpg((void *)la);
+c0106e06:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106e09:	89 45 f4             	mov    %eax,-0xc(%ebp)
+}
+
+static inline void
+invlpg(void *addr) {
+    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
+c0106e0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106e0f:	0f 01 38             	invlpg (%eax)
+    }
+}
+c0106e12:	90                   	nop
+c0106e13:	c9                   	leave  
+c0106e14:	c3                   	ret    
+
+c0106e15 <pgdir_alloc_page>:
+
+// pgdir_alloc_page - call alloc_page & page_insert functions to 
+//                  - allocate a page size memory & setup an addr map
+//                  - pa<->la with linear address la and the PDT pgdir
+struct Page *
+pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
+c0106e15:	55                   	push   %ebp
+c0106e16:	89 e5                	mov    %esp,%ebp
+c0106e18:	83 ec 18             	sub    $0x18,%esp
+    struct Page *page = alloc_page();
+c0106e1b:	83 ec 0c             	sub    $0xc,%esp
+c0106e1e:	6a 01                	push   $0x1
+c0106e20:	e8 64 f5 ff ff       	call   c0106389 <alloc_pages>
+c0106e25:	83 c4 10             	add    $0x10,%esp
+c0106e28:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL) {
+c0106e2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106e2f:	0f 84 88 00 00 00    	je     c0106ebd <pgdir_alloc_page+0xa8>
+        if (page_insert(pgdir, page, la, perm) != 0) {
+c0106e35:	ff 75 10             	pushl  0x10(%ebp)
+c0106e38:	ff 75 0c             	pushl  0xc(%ebp)
+c0106e3b:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106e3e:	ff 75 08             	pushl  0x8(%ebp)
+c0106e41:	e8 c1 fe ff ff       	call   c0106d07 <page_insert>
+c0106e46:	83 c4 10             	add    $0x10,%esp
+c0106e49:	85 c0                	test   %eax,%eax
+c0106e4b:	74 17                	je     c0106e64 <pgdir_alloc_page+0x4f>
+            free_page(page);
+c0106e4d:	83 ec 08             	sub    $0x8,%esp
+c0106e50:	6a 01                	push   $0x1
+c0106e52:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106e55:	e8 9b f5 ff ff       	call   c01063f5 <free_pages>
+c0106e5a:	83 c4 10             	add    $0x10,%esp
+            return NULL;
+c0106e5d:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106e62:	eb 5c                	jmp    c0106ec0 <pgdir_alloc_page+0xab>
+        }
+        if (swap_init_ok){
+c0106e64:	a1 cc 19 12 c0       	mov    0xc01219cc,%eax
+c0106e69:	85 c0                	test   %eax,%eax
+c0106e6b:	74 50                	je     c0106ebd <pgdir_alloc_page+0xa8>
+            swap_map_swappable(check_mm_struct, la, page, 0);
+c0106e6d:	a1 70 1a 12 c0       	mov    0xc0121a70,%eax
+c0106e72:	6a 00                	push   $0x0
+c0106e74:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106e77:	ff 75 0c             	pushl  0xc(%ebp)
+c0106e7a:	50                   	push   %eax
+c0106e7b:	e8 15 d7 ff ff       	call   c0104595 <swap_map_swappable>
+c0106e80:	83 c4 10             	add    $0x10,%esp
+            page->pra_vaddr=la;
+c0106e83:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106e86:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106e89:	89 50 1c             	mov    %edx,0x1c(%eax)
+            assert(page_ref(page) == 1);
+c0106e8c:	83 ec 0c             	sub    $0xc,%esp
+c0106e8f:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106e92:	e8 e4 f2 ff ff       	call   c010617b <page_ref>
+c0106e97:	83 c4 10             	add    $0x10,%esp
+c0106e9a:	83 f8 01             	cmp    $0x1,%eax
+c0106e9d:	74 1e                	je     c0106ebd <pgdir_alloc_page+0xa8>
+c0106e9f:	e8 a6 9b ff ff       	call   c0100a4a <print_stackframe>
+c0106ea4:	68 7a a0 10 c0       	push   $0xc010a07a
+c0106ea9:	68 31 a0 10 c0       	push   $0xc010a031
+c0106eae:	68 12 02 00 00       	push   $0x212
+c0106eb3:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106eb8:	e8 1f 95 ff ff       	call   c01003dc <__panic>
+            //cprintf("get No. %d  page: pra_vaddr %x, pra_link.prev %x, pra_link_next %x in pgdir_alloc_page\n", (page-pages), page->pra_vaddr,page->pra_page_link.prev, page->pra_page_link.next);
+        }
+
+    }
+
+    return page;
+c0106ebd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0106ec0:	c9                   	leave  
+c0106ec1:	c3                   	ret    
+
+c0106ec2 <check_alloc_page>:
+
+static void
+check_alloc_page(void) {
+c0106ec2:	55                   	push   %ebp
+c0106ec3:	89 e5                	mov    %esp,%ebp
+c0106ec5:	83 ec 08             	sub    $0x8,%esp
+    pmm_manager->check();
+c0106ec8:	a1 50 1b 12 c0       	mov    0xc0121b50,%eax
+c0106ecd:	8b 40 18             	mov    0x18(%eax),%eax
+c0106ed0:	ff d0                	call   *%eax
+    cprintf("check_alloc_page() succeeded!\n");
+c0106ed2:	83 ec 0c             	sub    $0xc,%esp
+c0106ed5:	68 90 a0 10 c0       	push   $0xc010a090
+c0106eda:	e8 97 93 ff ff       	call   c0100276 <cprintf>
+c0106edf:	83 c4 10             	add    $0x10,%esp
+}
+c0106ee2:	90                   	nop
+c0106ee3:	c9                   	leave  
+c0106ee4:	c3                   	ret    
+
+c0106ee5 <check_pgdir>:
+
+static void
+check_pgdir(void) {
+c0106ee5:	55                   	push   %ebp
+c0106ee6:	89 e5                	mov    %esp,%ebp
+c0106ee8:	83 ec 28             	sub    $0x28,%esp
+    assert(npage <= KMEMSIZE / PGSIZE);
+c0106eeb:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c0106ef0:	3d 00 80 03 00       	cmp    $0x38000,%eax
+c0106ef5:	76 1e                	jbe    c0106f15 <check_pgdir+0x30>
+c0106ef7:	e8 4e 9b ff ff       	call   c0100a4a <print_stackframe>
+c0106efc:	68 af a0 10 c0       	push   $0xc010a0af
+c0106f01:	68 31 a0 10 c0       	push   $0xc010a031
+c0106f06:	68 23 02 00 00       	push   $0x223
+c0106f0b:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106f10:	e8 c7 94 ff ff       	call   c01003dc <__panic>
+    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
+c0106f15:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0106f1a:	85 c0                	test   %eax,%eax
+c0106f1c:	74 0e                	je     c0106f2c <check_pgdir+0x47>
+c0106f1e:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0106f23:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0106f28:	85 c0                	test   %eax,%eax
+c0106f2a:	74 1e                	je     c0106f4a <check_pgdir+0x65>
+c0106f2c:	e8 19 9b ff ff       	call   c0100a4a <print_stackframe>
+c0106f31:	68 cc a0 10 c0       	push   $0xc010a0cc
+c0106f36:	68 31 a0 10 c0       	push   $0xc010a031
+c0106f3b:	68 24 02 00 00       	push   $0x224
+c0106f40:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106f45:	e8 92 94 ff ff       	call   c01003dc <__panic>
+    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
+c0106f4a:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0106f4f:	83 ec 04             	sub    $0x4,%esp
+c0106f52:	6a 00                	push   $0x0
+c0106f54:	6a 00                	push   $0x0
+c0106f56:	50                   	push   %eax
+c0106f57:	e8 8f fc ff ff       	call   c0106beb <get_page>
+c0106f5c:	83 c4 10             	add    $0x10,%esp
+c0106f5f:	85 c0                	test   %eax,%eax
+c0106f61:	74 1e                	je     c0106f81 <check_pgdir+0x9c>
+c0106f63:	e8 e2 9a ff ff       	call   c0100a4a <print_stackframe>
+c0106f68:	68 04 a1 10 c0       	push   $0xc010a104
+c0106f6d:	68 31 a0 10 c0       	push   $0xc010a031
+c0106f72:	68 25 02 00 00       	push   $0x225
+c0106f77:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106f7c:	e8 5b 94 ff ff       	call   c01003dc <__panic>
+
+    struct Page *p1, *p2;
+    p1 = alloc_page();
+c0106f81:	83 ec 0c             	sub    $0xc,%esp
+c0106f84:	6a 01                	push   $0x1
+c0106f86:	e8 fe f3 ff ff       	call   c0106389 <alloc_pages>
+c0106f8b:	83 c4 10             	add    $0x10,%esp
+c0106f8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
+c0106f91:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0106f96:	6a 00                	push   $0x0
+c0106f98:	6a 00                	push   $0x0
+c0106f9a:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106f9d:	50                   	push   %eax
+c0106f9e:	e8 64 fd ff ff       	call   c0106d07 <page_insert>
+c0106fa3:	83 c4 10             	add    $0x10,%esp
+c0106fa6:	85 c0                	test   %eax,%eax
+c0106fa8:	74 1e                	je     c0106fc8 <check_pgdir+0xe3>
+c0106faa:	e8 9b 9a ff ff       	call   c0100a4a <print_stackframe>
+c0106faf:	68 2c a1 10 c0       	push   $0xc010a12c
+c0106fb4:	68 31 a0 10 c0       	push   $0xc010a031
+c0106fb9:	68 29 02 00 00       	push   $0x229
+c0106fbe:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106fc3:	e8 14 94 ff ff       	call   c01003dc <__panic>
+
+    pte_t *ptep;
+    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
+c0106fc8:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0106fcd:	83 ec 04             	sub    $0x4,%esp
+c0106fd0:	6a 00                	push   $0x0
+c0106fd2:	6a 00                	push   $0x0
+c0106fd4:	50                   	push   %eax
+c0106fd5:	e8 b3 fa ff ff       	call   c0106a8d <get_pte>
+c0106fda:	83 c4 10             	add    $0x10,%esp
+c0106fdd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106fe0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106fe4:	75 1e                	jne    c0107004 <check_pgdir+0x11f>
+c0106fe6:	e8 5f 9a ff ff       	call   c0100a4a <print_stackframe>
+c0106feb:	68 58 a1 10 c0       	push   $0xc010a158
+c0106ff0:	68 31 a0 10 c0       	push   $0xc010a031
+c0106ff5:	68 2c 02 00 00       	push   $0x22c
+c0106ffa:	68 0c a0 10 c0       	push   $0xc010a00c
+c0106fff:	e8 d8 93 ff ff       	call   c01003dc <__panic>
+    assert(pte2page(*ptep) == p1);
+c0107004:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107007:	8b 00                	mov    (%eax),%eax
+c0107009:	83 ec 0c             	sub    $0xc,%esp
+c010700c:	50                   	push   %eax
+c010700d:	e8 0e f1 ff ff       	call   c0106120 <pte2page>
+c0107012:	83 c4 10             	add    $0x10,%esp
+c0107015:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0107018:	74 1e                	je     c0107038 <check_pgdir+0x153>
+c010701a:	e8 2b 9a ff ff       	call   c0100a4a <print_stackframe>
+c010701f:	68 85 a1 10 c0       	push   $0xc010a185
+c0107024:	68 31 a0 10 c0       	push   $0xc010a031
+c0107029:	68 2d 02 00 00       	push   $0x22d
+c010702e:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107033:	e8 a4 93 ff ff       	call   c01003dc <__panic>
+    assert(page_ref(p1) == 1);
+c0107038:	83 ec 0c             	sub    $0xc,%esp
+c010703b:	ff 75 f4             	pushl  -0xc(%ebp)
+c010703e:	e8 38 f1 ff ff       	call   c010617b <page_ref>
+c0107043:	83 c4 10             	add    $0x10,%esp
+c0107046:	83 f8 01             	cmp    $0x1,%eax
+c0107049:	74 1e                	je     c0107069 <check_pgdir+0x184>
+c010704b:	e8 fa 99 ff ff       	call   c0100a4a <print_stackframe>
+c0107050:	68 9b a1 10 c0       	push   $0xc010a19b
+c0107055:	68 31 a0 10 c0       	push   $0xc010a031
+c010705a:	68 2e 02 00 00       	push   $0x22e
+c010705f:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107064:	e8 73 93 ff ff       	call   c01003dc <__panic>
+
+    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
+c0107069:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c010706e:	8b 00                	mov    (%eax),%eax
+c0107070:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0107075:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0107078:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010707b:	c1 e8 0c             	shr    $0xc,%eax
+c010707e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0107081:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c0107086:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c0107089:	72 1c                	jb     c01070a7 <check_pgdir+0x1c2>
+c010708b:	e8 ba 99 ff ff       	call   c0100a4a <print_stackframe>
+c0107090:	ff 75 ec             	pushl  -0x14(%ebp)
+c0107093:	68 44 9f 10 c0       	push   $0xc0109f44
+c0107098:	68 30 02 00 00       	push   $0x230
+c010709d:	68 0c a0 10 c0       	push   $0xc010a00c
+c01070a2:	e8 35 93 ff ff       	call   c01003dc <__panic>
+c01070a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01070aa:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c01070af:	83 c0 04             	add    $0x4,%eax
+c01070b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
+c01070b5:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01070ba:	83 ec 04             	sub    $0x4,%esp
+c01070bd:	6a 00                	push   $0x0
+c01070bf:	68 00 10 00 00       	push   $0x1000
+c01070c4:	50                   	push   %eax
+c01070c5:	e8 c3 f9 ff ff       	call   c0106a8d <get_pte>
+c01070ca:	83 c4 10             	add    $0x10,%esp
+c01070cd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01070d0:	74 1e                	je     c01070f0 <check_pgdir+0x20b>
+c01070d2:	e8 73 99 ff ff       	call   c0100a4a <print_stackframe>
+c01070d7:	68 b0 a1 10 c0       	push   $0xc010a1b0
+c01070dc:	68 31 a0 10 c0       	push   $0xc010a031
+c01070e1:	68 31 02 00 00       	push   $0x231
+c01070e6:	68 0c a0 10 c0       	push   $0xc010a00c
+c01070eb:	e8 ec 92 ff ff       	call   c01003dc <__panic>
+
+    p2 = alloc_page();
+c01070f0:	83 ec 0c             	sub    $0xc,%esp
+c01070f3:	6a 01                	push   $0x1
+c01070f5:	e8 8f f2 ff ff       	call   c0106389 <alloc_pages>
+c01070fa:	83 c4 10             	add    $0x10,%esp
+c01070fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
+c0107100:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0107105:	6a 06                	push   $0x6
+c0107107:	68 00 10 00 00       	push   $0x1000
+c010710c:	ff 75 e4             	pushl  -0x1c(%ebp)
+c010710f:	50                   	push   %eax
+c0107110:	e8 f2 fb ff ff       	call   c0106d07 <page_insert>
+c0107115:	83 c4 10             	add    $0x10,%esp
+c0107118:	85 c0                	test   %eax,%eax
+c010711a:	74 1e                	je     c010713a <check_pgdir+0x255>
+c010711c:	e8 29 99 ff ff       	call   c0100a4a <print_stackframe>
+c0107121:	68 d8 a1 10 c0       	push   $0xc010a1d8
+c0107126:	68 31 a0 10 c0       	push   $0xc010a031
+c010712b:	68 34 02 00 00       	push   $0x234
+c0107130:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107135:	e8 a2 92 ff ff       	call   c01003dc <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c010713a:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c010713f:	83 ec 04             	sub    $0x4,%esp
+c0107142:	6a 00                	push   $0x0
+c0107144:	68 00 10 00 00       	push   $0x1000
+c0107149:	50                   	push   %eax
+c010714a:	e8 3e f9 ff ff       	call   c0106a8d <get_pte>
+c010714f:	83 c4 10             	add    $0x10,%esp
+c0107152:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107155:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0107159:	75 1e                	jne    c0107179 <check_pgdir+0x294>
+c010715b:	e8 ea 98 ff ff       	call   c0100a4a <print_stackframe>
+c0107160:	68 10 a2 10 c0       	push   $0xc010a210
+c0107165:	68 31 a0 10 c0       	push   $0xc010a031
+c010716a:	68 35 02 00 00       	push   $0x235
+c010716f:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107174:	e8 63 92 ff ff       	call   c01003dc <__panic>
+    assert(*ptep & PTE_U);
+c0107179:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010717c:	8b 00                	mov    (%eax),%eax
+c010717e:	83 e0 04             	and    $0x4,%eax
+c0107181:	85 c0                	test   %eax,%eax
+c0107183:	75 1e                	jne    c01071a3 <check_pgdir+0x2be>
+c0107185:	e8 c0 98 ff ff       	call   c0100a4a <print_stackframe>
+c010718a:	68 40 a2 10 c0       	push   $0xc010a240
+c010718f:	68 31 a0 10 c0       	push   $0xc010a031
+c0107194:	68 36 02 00 00       	push   $0x236
+c0107199:	68 0c a0 10 c0       	push   $0xc010a00c
+c010719e:	e8 39 92 ff ff       	call   c01003dc <__panic>
+    assert(*ptep & PTE_W);
+c01071a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01071a6:	8b 00                	mov    (%eax),%eax
+c01071a8:	83 e0 02             	and    $0x2,%eax
+c01071ab:	85 c0                	test   %eax,%eax
+c01071ad:	75 1e                	jne    c01071cd <check_pgdir+0x2e8>
+c01071af:	e8 96 98 ff ff       	call   c0100a4a <print_stackframe>
+c01071b4:	68 4e a2 10 c0       	push   $0xc010a24e
+c01071b9:	68 31 a0 10 c0       	push   $0xc010a031
+c01071be:	68 37 02 00 00       	push   $0x237
+c01071c3:	68 0c a0 10 c0       	push   $0xc010a00c
+c01071c8:	e8 0f 92 ff ff       	call   c01003dc <__panic>
+    assert(boot_pgdir[0] & PTE_U);
+c01071cd:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01071d2:	8b 00                	mov    (%eax),%eax
+c01071d4:	83 e0 04             	and    $0x4,%eax
+c01071d7:	85 c0                	test   %eax,%eax
+c01071d9:	75 1e                	jne    c01071f9 <check_pgdir+0x314>
+c01071db:	e8 6a 98 ff ff       	call   c0100a4a <print_stackframe>
+c01071e0:	68 5c a2 10 c0       	push   $0xc010a25c
+c01071e5:	68 31 a0 10 c0       	push   $0xc010a031
+c01071ea:	68 38 02 00 00       	push   $0x238
+c01071ef:	68 0c a0 10 c0       	push   $0xc010a00c
+c01071f4:	e8 e3 91 ff ff       	call   c01003dc <__panic>
+    assert(page_ref(p2) == 1);
+c01071f9:	83 ec 0c             	sub    $0xc,%esp
+c01071fc:	ff 75 e4             	pushl  -0x1c(%ebp)
+c01071ff:	e8 77 ef ff ff       	call   c010617b <page_ref>
+c0107204:	83 c4 10             	add    $0x10,%esp
+c0107207:	83 f8 01             	cmp    $0x1,%eax
+c010720a:	74 1e                	je     c010722a <check_pgdir+0x345>
+c010720c:	e8 39 98 ff ff       	call   c0100a4a <print_stackframe>
+c0107211:	68 72 a2 10 c0       	push   $0xc010a272
+c0107216:	68 31 a0 10 c0       	push   $0xc010a031
+c010721b:	68 39 02 00 00       	push   $0x239
+c0107220:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107225:	e8 b2 91 ff ff       	call   c01003dc <__panic>
+
+    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
+c010722a:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c010722f:	6a 00                	push   $0x0
+c0107231:	68 00 10 00 00       	push   $0x1000
+c0107236:	ff 75 f4             	pushl  -0xc(%ebp)
+c0107239:	50                   	push   %eax
+c010723a:	e8 c8 fa ff ff       	call   c0106d07 <page_insert>
+c010723f:	83 c4 10             	add    $0x10,%esp
+c0107242:	85 c0                	test   %eax,%eax
+c0107244:	74 1e                	je     c0107264 <check_pgdir+0x37f>
+c0107246:	e8 ff 97 ff ff       	call   c0100a4a <print_stackframe>
+c010724b:	68 84 a2 10 c0       	push   $0xc010a284
+c0107250:	68 31 a0 10 c0       	push   $0xc010a031
+c0107255:	68 3b 02 00 00       	push   $0x23b
+c010725a:	68 0c a0 10 c0       	push   $0xc010a00c
+c010725f:	e8 78 91 ff ff       	call   c01003dc <__panic>
+    assert(page_ref(p1) == 2);
+c0107264:	83 ec 0c             	sub    $0xc,%esp
+c0107267:	ff 75 f4             	pushl  -0xc(%ebp)
+c010726a:	e8 0c ef ff ff       	call   c010617b <page_ref>
+c010726f:	83 c4 10             	add    $0x10,%esp
+c0107272:	83 f8 02             	cmp    $0x2,%eax
+c0107275:	74 1e                	je     c0107295 <check_pgdir+0x3b0>
+c0107277:	e8 ce 97 ff ff       	call   c0100a4a <print_stackframe>
+c010727c:	68 b0 a2 10 c0       	push   $0xc010a2b0
+c0107281:	68 31 a0 10 c0       	push   $0xc010a031
+c0107286:	68 3c 02 00 00       	push   $0x23c
+c010728b:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107290:	e8 47 91 ff ff       	call   c01003dc <__panic>
+    assert(page_ref(p2) == 0);
+c0107295:	83 ec 0c             	sub    $0xc,%esp
+c0107298:	ff 75 e4             	pushl  -0x1c(%ebp)
+c010729b:	e8 db ee ff ff       	call   c010617b <page_ref>
+c01072a0:	83 c4 10             	add    $0x10,%esp
+c01072a3:	85 c0                	test   %eax,%eax
+c01072a5:	74 1e                	je     c01072c5 <check_pgdir+0x3e0>
+c01072a7:	e8 9e 97 ff ff       	call   c0100a4a <print_stackframe>
+c01072ac:	68 c2 a2 10 c0       	push   $0xc010a2c2
+c01072b1:	68 31 a0 10 c0       	push   $0xc010a031
+c01072b6:	68 3d 02 00 00       	push   $0x23d
+c01072bb:	68 0c a0 10 c0       	push   $0xc010a00c
+c01072c0:	e8 17 91 ff ff       	call   c01003dc <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c01072c5:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01072ca:	83 ec 04             	sub    $0x4,%esp
+c01072cd:	6a 00                	push   $0x0
+c01072cf:	68 00 10 00 00       	push   $0x1000
+c01072d4:	50                   	push   %eax
+c01072d5:	e8 b3 f7 ff ff       	call   c0106a8d <get_pte>
+c01072da:	83 c4 10             	add    $0x10,%esp
+c01072dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01072e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01072e4:	75 1e                	jne    c0107304 <check_pgdir+0x41f>
+c01072e6:	e8 5f 97 ff ff       	call   c0100a4a <print_stackframe>
+c01072eb:	68 10 a2 10 c0       	push   $0xc010a210
+c01072f0:	68 31 a0 10 c0       	push   $0xc010a031
+c01072f5:	68 3e 02 00 00       	push   $0x23e
+c01072fa:	68 0c a0 10 c0       	push   $0xc010a00c
+c01072ff:	e8 d8 90 ff ff       	call   c01003dc <__panic>
+    assert(pte2page(*ptep) == p1);
+c0107304:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107307:	8b 00                	mov    (%eax),%eax
+c0107309:	83 ec 0c             	sub    $0xc,%esp
+c010730c:	50                   	push   %eax
+c010730d:	e8 0e ee ff ff       	call   c0106120 <pte2page>
+c0107312:	83 c4 10             	add    $0x10,%esp
+c0107315:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0107318:	74 1e                	je     c0107338 <check_pgdir+0x453>
+c010731a:	e8 2b 97 ff ff       	call   c0100a4a <print_stackframe>
+c010731f:	68 85 a1 10 c0       	push   $0xc010a185
+c0107324:	68 31 a0 10 c0       	push   $0xc010a031
+c0107329:	68 3f 02 00 00       	push   $0x23f
+c010732e:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107333:	e8 a4 90 ff ff       	call   c01003dc <__panic>
+    assert((*ptep & PTE_U) == 0);
+c0107338:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010733b:	8b 00                	mov    (%eax),%eax
+c010733d:	83 e0 04             	and    $0x4,%eax
+c0107340:	85 c0                	test   %eax,%eax
+c0107342:	74 1e                	je     c0107362 <check_pgdir+0x47d>
+c0107344:	e8 01 97 ff ff       	call   c0100a4a <print_stackframe>
+c0107349:	68 d4 a2 10 c0       	push   $0xc010a2d4
+c010734e:	68 31 a0 10 c0       	push   $0xc010a031
+c0107353:	68 40 02 00 00       	push   $0x240
+c0107358:	68 0c a0 10 c0       	push   $0xc010a00c
+c010735d:	e8 7a 90 ff ff       	call   c01003dc <__panic>
+
+    page_remove(boot_pgdir, 0x0);
+c0107362:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0107367:	83 ec 08             	sub    $0x8,%esp
+c010736a:	6a 00                	push   $0x0
+c010736c:	50                   	push   %eax
+c010736d:	e8 5c f9 ff ff       	call   c0106cce <page_remove>
+c0107372:	83 c4 10             	add    $0x10,%esp
+    assert(page_ref(p1) == 1);
+c0107375:	83 ec 0c             	sub    $0xc,%esp
+c0107378:	ff 75 f4             	pushl  -0xc(%ebp)
+c010737b:	e8 fb ed ff ff       	call   c010617b <page_ref>
+c0107380:	83 c4 10             	add    $0x10,%esp
+c0107383:	83 f8 01             	cmp    $0x1,%eax
+c0107386:	74 1e                	je     c01073a6 <check_pgdir+0x4c1>
+c0107388:	e8 bd 96 ff ff       	call   c0100a4a <print_stackframe>
+c010738d:	68 9b a1 10 c0       	push   $0xc010a19b
+c0107392:	68 31 a0 10 c0       	push   $0xc010a031
+c0107397:	68 43 02 00 00       	push   $0x243
+c010739c:	68 0c a0 10 c0       	push   $0xc010a00c
+c01073a1:	e8 36 90 ff ff       	call   c01003dc <__panic>
+    assert(page_ref(p2) == 0);
+c01073a6:	83 ec 0c             	sub    $0xc,%esp
+c01073a9:	ff 75 e4             	pushl  -0x1c(%ebp)
+c01073ac:	e8 ca ed ff ff       	call   c010617b <page_ref>
+c01073b1:	83 c4 10             	add    $0x10,%esp
+c01073b4:	85 c0                	test   %eax,%eax
+c01073b6:	74 1e                	je     c01073d6 <check_pgdir+0x4f1>
+c01073b8:	e8 8d 96 ff ff       	call   c0100a4a <print_stackframe>
+c01073bd:	68 c2 a2 10 c0       	push   $0xc010a2c2
+c01073c2:	68 31 a0 10 c0       	push   $0xc010a031
+c01073c7:	68 44 02 00 00       	push   $0x244
+c01073cc:	68 0c a0 10 c0       	push   $0xc010a00c
+c01073d1:	e8 06 90 ff ff       	call   c01003dc <__panic>
+
+    page_remove(boot_pgdir, PGSIZE);
+c01073d6:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01073db:	83 ec 08             	sub    $0x8,%esp
+c01073de:	68 00 10 00 00       	push   $0x1000
+c01073e3:	50                   	push   %eax
+c01073e4:	e8 e5 f8 ff ff       	call   c0106cce <page_remove>
+c01073e9:	83 c4 10             	add    $0x10,%esp
+    assert(page_ref(p1) == 0);
+c01073ec:	83 ec 0c             	sub    $0xc,%esp
+c01073ef:	ff 75 f4             	pushl  -0xc(%ebp)
+c01073f2:	e8 84 ed ff ff       	call   c010617b <page_ref>
+c01073f7:	83 c4 10             	add    $0x10,%esp
+c01073fa:	85 c0                	test   %eax,%eax
+c01073fc:	74 1e                	je     c010741c <check_pgdir+0x537>
+c01073fe:	e8 47 96 ff ff       	call   c0100a4a <print_stackframe>
+c0107403:	68 e9 a2 10 c0       	push   $0xc010a2e9
+c0107408:	68 31 a0 10 c0       	push   $0xc010a031
+c010740d:	68 47 02 00 00       	push   $0x247
+c0107412:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107417:	e8 c0 8f ff ff       	call   c01003dc <__panic>
+    assert(page_ref(p2) == 0);
+c010741c:	83 ec 0c             	sub    $0xc,%esp
+c010741f:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0107422:	e8 54 ed ff ff       	call   c010617b <page_ref>
+c0107427:	83 c4 10             	add    $0x10,%esp
+c010742a:	85 c0                	test   %eax,%eax
+c010742c:	74 1e                	je     c010744c <check_pgdir+0x567>
+c010742e:	e8 17 96 ff ff       	call   c0100a4a <print_stackframe>
+c0107433:	68 c2 a2 10 c0       	push   $0xc010a2c2
+c0107438:	68 31 a0 10 c0       	push   $0xc010a031
+c010743d:	68 48 02 00 00       	push   $0x248
+c0107442:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107447:	e8 90 8f ff ff       	call   c01003dc <__panic>
+
+    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
+c010744c:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0107451:	8b 00                	mov    (%eax),%eax
+c0107453:	83 ec 0c             	sub    $0xc,%esp
+c0107456:	50                   	push   %eax
+c0107457:	e8 03 ed ff ff       	call   c010615f <pde2page>
+c010745c:	83 c4 10             	add    $0x10,%esp
+c010745f:	83 ec 0c             	sub    $0xc,%esp
+c0107462:	50                   	push   %eax
+c0107463:	e8 13 ed ff ff       	call   c010617b <page_ref>
+c0107468:	83 c4 10             	add    $0x10,%esp
+c010746b:	83 f8 01             	cmp    $0x1,%eax
+c010746e:	74 1e                	je     c010748e <check_pgdir+0x5a9>
+c0107470:	e8 d5 95 ff ff       	call   c0100a4a <print_stackframe>
+c0107475:	68 fc a2 10 c0       	push   $0xc010a2fc
+c010747a:	68 31 a0 10 c0       	push   $0xc010a031
+c010747f:	68 4a 02 00 00       	push   $0x24a
+c0107484:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107489:	e8 4e 8f ff ff       	call   c01003dc <__panic>
+    free_page(pde2page(boot_pgdir[0]));
+c010748e:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0107493:	8b 00                	mov    (%eax),%eax
+c0107495:	83 ec 0c             	sub    $0xc,%esp
+c0107498:	50                   	push   %eax
+c0107499:	e8 c1 ec ff ff       	call   c010615f <pde2page>
+c010749e:	83 c4 10             	add    $0x10,%esp
+c01074a1:	83 ec 08             	sub    $0x8,%esp
+c01074a4:	6a 01                	push   $0x1
+c01074a6:	50                   	push   %eax
+c01074a7:	e8 49 ef ff ff       	call   c01063f5 <free_pages>
+c01074ac:	83 c4 10             	add    $0x10,%esp
+    boot_pgdir[0] = 0;
+c01074af:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01074b4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_pgdir() succeeded!\n");
+c01074ba:	83 ec 0c             	sub    $0xc,%esp
+c01074bd:	68 23 a3 10 c0       	push   $0xc010a323
+c01074c2:	e8 af 8d ff ff       	call   c0100276 <cprintf>
+c01074c7:	83 c4 10             	add    $0x10,%esp
+}
+c01074ca:	90                   	nop
+c01074cb:	c9                   	leave  
+c01074cc:	c3                   	ret    
+
+c01074cd <check_boot_pgdir>:
+
+static void
+check_boot_pgdir(void) {
+c01074cd:	55                   	push   %ebp
+c01074ce:	89 e5                	mov    %esp,%ebp
+c01074d0:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+c01074d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01074da:	e9 b2 00 00 00       	jmp    c0107591 <check_boot_pgdir+0xc4>
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+c01074df:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01074e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01074e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01074e8:	c1 e8 0c             	shr    $0xc,%eax
+c01074eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01074ee:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c01074f3:	39 45 ec             	cmp    %eax,-0x14(%ebp)
+c01074f6:	72 1c                	jb     c0107514 <check_boot_pgdir+0x47>
+c01074f8:	e8 4d 95 ff ff       	call   c0100a4a <print_stackframe>
+c01074fd:	ff 75 f0             	pushl  -0x10(%ebp)
+c0107500:	68 44 9f 10 c0       	push   $0xc0109f44
+c0107505:	68 56 02 00 00       	push   $0x256
+c010750a:	68 0c a0 10 c0       	push   $0xc010a00c
+c010750f:	e8 c8 8e ff ff       	call   c01003dc <__panic>
+c0107514:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107517:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c010751c:	89 c2                	mov    %eax,%edx
+c010751e:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0107523:	83 ec 04             	sub    $0x4,%esp
+c0107526:	6a 00                	push   $0x0
+c0107528:	52                   	push   %edx
+c0107529:	50                   	push   %eax
+c010752a:	e8 5e f5 ff ff       	call   c0106a8d <get_pte>
+c010752f:	83 c4 10             	add    $0x10,%esp
+c0107532:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0107535:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0107539:	75 1e                	jne    c0107559 <check_boot_pgdir+0x8c>
+c010753b:	e8 0a 95 ff ff       	call   c0100a4a <print_stackframe>
+c0107540:	68 40 a3 10 c0       	push   $0xc010a340
+c0107545:	68 31 a0 10 c0       	push   $0xc010a031
+c010754a:	68 56 02 00 00       	push   $0x256
+c010754f:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107554:	e8 83 8e ff ff       	call   c01003dc <__panic>
+        assert(PTE_ADDR(*ptep) == i);
+c0107559:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010755c:	8b 00                	mov    (%eax),%eax
+c010755e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0107563:	89 c2                	mov    %eax,%edx
+c0107565:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107568:	39 c2                	cmp    %eax,%edx
+c010756a:	74 1e                	je     c010758a <check_boot_pgdir+0xbd>
+c010756c:	e8 d9 94 ff ff       	call   c0100a4a <print_stackframe>
+c0107571:	68 7d a3 10 c0       	push   $0xc010a37d
+c0107576:	68 31 a0 10 c0       	push   $0xc010a031
+c010757b:	68 57 02 00 00       	push   $0x257
+c0107580:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107585:	e8 52 8e ff ff       	call   c01003dc <__panic>
+
+static void
+check_boot_pgdir(void) {
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+c010758a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+c0107591:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0107594:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c0107599:	39 c2                	cmp    %eax,%edx
+c010759b:	0f 82 3e ff ff ff    	jb     c01074df <check_boot_pgdir+0x12>
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+        assert(PTE_ADDR(*ptep) == i);
+    }
+
+    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
+c01075a1:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01075a6:	05 ac 0f 00 00       	add    $0xfac,%eax
+c01075ab:	8b 00                	mov    (%eax),%eax
+c01075ad:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01075b2:	89 c2                	mov    %eax,%edx
+c01075b4:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01075b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c01075bc:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
+c01075c3:	77 1c                	ja     c01075e1 <check_boot_pgdir+0x114>
+c01075c5:	e8 80 94 ff ff       	call   c0100a4a <print_stackframe>
+c01075ca:	ff 75 e4             	pushl  -0x1c(%ebp)
+c01075cd:	68 68 9f 10 c0       	push   $0xc0109f68
+c01075d2:	68 5a 02 00 00       	push   $0x25a
+c01075d7:	68 0c a0 10 c0       	push   $0xc010a00c
+c01075dc:	e8 fb 8d ff ff       	call   c01003dc <__panic>
+c01075e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01075e4:	05 00 00 00 40       	add    $0x40000000,%eax
+c01075e9:	39 c2                	cmp    %eax,%edx
+c01075eb:	74 1e                	je     c010760b <check_boot_pgdir+0x13e>
+c01075ed:	e8 58 94 ff ff       	call   c0100a4a <print_stackframe>
+c01075f2:	68 94 a3 10 c0       	push   $0xc010a394
+c01075f7:	68 31 a0 10 c0       	push   $0xc010a031
+c01075fc:	68 5a 02 00 00       	push   $0x25a
+c0107601:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107606:	e8 d1 8d ff ff       	call   c01003dc <__panic>
+
+    assert(boot_pgdir[0] == 0);
+c010760b:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0107610:	8b 00                	mov    (%eax),%eax
+c0107612:	85 c0                	test   %eax,%eax
+c0107614:	74 1e                	je     c0107634 <check_boot_pgdir+0x167>
+c0107616:	e8 2f 94 ff ff       	call   c0100a4a <print_stackframe>
+c010761b:	68 c8 a3 10 c0       	push   $0xc010a3c8
+c0107620:	68 31 a0 10 c0       	push   $0xc010a031
+c0107625:	68 5c 02 00 00       	push   $0x25c
+c010762a:	68 0c a0 10 c0       	push   $0xc010a00c
+c010762f:	e8 a8 8d ff ff       	call   c01003dc <__panic>
+
+    struct Page *p;
+    p = alloc_page();
+c0107634:	83 ec 0c             	sub    $0xc,%esp
+c0107637:	6a 01                	push   $0x1
+c0107639:	e8 4b ed ff ff       	call   c0106389 <alloc_pages>
+c010763e:	83 c4 10             	add    $0x10,%esp
+c0107641:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
+c0107644:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c0107649:	6a 02                	push   $0x2
+c010764b:	68 00 01 00 00       	push   $0x100
+c0107650:	ff 75 e0             	pushl  -0x20(%ebp)
+c0107653:	50                   	push   %eax
+c0107654:	e8 ae f6 ff ff       	call   c0106d07 <page_insert>
+c0107659:	83 c4 10             	add    $0x10,%esp
+c010765c:	85 c0                	test   %eax,%eax
+c010765e:	74 1e                	je     c010767e <check_boot_pgdir+0x1b1>
+c0107660:	e8 e5 93 ff ff       	call   c0100a4a <print_stackframe>
+c0107665:	68 dc a3 10 c0       	push   $0xc010a3dc
+c010766a:	68 31 a0 10 c0       	push   $0xc010a031
+c010766f:	68 60 02 00 00       	push   $0x260
+c0107674:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107679:	e8 5e 8d ff ff       	call   c01003dc <__panic>
+    assert(page_ref(p) == 1);
+c010767e:	83 ec 0c             	sub    $0xc,%esp
+c0107681:	ff 75 e0             	pushl  -0x20(%ebp)
+c0107684:	e8 f2 ea ff ff       	call   c010617b <page_ref>
+c0107689:	83 c4 10             	add    $0x10,%esp
+c010768c:	83 f8 01             	cmp    $0x1,%eax
+c010768f:	74 1e                	je     c01076af <check_boot_pgdir+0x1e2>
+c0107691:	e8 b4 93 ff ff       	call   c0100a4a <print_stackframe>
+c0107696:	68 0a a4 10 c0       	push   $0xc010a40a
+c010769b:	68 31 a0 10 c0       	push   $0xc010a031
+c01076a0:	68 61 02 00 00       	push   $0x261
+c01076a5:	68 0c a0 10 c0       	push   $0xc010a00c
+c01076aa:	e8 2d 8d ff ff       	call   c01003dc <__panic>
+    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
+c01076af:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01076b4:	6a 02                	push   $0x2
+c01076b6:	68 00 11 00 00       	push   $0x1100
+c01076bb:	ff 75 e0             	pushl  -0x20(%ebp)
+c01076be:	50                   	push   %eax
+c01076bf:	e8 43 f6 ff ff       	call   c0106d07 <page_insert>
+c01076c4:	83 c4 10             	add    $0x10,%esp
+c01076c7:	85 c0                	test   %eax,%eax
+c01076c9:	74 1e                	je     c01076e9 <check_boot_pgdir+0x21c>
+c01076cb:	e8 7a 93 ff ff       	call   c0100a4a <print_stackframe>
+c01076d0:	68 1c a4 10 c0       	push   $0xc010a41c
+c01076d5:	68 31 a0 10 c0       	push   $0xc010a031
+c01076da:	68 62 02 00 00       	push   $0x262
+c01076df:	68 0c a0 10 c0       	push   $0xc010a00c
+c01076e4:	e8 f3 8c ff ff       	call   c01003dc <__panic>
+    assert(page_ref(p) == 2);
+c01076e9:	83 ec 0c             	sub    $0xc,%esp
+c01076ec:	ff 75 e0             	pushl  -0x20(%ebp)
+c01076ef:	e8 87 ea ff ff       	call   c010617b <page_ref>
+c01076f4:	83 c4 10             	add    $0x10,%esp
+c01076f7:	83 f8 02             	cmp    $0x2,%eax
+c01076fa:	74 1e                	je     c010771a <check_boot_pgdir+0x24d>
+c01076fc:	e8 49 93 ff ff       	call   c0100a4a <print_stackframe>
+c0107701:	68 53 a4 10 c0       	push   $0xc010a453
+c0107706:	68 31 a0 10 c0       	push   $0xc010a031
+c010770b:	68 63 02 00 00       	push   $0x263
+c0107710:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107715:	e8 c2 8c ff ff       	call   c01003dc <__panic>
+
+    const char *str = "ucore: Hello world!!";
+c010771a:	c7 45 dc 64 a4 10 c0 	movl   $0xc010a464,-0x24(%ebp)
+    strcpy((void *)0x100, str);
+c0107721:	83 ec 08             	sub    $0x8,%esp
+c0107724:	ff 75 dc             	pushl  -0x24(%ebp)
+c0107727:	68 00 01 00 00       	push   $0x100
+c010772c:	e8 20 06 00 00       	call   c0107d51 <strcpy>
+c0107731:	83 c4 10             	add    $0x10,%esp
+    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
+c0107734:	83 ec 08             	sub    $0x8,%esp
+c0107737:	68 00 11 00 00       	push   $0x1100
+c010773c:	68 00 01 00 00       	push   $0x100
+c0107741:	e8 85 06 00 00       	call   c0107dcb <strcmp>
+c0107746:	83 c4 10             	add    $0x10,%esp
+c0107749:	85 c0                	test   %eax,%eax
+c010774b:	74 1e                	je     c010776b <check_boot_pgdir+0x29e>
+c010774d:	e8 f8 92 ff ff       	call   c0100a4a <print_stackframe>
+c0107752:	68 7c a4 10 c0       	push   $0xc010a47c
+c0107757:	68 31 a0 10 c0       	push   $0xc010a031
+c010775c:	68 67 02 00 00       	push   $0x267
+c0107761:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107766:	e8 71 8c ff ff       	call   c01003dc <__panic>
+
+    *(char *)(page2kva(p) + 0x100) = '\0';
+c010776b:	83 ec 0c             	sub    $0xc,%esp
+c010776e:	ff 75 e0             	pushl  -0x20(%ebp)
+c0107771:	e8 1c e9 ff ff       	call   c0106092 <page2kva>
+c0107776:	83 c4 10             	add    $0x10,%esp
+c0107779:	05 00 01 00 00       	add    $0x100,%eax
+c010777e:	c6 00 00             	movb   $0x0,(%eax)
+    assert(strlen((const char *)0x100) == 0);
+c0107781:	83 ec 0c             	sub    $0xc,%esp
+c0107784:	68 00 01 00 00       	push   $0x100
+c0107789:	e8 6b 05 00 00       	call   c0107cf9 <strlen>
+c010778e:	83 c4 10             	add    $0x10,%esp
+c0107791:	85 c0                	test   %eax,%eax
+c0107793:	74 1e                	je     c01077b3 <check_boot_pgdir+0x2e6>
+c0107795:	e8 b0 92 ff ff       	call   c0100a4a <print_stackframe>
+c010779a:	68 b4 a4 10 c0       	push   $0xc010a4b4
+c010779f:	68 31 a0 10 c0       	push   $0xc010a031
+c01077a4:	68 6a 02 00 00       	push   $0x26a
+c01077a9:	68 0c a0 10 c0       	push   $0xc010a00c
+c01077ae:	e8 29 8c ff ff       	call   c01003dc <__panic>
+
+    free_page(p);
+c01077b3:	83 ec 08             	sub    $0x8,%esp
+c01077b6:	6a 01                	push   $0x1
+c01077b8:	ff 75 e0             	pushl  -0x20(%ebp)
+c01077bb:	e8 35 ec ff ff       	call   c01063f5 <free_pages>
+c01077c0:	83 c4 10             	add    $0x10,%esp
+    free_page(pde2page(boot_pgdir[0]));
+c01077c3:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01077c8:	8b 00                	mov    (%eax),%eax
+c01077ca:	83 ec 0c             	sub    $0xc,%esp
+c01077cd:	50                   	push   %eax
+c01077ce:	e8 8c e9 ff ff       	call   c010615f <pde2page>
+c01077d3:	83 c4 10             	add    $0x10,%esp
+c01077d6:	83 ec 08             	sub    $0x8,%esp
+c01077d9:	6a 01                	push   $0x1
+c01077db:	50                   	push   %eax
+c01077dc:	e8 14 ec ff ff       	call   c01063f5 <free_pages>
+c01077e1:	83 c4 10             	add    $0x10,%esp
+    boot_pgdir[0] = 0;
+c01077e4:	a1 e4 19 12 c0       	mov    0xc01219e4,%eax
+c01077e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_boot_pgdir() succeeded!\n");
+c01077ef:	83 ec 0c             	sub    $0xc,%esp
+c01077f2:	68 d8 a4 10 c0       	push   $0xc010a4d8
+c01077f7:	e8 7a 8a ff ff       	call   c0100276 <cprintf>
+c01077fc:	83 c4 10             	add    $0x10,%esp
+}
+c01077ff:	90                   	nop
+c0107800:	c9                   	leave  
+c0107801:	c3                   	ret    
+
+c0107802 <perm2str>:
+
+//perm2str - use string 'u,r,w,-' to present the permission
+static const char *
+perm2str(int perm) {
+c0107802:	55                   	push   %ebp
+c0107803:	89 e5                	mov    %esp,%ebp
+    static char str[4];
+    str[0] = (perm & PTE_U) ? 'u' : '-';
+c0107805:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107808:	83 e0 04             	and    $0x4,%eax
+c010780b:	85 c0                	test   %eax,%eax
+c010780d:	74 07                	je     c0107816 <perm2str+0x14>
+c010780f:	b8 75 00 00 00       	mov    $0x75,%eax
+c0107814:	eb 05                	jmp    c010781b <perm2str+0x19>
+c0107816:	b8 2d 00 00 00       	mov    $0x2d,%eax
+c010781b:	a2 68 1a 12 c0       	mov    %al,0xc0121a68
+    str[1] = 'r';
+c0107820:	c6 05 69 1a 12 c0 72 	movb   $0x72,0xc0121a69
+    str[2] = (perm & PTE_W) ? 'w' : '-';
+c0107827:	8b 45 08             	mov    0x8(%ebp),%eax
+c010782a:	83 e0 02             	and    $0x2,%eax
+c010782d:	85 c0                	test   %eax,%eax
+c010782f:	74 07                	je     c0107838 <perm2str+0x36>
+c0107831:	b8 77 00 00 00       	mov    $0x77,%eax
+c0107836:	eb 05                	jmp    c010783d <perm2str+0x3b>
+c0107838:	b8 2d 00 00 00       	mov    $0x2d,%eax
+c010783d:	a2 6a 1a 12 c0       	mov    %al,0xc0121a6a
+    str[3] = '\0';
+c0107842:	c6 05 6b 1a 12 c0 00 	movb   $0x0,0xc0121a6b
+    return str;
+c0107849:	b8 68 1a 12 c0       	mov    $0xc0121a68,%eax
+}
+c010784e:	5d                   	pop    %ebp
+c010784f:	c3                   	ret    
+
+c0107850 <get_pgtable_items>:
+//  table:       the beginning addr of table
+//  left_store:  the pointer of the high side of table's next range
+//  right_store: the pointer of the low side of table's next range
+// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+c0107850:	55                   	push   %ebp
+c0107851:	89 e5                	mov    %esp,%ebp
+c0107853:	83 ec 10             	sub    $0x10,%esp
+    if (start >= right) {
+c0107856:	8b 45 10             	mov    0x10(%ebp),%eax
+c0107859:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010785c:	72 0e                	jb     c010786c <get_pgtable_items+0x1c>
+        return 0;
+c010785e:	b8 00 00 00 00       	mov    $0x0,%eax
+c0107863:	e9 9a 00 00 00       	jmp    c0107902 <get_pgtable_items+0xb2>
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+        start ++;
+c0107868:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+    if (start >= right) {
+        return 0;
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+c010786c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010786f:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0107872:	73 18                	jae    c010788c <get_pgtable_items+0x3c>
+c0107874:	8b 45 10             	mov    0x10(%ebp),%eax
+c0107877:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c010787e:	8b 45 14             	mov    0x14(%ebp),%eax
+c0107881:	01 d0                	add    %edx,%eax
+c0107883:	8b 00                	mov    (%eax),%eax
+c0107885:	83 e0 01             	and    $0x1,%eax
+c0107888:	85 c0                	test   %eax,%eax
+c010788a:	74 dc                	je     c0107868 <get_pgtable_items+0x18>
+        start ++;
+    }
+    if (start < right) {
+c010788c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010788f:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0107892:	73 69                	jae    c01078fd <get_pgtable_items+0xad>
+        if (left_store != NULL) {
+c0107894:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c0107898:	74 08                	je     c01078a2 <get_pgtable_items+0x52>
+            *left_store = start;
+c010789a:	8b 45 18             	mov    0x18(%ebp),%eax
+c010789d:	8b 55 10             	mov    0x10(%ebp),%edx
+c01078a0:	89 10                	mov    %edx,(%eax)
+        }
+        int perm = (table[start ++] & PTE_USER);
+c01078a2:	8b 45 10             	mov    0x10(%ebp),%eax
+c01078a5:	8d 50 01             	lea    0x1(%eax),%edx
+c01078a8:	89 55 10             	mov    %edx,0x10(%ebp)
+c01078ab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c01078b2:	8b 45 14             	mov    0x14(%ebp),%eax
+c01078b5:	01 d0                	add    %edx,%eax
+c01078b7:	8b 00                	mov    (%eax),%eax
+c01078b9:	83 e0 07             	and    $0x7,%eax
+c01078bc:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while (start < right && (table[start] & PTE_USER) == perm) {
+c01078bf:	eb 04                	jmp    c01078c5 <get_pgtable_items+0x75>
+            start ++;
+c01078c1:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+    if (start < right) {
+        if (left_store != NULL) {
+            *left_store = start;
+        }
+        int perm = (table[start ++] & PTE_USER);
+        while (start < right && (table[start] & PTE_USER) == perm) {
+c01078c5:	8b 45 10             	mov    0x10(%ebp),%eax
+c01078c8:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01078cb:	73 1d                	jae    c01078ea <get_pgtable_items+0x9a>
+c01078cd:	8b 45 10             	mov    0x10(%ebp),%eax
+c01078d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c01078d7:	8b 45 14             	mov    0x14(%ebp),%eax
+c01078da:	01 d0                	add    %edx,%eax
+c01078dc:	8b 00                	mov    (%eax),%eax
+c01078de:	83 e0 07             	and    $0x7,%eax
+c01078e1:	89 c2                	mov    %eax,%edx
+c01078e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01078e6:	39 c2                	cmp    %eax,%edx
+c01078e8:	74 d7                	je     c01078c1 <get_pgtable_items+0x71>
+            start ++;
+        }
+        if (right_store != NULL) {
+c01078ea:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c01078ee:	74 08                	je     c01078f8 <get_pgtable_items+0xa8>
+            *right_store = start;
+c01078f0:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c01078f3:	8b 55 10             	mov    0x10(%ebp),%edx
+c01078f6:	89 10                	mov    %edx,(%eax)
+        }
+        return perm;
+c01078f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01078fb:	eb 05                	jmp    c0107902 <get_pgtable_items+0xb2>
+    }
+    return 0;
+c01078fd:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107902:	c9                   	leave  
+c0107903:	c3                   	ret    
+
+c0107904 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+c0107904:	55                   	push   %ebp
+c0107905:	89 e5                	mov    %esp,%ebp
+c0107907:	57                   	push   %edi
+c0107908:	56                   	push   %esi
+c0107909:	53                   	push   %ebx
+c010790a:	83 ec 2c             	sub    $0x2c,%esp
+    cprintf("-------------------- BEGIN --------------------\n");
+c010790d:	83 ec 0c             	sub    $0xc,%esp
+c0107910:	68 f8 a4 10 c0       	push   $0xc010a4f8
+c0107915:	e8 5c 89 ff ff       	call   c0100276 <cprintf>
+c010791a:	83 c4 10             	add    $0x10,%esp
+    size_t left, right = 0, perm;
+c010791d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+c0107924:	e9 e5 00 00 00       	jmp    c0107a0e <print_pgdir+0x10a>
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c0107929:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010792c:	83 ec 0c             	sub    $0xc,%esp
+c010792f:	50                   	push   %eax
+c0107930:	e8 cd fe ff ff       	call   c0107802 <perm2str>
+c0107935:	83 c4 10             	add    $0x10,%esp
+c0107938:	89 c7                	mov    %eax,%edi
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+c010793a:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010793d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107940:	29 c2                	sub    %eax,%edx
+c0107942:	89 d0                	mov    %edx,%eax
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c0107944:	c1 e0 16             	shl    $0x16,%eax
+c0107947:	89 c3                	mov    %eax,%ebx
+c0107949:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010794c:	c1 e0 16             	shl    $0x16,%eax
+c010794f:	89 c1                	mov    %eax,%ecx
+c0107951:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107954:	c1 e0 16             	shl    $0x16,%eax
+c0107957:	89 c2                	mov    %eax,%edx
+c0107959:	8b 75 dc             	mov    -0x24(%ebp),%esi
+c010795c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010795f:	29 c6                	sub    %eax,%esi
+c0107961:	89 f0                	mov    %esi,%eax
+c0107963:	83 ec 08             	sub    $0x8,%esp
+c0107966:	57                   	push   %edi
+c0107967:	53                   	push   %ebx
+c0107968:	51                   	push   %ecx
+c0107969:	52                   	push   %edx
+c010796a:	50                   	push   %eax
+c010796b:	68 29 a5 10 c0       	push   $0xc010a529
+c0107970:	e8 01 89 ff ff       	call   c0100276 <cprintf>
+c0107975:	83 c4 20             	add    $0x20,%esp
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+c0107978:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010797b:	c1 e0 0a             	shl    $0xa,%eax
+c010797e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+c0107981:	eb 4f                	jmp    c01079d2 <print_pgdir+0xce>
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c0107983:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107986:	83 ec 0c             	sub    $0xc,%esp
+c0107989:	50                   	push   %eax
+c010798a:	e8 73 fe ff ff       	call   c0107802 <perm2str>
+c010798f:	83 c4 10             	add    $0x10,%esp
+c0107992:	89 c7                	mov    %eax,%edi
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+c0107994:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0107997:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010799a:	29 c2                	sub    %eax,%edx
+c010799c:	89 d0                	mov    %edx,%eax
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c010799e:	c1 e0 0c             	shl    $0xc,%eax
+c01079a1:	89 c3                	mov    %eax,%ebx
+c01079a3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01079a6:	c1 e0 0c             	shl    $0xc,%eax
+c01079a9:	89 c1                	mov    %eax,%ecx
+c01079ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01079ae:	c1 e0 0c             	shl    $0xc,%eax
+c01079b1:	89 c2                	mov    %eax,%edx
+c01079b3:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+c01079b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01079b9:	29 c6                	sub    %eax,%esi
+c01079bb:	89 f0                	mov    %esi,%eax
+c01079bd:	83 ec 08             	sub    $0x8,%esp
+c01079c0:	57                   	push   %edi
+c01079c1:	53                   	push   %ebx
+c01079c2:	51                   	push   %ecx
+c01079c3:	52                   	push   %edx
+c01079c4:	50                   	push   %eax
+c01079c5:	68 48 a5 10 c0       	push   $0xc010a548
+c01079ca:	e8 a7 88 ff ff       	call   c0100276 <cprintf>
+c01079cf:	83 c4 20             	add    $0x20,%esp
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+c01079d2:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
+c01079d7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01079da:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01079dd:	89 d3                	mov    %edx,%ebx
+c01079df:	c1 e3 0a             	shl    $0xa,%ebx
+c01079e2:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01079e5:	89 d1                	mov    %edx,%ecx
+c01079e7:	c1 e1 0a             	shl    $0xa,%ecx
+c01079ea:	83 ec 08             	sub    $0x8,%esp
+c01079ed:	8d 55 d4             	lea    -0x2c(%ebp),%edx
+c01079f0:	52                   	push   %edx
+c01079f1:	8d 55 d8             	lea    -0x28(%ebp),%edx
+c01079f4:	52                   	push   %edx
+c01079f5:	56                   	push   %esi
+c01079f6:	50                   	push   %eax
+c01079f7:	53                   	push   %ebx
+c01079f8:	51                   	push   %ecx
+c01079f9:	e8 52 fe ff ff       	call   c0107850 <get_pgtable_items>
+c01079fe:	83 c4 20             	add    $0x20,%esp
+c0107a01:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0107a04:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0107a08:	0f 85 75 ff ff ff    	jne    c0107983 <print_pgdir+0x7f>
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+c0107a0e:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
+c0107a13:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107a16:	83 ec 08             	sub    $0x8,%esp
+c0107a19:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c0107a1c:	52                   	push   %edx
+c0107a1d:	8d 55 e0             	lea    -0x20(%ebp),%edx
+c0107a20:	52                   	push   %edx
+c0107a21:	51                   	push   %ecx
+c0107a22:	50                   	push   %eax
+c0107a23:	68 00 04 00 00       	push   $0x400
+c0107a28:	6a 00                	push   $0x0
+c0107a2a:	e8 21 fe ff ff       	call   c0107850 <get_pgtable_items>
+c0107a2f:	83 c4 20             	add    $0x20,%esp
+c0107a32:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0107a35:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0107a39:	0f 85 ea fe ff ff    	jne    c0107929 <print_pgdir+0x25>
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+        }
+    }
+    cprintf("--------------------- END ---------------------\n");
+c0107a3f:	83 ec 0c             	sub    $0xc,%esp
+c0107a42:	68 6c a5 10 c0       	push   $0xc010a56c
+c0107a47:	e8 2a 88 ff ff       	call   c0100276 <cprintf>
+c0107a4c:	83 c4 10             	add    $0x10,%esp
+}
+c0107a4f:	90                   	nop
+c0107a50:	8d 65 f4             	lea    -0xc(%ebp),%esp
+c0107a53:	5b                   	pop    %ebx
+c0107a54:	5e                   	pop    %esi
+c0107a55:	5f                   	pop    %edi
+c0107a56:	5d                   	pop    %ebp
+c0107a57:	c3                   	ret    
+
+c0107a58 <kmalloc>:
+
+void *
+kmalloc(size_t n) {
+c0107a58:	55                   	push   %ebp
+c0107a59:	89 e5                	mov    %esp,%ebp
+c0107a5b:	83 ec 18             	sub    $0x18,%esp
+    void * ptr=NULL;
+c0107a5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    struct Page *base=NULL;
+c0107a65:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    assert(n > 0 && n < 1024*0124);
+c0107a6c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0107a70:	74 09                	je     c0107a7b <kmalloc+0x23>
+c0107a72:	81 7d 08 ff 4f 01 00 	cmpl   $0x14fff,0x8(%ebp)
+c0107a79:	76 1e                	jbe    c0107a99 <kmalloc+0x41>
+c0107a7b:	e8 ca 8f ff ff       	call   c0100a4a <print_stackframe>
+c0107a80:	68 9d a5 10 c0       	push   $0xc010a59d
+c0107a85:	68 31 a0 10 c0       	push   $0xc010a031
+c0107a8a:	68 b6 02 00 00       	push   $0x2b6
+c0107a8f:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107a94:	e8 43 89 ff ff       	call   c01003dc <__panic>
+    int num_pages=(n+PGSIZE-1)/PGSIZE;
+c0107a99:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107a9c:	05 ff 0f 00 00       	add    $0xfff,%eax
+c0107aa1:	c1 e8 0c             	shr    $0xc,%eax
+c0107aa4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    base = alloc_pages(num_pages);
+c0107aa7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107aaa:	83 ec 0c             	sub    $0xc,%esp
+c0107aad:	50                   	push   %eax
+c0107aae:	e8 d6 e8 ff ff       	call   c0106389 <alloc_pages>
+c0107ab3:	83 c4 10             	add    $0x10,%esp
+c0107ab6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    assert(base != NULL);
+c0107ab9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0107abd:	75 1e                	jne    c0107add <kmalloc+0x85>
+c0107abf:	e8 86 8f ff ff       	call   c0100a4a <print_stackframe>
+c0107ac4:	68 b4 a5 10 c0       	push   $0xc010a5b4
+c0107ac9:	68 31 a0 10 c0       	push   $0xc010a031
+c0107ace:	68 b9 02 00 00       	push   $0x2b9
+c0107ad3:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107ad8:	e8 ff 88 ff ff       	call   c01003dc <__panic>
+    ptr=page2kva(base);
+c0107add:	83 ec 0c             	sub    $0xc,%esp
+c0107ae0:	ff 75 f0             	pushl  -0x10(%ebp)
+c0107ae3:	e8 aa e5 ff ff       	call   c0106092 <page2kva>
+c0107ae8:	83 c4 10             	add    $0x10,%esp
+c0107aeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return ptr;
+c0107aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0107af1:	c9                   	leave  
+c0107af2:	c3                   	ret    
+
+c0107af3 <kfree>:
+
+void 
+kfree(void *ptr, size_t n) {
+c0107af3:	55                   	push   %ebp
+c0107af4:	89 e5                	mov    %esp,%ebp
+c0107af6:	83 ec 18             	sub    $0x18,%esp
+    assert(n > 0 && n < 1024*0124);
+c0107af9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0107afd:	74 09                	je     c0107b08 <kfree+0x15>
+c0107aff:	81 7d 0c ff 4f 01 00 	cmpl   $0x14fff,0xc(%ebp)
+c0107b06:	76 1e                	jbe    c0107b26 <kfree+0x33>
+c0107b08:	e8 3d 8f ff ff       	call   c0100a4a <print_stackframe>
+c0107b0d:	68 9d a5 10 c0       	push   $0xc010a59d
+c0107b12:	68 31 a0 10 c0       	push   $0xc010a031
+c0107b17:	68 c0 02 00 00       	push   $0x2c0
+c0107b1c:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107b21:	e8 b6 88 ff ff       	call   c01003dc <__panic>
+    assert(ptr != NULL);
+c0107b26:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0107b2a:	75 1e                	jne    c0107b4a <kfree+0x57>
+c0107b2c:	e8 19 8f ff ff       	call   c0100a4a <print_stackframe>
+c0107b31:	68 c1 a5 10 c0       	push   $0xc010a5c1
+c0107b36:	68 31 a0 10 c0       	push   $0xc010a031
+c0107b3b:	68 c1 02 00 00       	push   $0x2c1
+c0107b40:	68 0c a0 10 c0       	push   $0xc010a00c
+c0107b45:	e8 92 88 ff ff       	call   c01003dc <__panic>
+    struct Page *base=NULL;
+c0107b4a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    int num_pages=(n+PGSIZE-1)/PGSIZE;
+c0107b51:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107b54:	05 ff 0f 00 00       	add    $0xfff,%eax
+c0107b59:	c1 e8 0c             	shr    $0xc,%eax
+c0107b5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    base = kva2page(ptr);
+c0107b5f:	83 ec 0c             	sub    $0xc,%esp
+c0107b62:	ff 75 08             	pushl  0x8(%ebp)
+c0107b65:	e8 72 e5 ff ff       	call   c01060dc <kva2page>
+c0107b6a:	83 c4 10             	add    $0x10,%esp
+c0107b6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    free_pages(base, num_pages);
+c0107b70:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107b73:	83 ec 08             	sub    $0x8,%esp
+c0107b76:	50                   	push   %eax
+c0107b77:	ff 75 f4             	pushl  -0xc(%ebp)
+c0107b7a:	e8 76 e8 ff ff       	call   c01063f5 <free_pages>
+c0107b7f:	83 c4 10             	add    $0x10,%esp
+}
+c0107b82:	90                   	nop
+c0107b83:	c9                   	leave  
+c0107b84:	c3                   	ret    
+
+c0107b85 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0107b85:	55                   	push   %ebp
+c0107b86:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0107b88:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107b8b:	8b 15 58 1b 12 c0    	mov    0xc0121b58,%edx
+c0107b91:	29 d0                	sub    %edx,%eax
+c0107b93:	c1 f8 05             	sar    $0x5,%eax
+}
+c0107b96:	5d                   	pop    %ebp
+c0107b97:	c3                   	ret    
+
+c0107b98 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c0107b98:	55                   	push   %ebp
+c0107b99:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c0107b9b:	ff 75 08             	pushl  0x8(%ebp)
+c0107b9e:	e8 e2 ff ff ff       	call   c0107b85 <page2ppn>
+c0107ba3:	83 c4 04             	add    $0x4,%esp
+c0107ba6:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0107ba9:	c9                   	leave  
+c0107baa:	c3                   	ret    
+
+c0107bab <page2kva>:
+    }
+    return &pages[PPN(pa)];
+}
+
+static inline void *
+page2kva(struct Page *page) {
+c0107bab:	55                   	push   %ebp
+c0107bac:	89 e5                	mov    %esp,%ebp
+c0107bae:	83 ec 18             	sub    $0x18,%esp
+    return KADDR(page2pa(page));
+c0107bb1:	ff 75 08             	pushl  0x8(%ebp)
+c0107bb4:	e8 df ff ff ff       	call   c0107b98 <page2pa>
+c0107bb9:	83 c4 04             	add    $0x4,%esp
+c0107bbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107bbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107bc2:	c1 e8 0c             	shr    $0xc,%eax
+c0107bc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107bc8:	a1 e0 19 12 c0       	mov    0xc01219e0,%eax
+c0107bcd:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0107bd0:	72 19                	jb     c0107beb <page2kva+0x40>
+c0107bd2:	e8 73 8e ff ff       	call   c0100a4a <print_stackframe>
+c0107bd7:	ff 75 f4             	pushl  -0xc(%ebp)
+c0107bda:	68 d0 a5 10 c0       	push   $0xc010a5d0
+c0107bdf:	6a 62                	push   $0x62
+c0107be1:	68 f3 a5 10 c0       	push   $0xc010a5f3
+c0107be6:	e8 f1 87 ff ff       	call   c01003dc <__panic>
+c0107beb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107bee:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0107bf3:	c9                   	leave  
+c0107bf4:	c3                   	ret    
+
+c0107bf5 <swapfs_init>:
+#include <ide.h>
+#include <pmm.h>
+#include <assert.h>
+
+void
+swapfs_init(void) {
+c0107bf5:	55                   	push   %ebp
+c0107bf6:	89 e5                	mov    %esp,%ebp
+c0107bf8:	83 ec 08             	sub    $0x8,%esp
+    static_assert((PGSIZE % SECTSIZE) == 0);
+    if (!ide_device_valid(SWAP_DEV_NO)) {
+c0107bfb:	83 ec 0c             	sub    $0xc,%esp
+c0107bfe:	6a 01                	push   $0x1
+c0107c00:	e8 b2 94 ff ff       	call   c01010b7 <ide_device_valid>
+c0107c05:	83 c4 10             	add    $0x10,%esp
+c0107c08:	85 c0                	test   %eax,%eax
+c0107c0a:	75 19                	jne    c0107c25 <swapfs_init+0x30>
+        panic("swap fs isn't available.\n");
+c0107c0c:	e8 39 8e ff ff       	call   c0100a4a <print_stackframe>
+c0107c11:	83 ec 04             	sub    $0x4,%esp
+c0107c14:	68 01 a6 10 c0       	push   $0xc010a601
+c0107c19:	6a 0d                	push   $0xd
+c0107c1b:	68 1b a6 10 c0       	push   $0xc010a61b
+c0107c20:	e8 b7 87 ff ff       	call   c01003dc <__panic>
+    }
+    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
+c0107c25:	83 ec 0c             	sub    $0xc,%esp
+c0107c28:	6a 01                	push   $0x1
+c0107c2a:	e8 c8 94 ff ff       	call   c01010f7 <ide_device_size>
+c0107c2f:	83 c4 10             	add    $0x10,%esp
+c0107c32:	c1 e8 03             	shr    $0x3,%eax
+c0107c35:	a3 1c 1b 12 c0       	mov    %eax,0xc0121b1c
+}
+c0107c3a:	90                   	nop
+c0107c3b:	c9                   	leave  
+c0107c3c:	c3                   	ret    
+
+c0107c3d <swapfs_read>:
+
+int
+swapfs_read(swap_entry_t entry, struct Page *page) {
+c0107c3d:	55                   	push   %ebp
+c0107c3e:	89 e5                	mov    %esp,%ebp
+c0107c40:	83 ec 18             	sub    $0x18,%esp
+    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c0107c43:	83 ec 0c             	sub    $0xc,%esp
+c0107c46:	ff 75 0c             	pushl  0xc(%ebp)
+c0107c49:	e8 5d ff ff ff       	call   c0107bab <page2kva>
+c0107c4e:	83 c4 10             	add    $0x10,%esp
+c0107c51:	89 c2                	mov    %eax,%edx
+c0107c53:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107c56:	c1 e8 08             	shr    $0x8,%eax
+c0107c59:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107c5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107c60:	74 0a                	je     c0107c6c <swapfs_read+0x2f>
+c0107c62:	a1 1c 1b 12 c0       	mov    0xc0121b1c,%eax
+c0107c67:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c0107c6a:	72 19                	jb     c0107c85 <swapfs_read+0x48>
+c0107c6c:	e8 d9 8d ff ff       	call   c0100a4a <print_stackframe>
+c0107c71:	ff 75 08             	pushl  0x8(%ebp)
+c0107c74:	68 2c a6 10 c0       	push   $0xc010a62c
+c0107c79:	6a 14                	push   $0x14
+c0107c7b:	68 1b a6 10 c0       	push   $0xc010a61b
+c0107c80:	e8 57 87 ff ff       	call   c01003dc <__panic>
+c0107c85:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107c88:	c1 e0 03             	shl    $0x3,%eax
+c0107c8b:	6a 08                	push   $0x8
+c0107c8d:	52                   	push   %edx
+c0107c8e:	50                   	push   %eax
+c0107c8f:	6a 01                	push   $0x1
+c0107c91:	e8 a1 94 ff ff       	call   c0101137 <ide_read_secs>
+c0107c96:	83 c4 10             	add    $0x10,%esp
+}
+c0107c99:	c9                   	leave  
+c0107c9a:	c3                   	ret    
+
+c0107c9b <swapfs_write>:
+
+int
+swapfs_write(swap_entry_t entry, struct Page *page) {
+c0107c9b:	55                   	push   %ebp
+c0107c9c:	89 e5                	mov    %esp,%ebp
+c0107c9e:	83 ec 18             	sub    $0x18,%esp
+    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c0107ca1:	83 ec 0c             	sub    $0xc,%esp
+c0107ca4:	ff 75 0c             	pushl  0xc(%ebp)
+c0107ca7:	e8 ff fe ff ff       	call   c0107bab <page2kva>
+c0107cac:	83 c4 10             	add    $0x10,%esp
+c0107caf:	89 c2                	mov    %eax,%edx
+c0107cb1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107cb4:	c1 e8 08             	shr    $0x8,%eax
+c0107cb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107cba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107cbe:	74 0a                	je     c0107cca <swapfs_write+0x2f>
+c0107cc0:	a1 1c 1b 12 c0       	mov    0xc0121b1c,%eax
+c0107cc5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c0107cc8:	72 19                	jb     c0107ce3 <swapfs_write+0x48>
+c0107cca:	e8 7b 8d ff ff       	call   c0100a4a <print_stackframe>
+c0107ccf:	ff 75 08             	pushl  0x8(%ebp)
+c0107cd2:	68 2c a6 10 c0       	push   $0xc010a62c
+c0107cd7:	6a 19                	push   $0x19
+c0107cd9:	68 1b a6 10 c0       	push   $0xc010a61b
+c0107cde:	e8 f9 86 ff ff       	call   c01003dc <__panic>
+c0107ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107ce6:	c1 e0 03             	shl    $0x3,%eax
+c0107ce9:	6a 08                	push   $0x8
+c0107ceb:	52                   	push   %edx
+c0107cec:	50                   	push   %eax
+c0107ced:	6a 01                	push   $0x1
+c0107cef:	e8 77 96 ff ff       	call   c010136b <ide_write_secs>
+c0107cf4:	83 c4 10             	add    $0x10,%esp
+}
+c0107cf7:	c9                   	leave  
+c0107cf8:	c3                   	ret    
+
+c0107cf9 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+c0107cf9:	55                   	push   %ebp
+c0107cfa:	89 e5                	mov    %esp,%ebp
+c0107cfc:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c0107cff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+c0107d06:	eb 04                	jmp    c0107d0c <strlen+0x13>
+        cnt ++;
+c0107d08:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+c0107d0c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d0f:	8d 50 01             	lea    0x1(%eax),%edx
+c0107d12:	89 55 08             	mov    %edx,0x8(%ebp)
+c0107d15:	0f b6 00             	movzbl (%eax),%eax
+c0107d18:	84 c0                	test   %al,%al
+c0107d1a:	75 ec                	jne    c0107d08 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+c0107d1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0107d1f:	c9                   	leave  
+c0107d20:	c3                   	ret    
+
+c0107d21 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+c0107d21:	55                   	push   %ebp
+c0107d22:	89 e5                	mov    %esp,%ebp
+c0107d24:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c0107d27:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+c0107d2e:	eb 04                	jmp    c0107d34 <strnlen+0x13>
+        cnt ++;
+c0107d30:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+c0107d34:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107d37:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0107d3a:	73 10                	jae    c0107d4c <strnlen+0x2b>
+c0107d3c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d3f:	8d 50 01             	lea    0x1(%eax),%edx
+c0107d42:	89 55 08             	mov    %edx,0x8(%ebp)
+c0107d45:	0f b6 00             	movzbl (%eax),%eax
+c0107d48:	84 c0                	test   %al,%al
+c0107d4a:	75 e4                	jne    c0107d30 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+c0107d4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0107d4f:	c9                   	leave  
+c0107d50:	c3                   	ret    
+
+c0107d51 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+c0107d51:	55                   	push   %ebp
+c0107d52:	89 e5                	mov    %esp,%ebp
+c0107d54:	57                   	push   %edi
+c0107d55:	56                   	push   %esi
+c0107d56:	83 ec 20             	sub    $0x20,%esp
+c0107d59:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107d5f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107d62:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+c0107d65:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0107d68:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d6b:	89 d1                	mov    %edx,%ecx
+c0107d6d:	89 c2                	mov    %eax,%edx
+c0107d6f:	89 ce                	mov    %ecx,%esi
+c0107d71:	89 d7                	mov    %edx,%edi
+c0107d73:	ac                   	lods   %ds:(%esi),%al
+c0107d74:	aa                   	stos   %al,%es:(%edi)
+c0107d75:	84 c0                	test   %al,%al
+c0107d77:	75 fa                	jne    c0107d73 <strcpy+0x22>
+c0107d79:	89 fa                	mov    %edi,%edx
+c0107d7b:	89 f1                	mov    %esi,%ecx
+c0107d7d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c0107d80:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c0107d83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+c0107d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+c0107d89:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+c0107d8a:	83 c4 20             	add    $0x20,%esp
+c0107d8d:	5e                   	pop    %esi
+c0107d8e:	5f                   	pop    %edi
+c0107d8f:	5d                   	pop    %ebp
+c0107d90:	c3                   	ret    
+
+c0107d91 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+c0107d91:	55                   	push   %ebp
+c0107d92:	89 e5                	mov    %esp,%ebp
+c0107d94:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+c0107d97:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d9a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+c0107d9d:	eb 21                	jmp    c0107dc0 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+c0107d9f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107da2:	0f b6 10             	movzbl (%eax),%edx
+c0107da5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107da8:	88 10                	mov    %dl,(%eax)
+c0107daa:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107dad:	0f b6 00             	movzbl (%eax),%eax
+c0107db0:	84 c0                	test   %al,%al
+c0107db2:	74 04                	je     c0107db8 <strncpy+0x27>
+            src ++;
+c0107db4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+c0107db8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c0107dbc:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+c0107dc0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0107dc4:	75 d9                	jne    c0107d9f <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+c0107dc6:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c0107dc9:	c9                   	leave  
+c0107dca:	c3                   	ret    
+
+c0107dcb <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+c0107dcb:	55                   	push   %ebp
+c0107dcc:	89 e5                	mov    %esp,%ebp
+c0107dce:	57                   	push   %edi
+c0107dcf:	56                   	push   %esi
+c0107dd0:	83 ec 20             	sub    $0x20,%esp
+c0107dd3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107dd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107dd9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+c0107ddf:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0107de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107de5:	89 d1                	mov    %edx,%ecx
+c0107de7:	89 c2                	mov    %eax,%edx
+c0107de9:	89 ce                	mov    %ecx,%esi
+c0107deb:	89 d7                	mov    %edx,%edi
+c0107ded:	ac                   	lods   %ds:(%esi),%al
+c0107dee:	ae                   	scas   %es:(%edi),%al
+c0107def:	75 08                	jne    c0107df9 <strcmp+0x2e>
+c0107df1:	84 c0                	test   %al,%al
+c0107df3:	75 f8                	jne    c0107ded <strcmp+0x22>
+c0107df5:	31 c0                	xor    %eax,%eax
+c0107df7:	eb 04                	jmp    c0107dfd <strcmp+0x32>
+c0107df9:	19 c0                	sbb    %eax,%eax
+c0107dfb:	0c 01                	or     $0x1,%al
+c0107dfd:	89 fa                	mov    %edi,%edx
+c0107dff:	89 f1                	mov    %esi,%ecx
+c0107e01:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0107e04:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c0107e07:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+c0107e0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+c0107e0d:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+c0107e0e:	83 c4 20             	add    $0x20,%esp
+c0107e11:	5e                   	pop    %esi
+c0107e12:	5f                   	pop    %edi
+c0107e13:	5d                   	pop    %ebp
+c0107e14:	c3                   	ret    
+
+c0107e15 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+c0107e15:	55                   	push   %ebp
+c0107e16:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c0107e18:	eb 0c                	jmp    c0107e26 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+c0107e1a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c0107e1e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c0107e22:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c0107e26:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0107e2a:	74 1a                	je     c0107e46 <strncmp+0x31>
+c0107e2c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107e2f:	0f b6 00             	movzbl (%eax),%eax
+c0107e32:	84 c0                	test   %al,%al
+c0107e34:	74 10                	je     c0107e46 <strncmp+0x31>
+c0107e36:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107e39:	0f b6 10             	movzbl (%eax),%edx
+c0107e3c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107e3f:	0f b6 00             	movzbl (%eax),%eax
+c0107e42:	38 c2                	cmp    %al,%dl
+c0107e44:	74 d4                	je     c0107e1a <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+c0107e46:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0107e4a:	74 18                	je     c0107e64 <strncmp+0x4f>
+c0107e4c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107e4f:	0f b6 00             	movzbl (%eax),%eax
+c0107e52:	0f b6 d0             	movzbl %al,%edx
+c0107e55:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107e58:	0f b6 00             	movzbl (%eax),%eax
+c0107e5b:	0f b6 c0             	movzbl %al,%eax
+c0107e5e:	29 c2                	sub    %eax,%edx
+c0107e60:	89 d0                	mov    %edx,%eax
+c0107e62:	eb 05                	jmp    c0107e69 <strncmp+0x54>
+c0107e64:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107e69:	5d                   	pop    %ebp
+c0107e6a:	c3                   	ret    
+
+c0107e6b <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+c0107e6b:	55                   	push   %ebp
+c0107e6c:	89 e5                	mov    %esp,%ebp
+c0107e6e:	83 ec 04             	sub    $0x4,%esp
+c0107e71:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107e74:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c0107e77:	eb 14                	jmp    c0107e8d <strchr+0x22>
+        if (*s == c) {
+c0107e79:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107e7c:	0f b6 00             	movzbl (%eax),%eax
+c0107e7f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+c0107e82:	75 05                	jne    c0107e89 <strchr+0x1e>
+            return (char *)s;
+c0107e84:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107e87:	eb 13                	jmp    c0107e9c <strchr+0x31>
+        }
+        s ++;
+c0107e89:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+c0107e8d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107e90:	0f b6 00             	movzbl (%eax),%eax
+c0107e93:	84 c0                	test   %al,%al
+c0107e95:	75 e2                	jne    c0107e79 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+c0107e97:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107e9c:	c9                   	leave  
+c0107e9d:	c3                   	ret    
+
+c0107e9e <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+c0107e9e:	55                   	push   %ebp
+c0107e9f:	89 e5                	mov    %esp,%ebp
+c0107ea1:	83 ec 04             	sub    $0x4,%esp
+c0107ea4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107ea7:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c0107eaa:	eb 0f                	jmp    c0107ebb <strfind+0x1d>
+        if (*s == c) {
+c0107eac:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107eaf:	0f b6 00             	movzbl (%eax),%eax
+c0107eb2:	3a 45 fc             	cmp    -0x4(%ebp),%al
+c0107eb5:	74 10                	je     c0107ec7 <strfind+0x29>
+            break;
+        }
+        s ++;
+c0107eb7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+c0107ebb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107ebe:	0f b6 00             	movzbl (%eax),%eax
+c0107ec1:	84 c0                	test   %al,%al
+c0107ec3:	75 e7                	jne    c0107eac <strfind+0xe>
+c0107ec5:	eb 01                	jmp    c0107ec8 <strfind+0x2a>
+        if (*s == c) {
+            break;
+c0107ec7:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+c0107ec8:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c0107ecb:	c9                   	leave  
+c0107ecc:	c3                   	ret    
+
+c0107ecd <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+c0107ecd:	55                   	push   %ebp
+c0107ece:	89 e5                	mov    %esp,%ebp
+c0107ed0:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+c0107ed3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+c0107eda:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c0107ee1:	eb 04                	jmp    c0107ee7 <strtol+0x1a>
+        s ++;
+c0107ee3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c0107ee7:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107eea:	0f b6 00             	movzbl (%eax),%eax
+c0107eed:	3c 20                	cmp    $0x20,%al
+c0107eef:	74 f2                	je     c0107ee3 <strtol+0x16>
+c0107ef1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107ef4:	0f b6 00             	movzbl (%eax),%eax
+c0107ef7:	3c 09                	cmp    $0x9,%al
+c0107ef9:	74 e8                	je     c0107ee3 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+c0107efb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107efe:	0f b6 00             	movzbl (%eax),%eax
+c0107f01:	3c 2b                	cmp    $0x2b,%al
+c0107f03:	75 06                	jne    c0107f0b <strtol+0x3e>
+        s ++;
+c0107f05:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c0107f09:	eb 15                	jmp    c0107f20 <strtol+0x53>
+    }
+    else if (*s == '-') {
+c0107f0b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107f0e:	0f b6 00             	movzbl (%eax),%eax
+c0107f11:	3c 2d                	cmp    $0x2d,%al
+c0107f13:	75 0b                	jne    c0107f20 <strtol+0x53>
+        s ++, neg = 1;
+c0107f15:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c0107f19:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+c0107f20:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0107f24:	74 06                	je     c0107f2c <strtol+0x5f>
+c0107f26:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+c0107f2a:	75 24                	jne    c0107f50 <strtol+0x83>
+c0107f2c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107f2f:	0f b6 00             	movzbl (%eax),%eax
+c0107f32:	3c 30                	cmp    $0x30,%al
+c0107f34:	75 1a                	jne    c0107f50 <strtol+0x83>
+c0107f36:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107f39:	83 c0 01             	add    $0x1,%eax
+c0107f3c:	0f b6 00             	movzbl (%eax),%eax
+c0107f3f:	3c 78                	cmp    $0x78,%al
+c0107f41:	75 0d                	jne    c0107f50 <strtol+0x83>
+        s += 2, base = 16;
+c0107f43:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+c0107f47:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+c0107f4e:	eb 2a                	jmp    c0107f7a <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+c0107f50:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0107f54:	75 17                	jne    c0107f6d <strtol+0xa0>
+c0107f56:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107f59:	0f b6 00             	movzbl (%eax),%eax
+c0107f5c:	3c 30                	cmp    $0x30,%al
+c0107f5e:	75 0d                	jne    c0107f6d <strtol+0xa0>
+        s ++, base = 8;
+c0107f60:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c0107f64:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+c0107f6b:	eb 0d                	jmp    c0107f7a <strtol+0xad>
+    }
+    else if (base == 0) {
+c0107f6d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0107f71:	75 07                	jne    c0107f7a <strtol+0xad>
+        base = 10;
+c0107f73:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+c0107f7a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107f7d:	0f b6 00             	movzbl (%eax),%eax
+c0107f80:	3c 2f                	cmp    $0x2f,%al
+c0107f82:	7e 1b                	jle    c0107f9f <strtol+0xd2>
+c0107f84:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107f87:	0f b6 00             	movzbl (%eax),%eax
+c0107f8a:	3c 39                	cmp    $0x39,%al
+c0107f8c:	7f 11                	jg     c0107f9f <strtol+0xd2>
+            dig = *s - '0';
+c0107f8e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107f91:	0f b6 00             	movzbl (%eax),%eax
+c0107f94:	0f be c0             	movsbl %al,%eax
+c0107f97:	83 e8 30             	sub    $0x30,%eax
+c0107f9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107f9d:	eb 48                	jmp    c0107fe7 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+c0107f9f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107fa2:	0f b6 00             	movzbl (%eax),%eax
+c0107fa5:	3c 60                	cmp    $0x60,%al
+c0107fa7:	7e 1b                	jle    c0107fc4 <strtol+0xf7>
+c0107fa9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107fac:	0f b6 00             	movzbl (%eax),%eax
+c0107faf:	3c 7a                	cmp    $0x7a,%al
+c0107fb1:	7f 11                	jg     c0107fc4 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+c0107fb3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107fb6:	0f b6 00             	movzbl (%eax),%eax
+c0107fb9:	0f be c0             	movsbl %al,%eax
+c0107fbc:	83 e8 57             	sub    $0x57,%eax
+c0107fbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107fc2:	eb 23                	jmp    c0107fe7 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+c0107fc4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107fc7:	0f b6 00             	movzbl (%eax),%eax
+c0107fca:	3c 40                	cmp    $0x40,%al
+c0107fcc:	7e 3c                	jle    c010800a <strtol+0x13d>
+c0107fce:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107fd1:	0f b6 00             	movzbl (%eax),%eax
+c0107fd4:	3c 5a                	cmp    $0x5a,%al
+c0107fd6:	7f 32                	jg     c010800a <strtol+0x13d>
+            dig = *s - 'A' + 10;
+c0107fd8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107fdb:	0f b6 00             	movzbl (%eax),%eax
+c0107fde:	0f be c0             	movsbl %al,%eax
+c0107fe1:	83 e8 37             	sub    $0x37,%eax
+c0107fe4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+c0107fe7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107fea:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0107fed:	7d 1a                	jge    c0108009 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+c0107fef:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c0107ff3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0107ff6:	0f af 45 10          	imul   0x10(%ebp),%eax
+c0107ffa:	89 c2                	mov    %eax,%edx
+c0107ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107fff:	01 d0                	add    %edx,%eax
+c0108001:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+c0108004:	e9 71 ff ff ff       	jmp    c0107f7a <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+c0108009:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+c010800a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010800e:	74 08                	je     c0108018 <strtol+0x14b>
+        *endptr = (char *) s;
+c0108010:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108013:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108016:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+c0108018:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c010801c:	74 07                	je     c0108025 <strtol+0x158>
+c010801e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0108021:	f7 d8                	neg    %eax
+c0108023:	eb 03                	jmp    c0108028 <strtol+0x15b>
+c0108025:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+c0108028:	c9                   	leave  
+c0108029:	c3                   	ret    
+
+c010802a <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+c010802a:	55                   	push   %ebp
+c010802b:	89 e5                	mov    %esp,%ebp
+c010802d:	57                   	push   %edi
+c010802e:	83 ec 24             	sub    $0x24,%esp
+c0108031:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108034:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+c0108037:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+c010803b:	8b 55 08             	mov    0x8(%ebp),%edx
+c010803e:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c0108041:	88 45 f7             	mov    %al,-0x9(%ebp)
+c0108044:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108047:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+c010804a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c010804d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+c0108051:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c0108054:	89 d7                	mov    %edx,%edi
+c0108056:	f3 aa                	rep stos %al,%es:(%edi)
+c0108058:	89 fa                	mov    %edi,%edx
+c010805a:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010805d:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+c0108060:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0108063:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+c0108064:	83 c4 24             	add    $0x24,%esp
+c0108067:	5f                   	pop    %edi
+c0108068:	5d                   	pop    %ebp
+c0108069:	c3                   	ret    
+
+c010806a <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+c010806a:	55                   	push   %ebp
+c010806b:	89 e5                	mov    %esp,%ebp
+c010806d:	57                   	push   %edi
+c010806e:	56                   	push   %esi
+c010806f:	53                   	push   %ebx
+c0108070:	83 ec 30             	sub    $0x30,%esp
+c0108073:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108076:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108079:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010807c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010807f:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108082:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+c0108085:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108088:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010808b:	73 42                	jae    c01080cf <memmove+0x65>
+c010808d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108090:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0108093:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108096:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0108099:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010809c:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010809f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01080a2:	c1 e8 02             	shr    $0x2,%eax
+c01080a5:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+c01080a7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01080aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01080ad:	89 d7                	mov    %edx,%edi
+c01080af:	89 c6                	mov    %eax,%esi
+c01080b1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c01080b3:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c01080b6:	83 e1 03             	and    $0x3,%ecx
+c01080b9:	74 02                	je     c01080bd <memmove+0x53>
+c01080bb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c01080bd:	89 f0                	mov    %esi,%eax
+c01080bf:	89 fa                	mov    %edi,%edx
+c01080c1:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+c01080c4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c01080c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+c01080ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+c01080cd:	eb 36                	jmp    c0108105 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+c01080cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01080d2:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01080d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01080d8:	01 c2                	add    %eax,%edx
+c01080da:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01080dd:	8d 48 ff             	lea    -0x1(%eax),%ecx
+c01080e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01080e3:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+c01080e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01080e9:	89 c1                	mov    %eax,%ecx
+c01080eb:	89 d8                	mov    %ebx,%eax
+c01080ed:	89 d6                	mov    %edx,%esi
+c01080ef:	89 c7                	mov    %eax,%edi
+c01080f1:	fd                   	std    
+c01080f2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c01080f4:	fc                   	cld    
+c01080f5:	89 f8                	mov    %edi,%eax
+c01080f7:	89 f2                	mov    %esi,%edx
+c01080f9:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+c01080fc:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c01080ff:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+c0108102:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+c0108105:	83 c4 30             	add    $0x30,%esp
+c0108108:	5b                   	pop    %ebx
+c0108109:	5e                   	pop    %esi
+c010810a:	5f                   	pop    %edi
+c010810b:	5d                   	pop    %ebp
+c010810c:	c3                   	ret    
+
+c010810d <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+c010810d:	55                   	push   %ebp
+c010810e:	89 e5                	mov    %esp,%ebp
+c0108110:	57                   	push   %edi
+c0108111:	56                   	push   %esi
+c0108112:	83 ec 20             	sub    $0x20,%esp
+c0108115:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108118:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010811b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010811e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108121:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108124:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c0108127:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010812a:	c1 e8 02             	shr    $0x2,%eax
+c010812d:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+c010812f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108132:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108135:	89 d7                	mov    %edx,%edi
+c0108137:	89 c6                	mov    %eax,%esi
+c0108139:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010813b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+c010813e:	83 e1 03             	and    $0x3,%ecx
+c0108141:	74 02                	je     c0108145 <memcpy+0x38>
+c0108143:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c0108145:	89 f0                	mov    %esi,%eax
+c0108147:	89 fa                	mov    %edi,%edx
+c0108149:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010814c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010814f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+c0108152:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+c0108155:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+c0108156:	83 c4 20             	add    $0x20,%esp
+c0108159:	5e                   	pop    %esi
+c010815a:	5f                   	pop    %edi
+c010815b:	5d                   	pop    %ebp
+c010815c:	c3                   	ret    
+
+c010815d <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+c010815d:	55                   	push   %ebp
+c010815e:	89 e5                	mov    %esp,%ebp
+c0108160:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+c0108163:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108166:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+c0108169:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010816c:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+c010816f:	eb 30                	jmp    c01081a1 <memcmp+0x44>
+        if (*s1 != *s2) {
+c0108171:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108174:	0f b6 10             	movzbl (%eax),%edx
+c0108177:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010817a:	0f b6 00             	movzbl (%eax),%eax
+c010817d:	38 c2                	cmp    %al,%dl
+c010817f:	74 18                	je     c0108199 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+c0108181:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108184:	0f b6 00             	movzbl (%eax),%eax
+c0108187:	0f b6 d0             	movzbl %al,%edx
+c010818a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010818d:	0f b6 00             	movzbl (%eax),%eax
+c0108190:	0f b6 c0             	movzbl %al,%eax
+c0108193:	29 c2                	sub    %eax,%edx
+c0108195:	89 d0                	mov    %edx,%eax
+c0108197:	eb 1a                	jmp    c01081b3 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+c0108199:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c010819d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+c01081a1:	8b 45 10             	mov    0x10(%ebp),%eax
+c01081a4:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01081a7:	89 55 10             	mov    %edx,0x10(%ebp)
+c01081aa:	85 c0                	test   %eax,%eax
+c01081ac:	75 c3                	jne    c0108171 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+c01081ae:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01081b3:	c9                   	leave  
+c01081b4:	c3                   	ret    
+
+c01081b5 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+c01081b5:	55                   	push   %ebp
+c01081b6:	89 e5                	mov    %esp,%ebp
+c01081b8:	83 ec 38             	sub    $0x38,%esp
+c01081bb:	8b 45 10             	mov    0x10(%ebp),%eax
+c01081be:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c01081c1:	8b 45 14             	mov    0x14(%ebp),%eax
+c01081c4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+c01081c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01081ca:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01081cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c01081d0:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+c01081d3:	8b 45 18             	mov    0x18(%ebp),%eax
+c01081d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c01081d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01081dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01081df:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c01081e2:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c01081e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01081e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01081eb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01081ef:	74 1c                	je     c010820d <printnum+0x58>
+c01081f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01081f4:	ba 00 00 00 00       	mov    $0x0,%edx
+c01081f9:	f7 75 e4             	divl   -0x1c(%ebp)
+c01081fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c01081ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108202:	ba 00 00 00 00       	mov    $0x0,%edx
+c0108207:	f7 75 e4             	divl   -0x1c(%ebp)
+c010820a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010820d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108210:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108213:	f7 75 e4             	divl   -0x1c(%ebp)
+c0108216:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0108219:	89 55 dc             	mov    %edx,-0x24(%ebp)
+c010821c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010821f:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0108222:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0108225:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c0108228:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010822b:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+c010822e:	8b 45 18             	mov    0x18(%ebp),%eax
+c0108231:	ba 00 00 00 00       	mov    $0x0,%edx
+c0108236:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c0108239:	77 41                	ja     c010827c <printnum+0xc7>
+c010823b:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010823e:	72 05                	jb     c0108245 <printnum+0x90>
+c0108240:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+c0108243:	77 37                	ja     c010827c <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+c0108245:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c0108248:	83 e8 01             	sub    $0x1,%eax
+c010824b:	83 ec 04             	sub    $0x4,%esp
+c010824e:	ff 75 20             	pushl  0x20(%ebp)
+c0108251:	50                   	push   %eax
+c0108252:	ff 75 18             	pushl  0x18(%ebp)
+c0108255:	ff 75 ec             	pushl  -0x14(%ebp)
+c0108258:	ff 75 e8             	pushl  -0x18(%ebp)
+c010825b:	ff 75 0c             	pushl  0xc(%ebp)
+c010825e:	ff 75 08             	pushl  0x8(%ebp)
+c0108261:	e8 4f ff ff ff       	call   c01081b5 <printnum>
+c0108266:	83 c4 20             	add    $0x20,%esp
+c0108269:	eb 1b                	jmp    c0108286 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+c010826b:	83 ec 08             	sub    $0x8,%esp
+c010826e:	ff 75 0c             	pushl  0xc(%ebp)
+c0108271:	ff 75 20             	pushl  0x20(%ebp)
+c0108274:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108277:	ff d0                	call   *%eax
+c0108279:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+c010827c:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+c0108280:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c0108284:	7f e5                	jg     c010826b <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+c0108286:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0108289:	05 cc a6 10 c0       	add    $0xc010a6cc,%eax
+c010828e:	0f b6 00             	movzbl (%eax),%eax
+c0108291:	0f be c0             	movsbl %al,%eax
+c0108294:	83 ec 08             	sub    $0x8,%esp
+c0108297:	ff 75 0c             	pushl  0xc(%ebp)
+c010829a:	50                   	push   %eax
+c010829b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010829e:	ff d0                	call   *%eax
+c01082a0:	83 c4 10             	add    $0x10,%esp
+}
+c01082a3:	90                   	nop
+c01082a4:	c9                   	leave  
+c01082a5:	c3                   	ret    
+
+c01082a6 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+c01082a6:	55                   	push   %ebp
+c01082a7:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c01082a9:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c01082ad:	7e 14                	jle    c01082c3 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+c01082af:	8b 45 08             	mov    0x8(%ebp),%eax
+c01082b2:	8b 00                	mov    (%eax),%eax
+c01082b4:	8d 48 08             	lea    0x8(%eax),%ecx
+c01082b7:	8b 55 08             	mov    0x8(%ebp),%edx
+c01082ba:	89 0a                	mov    %ecx,(%edx)
+c01082bc:	8b 50 04             	mov    0x4(%eax),%edx
+c01082bf:	8b 00                	mov    (%eax),%eax
+c01082c1:	eb 30                	jmp    c01082f3 <getuint+0x4d>
+    }
+    else if (lflag) {
+c01082c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c01082c7:	74 16                	je     c01082df <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+c01082c9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01082cc:	8b 00                	mov    (%eax),%eax
+c01082ce:	8d 48 04             	lea    0x4(%eax),%ecx
+c01082d1:	8b 55 08             	mov    0x8(%ebp),%edx
+c01082d4:	89 0a                	mov    %ecx,(%edx)
+c01082d6:	8b 00                	mov    (%eax),%eax
+c01082d8:	ba 00 00 00 00       	mov    $0x0,%edx
+c01082dd:	eb 14                	jmp    c01082f3 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+c01082df:	8b 45 08             	mov    0x8(%ebp),%eax
+c01082e2:	8b 00                	mov    (%eax),%eax
+c01082e4:	8d 48 04             	lea    0x4(%eax),%ecx
+c01082e7:	8b 55 08             	mov    0x8(%ebp),%edx
+c01082ea:	89 0a                	mov    %ecx,(%edx)
+c01082ec:	8b 00                	mov    (%eax),%eax
+c01082ee:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+c01082f3:	5d                   	pop    %ebp
+c01082f4:	c3                   	ret    
+
+c01082f5 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+c01082f5:	55                   	push   %ebp
+c01082f6:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c01082f8:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c01082fc:	7e 14                	jle    c0108312 <getint+0x1d>
+        return va_arg(*ap, long long);
+c01082fe:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108301:	8b 00                	mov    (%eax),%eax
+c0108303:	8d 48 08             	lea    0x8(%eax),%ecx
+c0108306:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108309:	89 0a                	mov    %ecx,(%edx)
+c010830b:	8b 50 04             	mov    0x4(%eax),%edx
+c010830e:	8b 00                	mov    (%eax),%eax
+c0108310:	eb 28                	jmp    c010833a <getint+0x45>
+    }
+    else if (lflag) {
+c0108312:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0108316:	74 12                	je     c010832a <getint+0x35>
+        return va_arg(*ap, long);
+c0108318:	8b 45 08             	mov    0x8(%ebp),%eax
+c010831b:	8b 00                	mov    (%eax),%eax
+c010831d:	8d 48 04             	lea    0x4(%eax),%ecx
+c0108320:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108323:	89 0a                	mov    %ecx,(%edx)
+c0108325:	8b 00                	mov    (%eax),%eax
+c0108327:	99                   	cltd   
+c0108328:	eb 10                	jmp    c010833a <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+c010832a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010832d:	8b 00                	mov    (%eax),%eax
+c010832f:	8d 48 04             	lea    0x4(%eax),%ecx
+c0108332:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108335:	89 0a                	mov    %ecx,(%edx)
+c0108337:	8b 00                	mov    (%eax),%eax
+c0108339:	99                   	cltd   
+    }
+}
+c010833a:	5d                   	pop    %ebp
+c010833b:	c3                   	ret    
+
+c010833c <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+c010833c:	55                   	push   %ebp
+c010833d:	89 e5                	mov    %esp,%ebp
+c010833f:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+c0108342:	8d 45 14             	lea    0x14(%ebp),%eax
+c0108345:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+c0108348:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010834b:	50                   	push   %eax
+c010834c:	ff 75 10             	pushl  0x10(%ebp)
+c010834f:	ff 75 0c             	pushl  0xc(%ebp)
+c0108352:	ff 75 08             	pushl  0x8(%ebp)
+c0108355:	e8 06 00 00 00       	call   c0108360 <vprintfmt>
+c010835a:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+c010835d:	90                   	nop
+c010835e:	c9                   	leave  
+c010835f:	c3                   	ret    
+
+c0108360 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+c0108360:	55                   	push   %ebp
+c0108361:	89 e5                	mov    %esp,%ebp
+c0108363:	56                   	push   %esi
+c0108364:	53                   	push   %ebx
+c0108365:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c0108368:	eb 17                	jmp    c0108381 <vprintfmt+0x21>
+            if (ch == '\0') {
+c010836a:	85 db                	test   %ebx,%ebx
+c010836c:	0f 84 8e 03 00 00    	je     c0108700 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+c0108372:	83 ec 08             	sub    $0x8,%esp
+c0108375:	ff 75 0c             	pushl  0xc(%ebp)
+c0108378:	53                   	push   %ebx
+c0108379:	8b 45 08             	mov    0x8(%ebp),%eax
+c010837c:	ff d0                	call   *%eax
+c010837e:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c0108381:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108384:	8d 50 01             	lea    0x1(%eax),%edx
+c0108387:	89 55 10             	mov    %edx,0x10(%ebp)
+c010838a:	0f b6 00             	movzbl (%eax),%eax
+c010838d:	0f b6 d8             	movzbl %al,%ebx
+c0108390:	83 fb 25             	cmp    $0x25,%ebx
+c0108393:	75 d5                	jne    c010836a <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+c0108395:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+c0108399:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+c01083a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01083a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+c01083a6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c01083ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01083b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+c01083b3:	8b 45 10             	mov    0x10(%ebp),%eax
+c01083b6:	8d 50 01             	lea    0x1(%eax),%edx
+c01083b9:	89 55 10             	mov    %edx,0x10(%ebp)
+c01083bc:	0f b6 00             	movzbl (%eax),%eax
+c01083bf:	0f b6 d8             	movzbl %al,%ebx
+c01083c2:	8d 43 dd             	lea    -0x23(%ebx),%eax
+c01083c5:	83 f8 55             	cmp    $0x55,%eax
+c01083c8:	0f 87 05 03 00 00    	ja     c01086d3 <vprintfmt+0x373>
+c01083ce:	8b 04 85 f0 a6 10 c0 	mov    -0x3fef5910(,%eax,4),%eax
+c01083d5:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+c01083d7:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+c01083db:	eb d6                	jmp    c01083b3 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+c01083dd:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+c01083e1:	eb d0                	jmp    c01083b3 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c01083e3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+c01083ea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01083ed:	89 d0                	mov    %edx,%eax
+c01083ef:	c1 e0 02             	shl    $0x2,%eax
+c01083f2:	01 d0                	add    %edx,%eax
+c01083f4:	01 c0                	add    %eax,%eax
+c01083f6:	01 d8                	add    %ebx,%eax
+c01083f8:	83 e8 30             	sub    $0x30,%eax
+c01083fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+c01083fe:	8b 45 10             	mov    0x10(%ebp),%eax
+c0108401:	0f b6 00             	movzbl (%eax),%eax
+c0108404:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+c0108407:	83 fb 2f             	cmp    $0x2f,%ebx
+c010840a:	7e 39                	jle    c0108445 <vprintfmt+0xe5>
+c010840c:	83 fb 39             	cmp    $0x39,%ebx
+c010840f:	7f 34                	jg     c0108445 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c0108411:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+c0108415:	eb d3                	jmp    c01083ea <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+c0108417:	8b 45 14             	mov    0x14(%ebp),%eax
+c010841a:	8d 50 04             	lea    0x4(%eax),%edx
+c010841d:	89 55 14             	mov    %edx,0x14(%ebp)
+c0108420:	8b 00                	mov    (%eax),%eax
+c0108422:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+c0108425:	eb 1f                	jmp    c0108446 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+c0108427:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010842b:	79 86                	jns    c01083b3 <vprintfmt+0x53>
+                width = 0;
+c010842d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+c0108434:	e9 7a ff ff ff       	jmp    c01083b3 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+c0108439:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+c0108440:	e9 6e ff ff ff       	jmp    c01083b3 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+c0108445:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+c0108446:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010844a:	0f 89 63 ff ff ff    	jns    c01083b3 <vprintfmt+0x53>
+                width = precision, precision = -1;
+c0108450:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108453:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0108456:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+c010845d:	e9 51 ff ff ff       	jmp    c01083b3 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+c0108462:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+c0108466:	e9 48 ff ff ff       	jmp    c01083b3 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+c010846b:	8b 45 14             	mov    0x14(%ebp),%eax
+c010846e:	8d 50 04             	lea    0x4(%eax),%edx
+c0108471:	89 55 14             	mov    %edx,0x14(%ebp)
+c0108474:	8b 00                	mov    (%eax),%eax
+c0108476:	83 ec 08             	sub    $0x8,%esp
+c0108479:	ff 75 0c             	pushl  0xc(%ebp)
+c010847c:	50                   	push   %eax
+c010847d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108480:	ff d0                	call   *%eax
+c0108482:	83 c4 10             	add    $0x10,%esp
+            break;
+c0108485:	e9 71 02 00 00       	jmp    c01086fb <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+c010848a:	8b 45 14             	mov    0x14(%ebp),%eax
+c010848d:	8d 50 04             	lea    0x4(%eax),%edx
+c0108490:	89 55 14             	mov    %edx,0x14(%ebp)
+c0108493:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+c0108495:	85 db                	test   %ebx,%ebx
+c0108497:	79 02                	jns    c010849b <vprintfmt+0x13b>
+                err = -err;
+c0108499:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+c010849b:	83 fb 06             	cmp    $0x6,%ebx
+c010849e:	7f 0b                	jg     c01084ab <vprintfmt+0x14b>
+c01084a0:	8b 34 9d b0 a6 10 c0 	mov    -0x3fef5950(,%ebx,4),%esi
+c01084a7:	85 f6                	test   %esi,%esi
+c01084a9:	75 19                	jne    c01084c4 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+c01084ab:	53                   	push   %ebx
+c01084ac:	68 dd a6 10 c0       	push   $0xc010a6dd
+c01084b1:	ff 75 0c             	pushl  0xc(%ebp)
+c01084b4:	ff 75 08             	pushl  0x8(%ebp)
+c01084b7:	e8 80 fe ff ff       	call   c010833c <printfmt>
+c01084bc:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+c01084bf:	e9 37 02 00 00       	jmp    c01086fb <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+c01084c4:	56                   	push   %esi
+c01084c5:	68 e6 a6 10 c0       	push   $0xc010a6e6
+c01084ca:	ff 75 0c             	pushl  0xc(%ebp)
+c01084cd:	ff 75 08             	pushl  0x8(%ebp)
+c01084d0:	e8 67 fe ff ff       	call   c010833c <printfmt>
+c01084d5:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+c01084d8:	e9 1e 02 00 00       	jmp    c01086fb <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+c01084dd:	8b 45 14             	mov    0x14(%ebp),%eax
+c01084e0:	8d 50 04             	lea    0x4(%eax),%edx
+c01084e3:	89 55 14             	mov    %edx,0x14(%ebp)
+c01084e6:	8b 30                	mov    (%eax),%esi
+c01084e8:	85 f6                	test   %esi,%esi
+c01084ea:	75 05                	jne    c01084f1 <vprintfmt+0x191>
+                p = "(null)";
+c01084ec:	be e9 a6 10 c0       	mov    $0xc010a6e9,%esi
+            }
+            if (width > 0 && padc != '-') {
+c01084f1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01084f5:	7e 76                	jle    c010856d <vprintfmt+0x20d>
+c01084f7:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+c01084fb:	74 70                	je     c010856d <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c01084fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108500:	83 ec 08             	sub    $0x8,%esp
+c0108503:	50                   	push   %eax
+c0108504:	56                   	push   %esi
+c0108505:	e8 17 f8 ff ff       	call   c0107d21 <strnlen>
+c010850a:	83 c4 10             	add    $0x10,%esp
+c010850d:	89 c2                	mov    %eax,%edx
+c010850f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108512:	29 d0                	sub    %edx,%eax
+c0108514:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0108517:	eb 17                	jmp    c0108530 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+c0108519:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+c010851d:	83 ec 08             	sub    $0x8,%esp
+c0108520:	ff 75 0c             	pushl  0xc(%ebp)
+c0108523:	50                   	push   %eax
+c0108524:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108527:	ff d0                	call   *%eax
+c0108529:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010852c:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c0108530:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0108534:	7f e3                	jg     c0108519 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c0108536:	eb 35                	jmp    c010856d <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+c0108538:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c010853c:	74 1c                	je     c010855a <vprintfmt+0x1fa>
+c010853e:	83 fb 1f             	cmp    $0x1f,%ebx
+c0108541:	7e 05                	jle    c0108548 <vprintfmt+0x1e8>
+c0108543:	83 fb 7e             	cmp    $0x7e,%ebx
+c0108546:	7e 12                	jle    c010855a <vprintfmt+0x1fa>
+                    putch('?', putdat);
+c0108548:	83 ec 08             	sub    $0x8,%esp
+c010854b:	ff 75 0c             	pushl  0xc(%ebp)
+c010854e:	6a 3f                	push   $0x3f
+c0108550:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108553:	ff d0                	call   *%eax
+c0108555:	83 c4 10             	add    $0x10,%esp
+c0108558:	eb 0f                	jmp    c0108569 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+c010855a:	83 ec 08             	sub    $0x8,%esp
+c010855d:	ff 75 0c             	pushl  0xc(%ebp)
+c0108560:	53                   	push   %ebx
+c0108561:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108564:	ff d0                	call   *%eax
+c0108566:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c0108569:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010856d:	89 f0                	mov    %esi,%eax
+c010856f:	8d 70 01             	lea    0x1(%eax),%esi
+c0108572:	0f b6 00             	movzbl (%eax),%eax
+c0108575:	0f be d8             	movsbl %al,%ebx
+c0108578:	85 db                	test   %ebx,%ebx
+c010857a:	74 26                	je     c01085a2 <vprintfmt+0x242>
+c010857c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0108580:	78 b6                	js     c0108538 <vprintfmt+0x1d8>
+c0108582:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+c0108586:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010858a:	79 ac                	jns    c0108538 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+c010858c:	eb 14                	jmp    c01085a2 <vprintfmt+0x242>
+                putch(' ', putdat);
+c010858e:	83 ec 08             	sub    $0x8,%esp
+c0108591:	ff 75 0c             	pushl  0xc(%ebp)
+c0108594:	6a 20                	push   $0x20
+c0108596:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108599:	ff d0                	call   *%eax
+c010859b:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+c010859e:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c01085a2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01085a6:	7f e6                	jg     c010858e <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+c01085a8:	e9 4e 01 00 00       	jmp    c01086fb <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+c01085ad:	83 ec 08             	sub    $0x8,%esp
+c01085b0:	ff 75 e0             	pushl  -0x20(%ebp)
+c01085b3:	8d 45 14             	lea    0x14(%ebp),%eax
+c01085b6:	50                   	push   %eax
+c01085b7:	e8 39 fd ff ff       	call   c01082f5 <getint>
+c01085bc:	83 c4 10             	add    $0x10,%esp
+c01085bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01085c2:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+c01085c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01085c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01085cb:	85 d2                	test   %edx,%edx
+c01085cd:	79 23                	jns    c01085f2 <vprintfmt+0x292>
+                putch('-', putdat);
+c01085cf:	83 ec 08             	sub    $0x8,%esp
+c01085d2:	ff 75 0c             	pushl  0xc(%ebp)
+c01085d5:	6a 2d                	push   $0x2d
+c01085d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01085da:	ff d0                	call   *%eax
+c01085dc:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+c01085df:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01085e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01085e5:	f7 d8                	neg    %eax
+c01085e7:	83 d2 00             	adc    $0x0,%edx
+c01085ea:	f7 da                	neg    %edx
+c01085ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01085ef:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+c01085f2:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c01085f9:	e9 9f 00 00 00       	jmp    c010869d <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+c01085fe:	83 ec 08             	sub    $0x8,%esp
+c0108601:	ff 75 e0             	pushl  -0x20(%ebp)
+c0108604:	8d 45 14             	lea    0x14(%ebp),%eax
+c0108607:	50                   	push   %eax
+c0108608:	e8 99 fc ff ff       	call   c01082a6 <getuint>
+c010860d:	83 c4 10             	add    $0x10,%esp
+c0108610:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108613:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+c0108616:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010861d:	eb 7e                	jmp    c010869d <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+c010861f:	83 ec 08             	sub    $0x8,%esp
+c0108622:	ff 75 e0             	pushl  -0x20(%ebp)
+c0108625:	8d 45 14             	lea    0x14(%ebp),%eax
+c0108628:	50                   	push   %eax
+c0108629:	e8 78 fc ff ff       	call   c01082a6 <getuint>
+c010862e:	83 c4 10             	add    $0x10,%esp
+c0108631:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108634:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+c0108637:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+c010863e:	eb 5d                	jmp    c010869d <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+c0108640:	83 ec 08             	sub    $0x8,%esp
+c0108643:	ff 75 0c             	pushl  0xc(%ebp)
+c0108646:	6a 30                	push   $0x30
+c0108648:	8b 45 08             	mov    0x8(%ebp),%eax
+c010864b:	ff d0                	call   *%eax
+c010864d:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+c0108650:	83 ec 08             	sub    $0x8,%esp
+c0108653:	ff 75 0c             	pushl  0xc(%ebp)
+c0108656:	6a 78                	push   $0x78
+c0108658:	8b 45 08             	mov    0x8(%ebp),%eax
+c010865b:	ff d0                	call   *%eax
+c010865d:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+c0108660:	8b 45 14             	mov    0x14(%ebp),%eax
+c0108663:	8d 50 04             	lea    0x4(%eax),%edx
+c0108666:	89 55 14             	mov    %edx,0x14(%ebp)
+c0108669:	8b 00                	mov    (%eax),%eax
+c010866b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010866e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+c0108675:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+c010867c:	eb 1f                	jmp    c010869d <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+c010867e:	83 ec 08             	sub    $0x8,%esp
+c0108681:	ff 75 e0             	pushl  -0x20(%ebp)
+c0108684:	8d 45 14             	lea    0x14(%ebp),%eax
+c0108687:	50                   	push   %eax
+c0108688:	e8 19 fc ff ff       	call   c01082a6 <getuint>
+c010868d:	83 c4 10             	add    $0x10,%esp
+c0108690:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108693:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+c0108696:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+c010869d:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+c01086a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01086a4:	83 ec 04             	sub    $0x4,%esp
+c01086a7:	52                   	push   %edx
+c01086a8:	ff 75 e8             	pushl  -0x18(%ebp)
+c01086ab:	50                   	push   %eax
+c01086ac:	ff 75 f4             	pushl  -0xc(%ebp)
+c01086af:	ff 75 f0             	pushl  -0x10(%ebp)
+c01086b2:	ff 75 0c             	pushl  0xc(%ebp)
+c01086b5:	ff 75 08             	pushl  0x8(%ebp)
+c01086b8:	e8 f8 fa ff ff       	call   c01081b5 <printnum>
+c01086bd:	83 c4 20             	add    $0x20,%esp
+            break;
+c01086c0:	eb 39                	jmp    c01086fb <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+c01086c2:	83 ec 08             	sub    $0x8,%esp
+c01086c5:	ff 75 0c             	pushl  0xc(%ebp)
+c01086c8:	53                   	push   %ebx
+c01086c9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01086cc:	ff d0                	call   *%eax
+c01086ce:	83 c4 10             	add    $0x10,%esp
+            break;
+c01086d1:	eb 28                	jmp    c01086fb <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+c01086d3:	83 ec 08             	sub    $0x8,%esp
+c01086d6:	ff 75 0c             	pushl  0xc(%ebp)
+c01086d9:	6a 25                	push   $0x25
+c01086db:	8b 45 08             	mov    0x8(%ebp),%eax
+c01086de:	ff d0                	call   *%eax
+c01086e0:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+c01086e3:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c01086e7:	eb 04                	jmp    c01086ed <vprintfmt+0x38d>
+c01086e9:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c01086ed:	8b 45 10             	mov    0x10(%ebp),%eax
+c01086f0:	83 e8 01             	sub    $0x1,%eax
+c01086f3:	0f b6 00             	movzbl (%eax),%eax
+c01086f6:	3c 25                	cmp    $0x25,%al
+c01086f8:	75 ef                	jne    c01086e9 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+c01086fa:	90                   	nop
+        }
+    }
+c01086fb:	e9 68 fc ff ff       	jmp    c0108368 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+c0108700:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+c0108701:	8d 65 f8             	lea    -0x8(%ebp),%esp
+c0108704:	5b                   	pop    %ebx
+c0108705:	5e                   	pop    %esi
+c0108706:	5d                   	pop    %ebp
+c0108707:	c3                   	ret    
+
+c0108708 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+c0108708:	55                   	push   %ebp
+c0108709:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+c010870b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010870e:	8b 40 08             	mov    0x8(%eax),%eax
+c0108711:	8d 50 01             	lea    0x1(%eax),%edx
+c0108714:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108717:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+c010871a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010871d:	8b 10                	mov    (%eax),%edx
+c010871f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108722:	8b 40 04             	mov    0x4(%eax),%eax
+c0108725:	39 c2                	cmp    %eax,%edx
+c0108727:	73 12                	jae    c010873b <sprintputch+0x33>
+        *b->buf ++ = ch;
+c0108729:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010872c:	8b 00                	mov    (%eax),%eax
+c010872e:	8d 48 01             	lea    0x1(%eax),%ecx
+c0108731:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0108734:	89 0a                	mov    %ecx,(%edx)
+c0108736:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108739:	88 10                	mov    %dl,(%eax)
+    }
+}
+c010873b:	90                   	nop
+c010873c:	5d                   	pop    %ebp
+c010873d:	c3                   	ret    
+
+c010873e <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+c010873e:	55                   	push   %ebp
+c010873f:	89 e5                	mov    %esp,%ebp
+c0108741:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c0108744:	8d 45 14             	lea    0x14(%ebp),%eax
+c0108747:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+c010874a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010874d:	50                   	push   %eax
+c010874e:	ff 75 10             	pushl  0x10(%ebp)
+c0108751:	ff 75 0c             	pushl  0xc(%ebp)
+c0108754:	ff 75 08             	pushl  0x8(%ebp)
+c0108757:	e8 0b 00 00 00       	call   c0108767 <vsnprintf>
+c010875c:	83 c4 10             	add    $0x10,%esp
+c010875f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c0108762:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0108765:	c9                   	leave  
+c0108766:	c3                   	ret    
+
+c0108767 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+c0108767:	55                   	push   %ebp
+c0108768:	89 e5                	mov    %esp,%ebp
+c010876a:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+c010876d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108770:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0108773:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108776:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0108779:	8b 45 08             	mov    0x8(%ebp),%eax
+c010877c:	01 d0                	add    %edx,%eax
+c010877e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108781:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+c0108788:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010878c:	74 0a                	je     c0108798 <vsnprintf+0x31>
+c010878e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0108791:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108794:	39 c2                	cmp    %eax,%edx
+c0108796:	76 07                	jbe    c010879f <vsnprintf+0x38>
+        return -E_INVAL;
+c0108798:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010879d:	eb 20                	jmp    c01087bf <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+c010879f:	ff 75 14             	pushl  0x14(%ebp)
+c01087a2:	ff 75 10             	pushl  0x10(%ebp)
+c01087a5:	8d 45 ec             	lea    -0x14(%ebp),%eax
+c01087a8:	50                   	push   %eax
+c01087a9:	68 08 87 10 c0       	push   $0xc0108708
+c01087ae:	e8 ad fb ff ff       	call   c0108360 <vprintfmt>
+c01087b3:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+c01087b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01087b9:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+c01087bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01087bf:	c9                   	leave  
+c01087c0:	c3                   	ret    
+
+c01087c1 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+c01087c1:	55                   	push   %ebp
+c01087c2:	89 e5                	mov    %esp,%ebp
+c01087c4:	57                   	push   %edi
+c01087c5:	56                   	push   %esi
+c01087c6:	53                   	push   %ebx
+c01087c7:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+c01087ca:	a1 58 0a 12 c0       	mov    0xc0120a58,%eax
+c01087cf:	8b 15 5c 0a 12 c0    	mov    0xc0120a5c,%edx
+c01087d5:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+c01087db:	6b f0 05             	imul   $0x5,%eax,%esi
+c01087de:	01 fe                	add    %edi,%esi
+c01087e0:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+c01087e5:	f7 e7                	mul    %edi
+c01087e7:	01 d6                	add    %edx,%esi
+c01087e9:	89 f2                	mov    %esi,%edx
+c01087eb:	83 c0 0b             	add    $0xb,%eax
+c01087ee:	83 d2 00             	adc    $0x0,%edx
+c01087f1:	89 c7                	mov    %eax,%edi
+c01087f3:	83 e7 ff             	and    $0xffffffff,%edi
+c01087f6:	89 f9                	mov    %edi,%ecx
+c01087f8:	0f b7 da             	movzwl %dx,%ebx
+c01087fb:	89 0d 58 0a 12 c0    	mov    %ecx,0xc0120a58
+c0108801:	89 1d 5c 0a 12 c0    	mov    %ebx,0xc0120a5c
+    unsigned long long result = (next >> 12);
+c0108807:	a1 58 0a 12 c0       	mov    0xc0120a58,%eax
+c010880c:	8b 15 5c 0a 12 c0    	mov    0xc0120a5c,%edx
+c0108812:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c0108816:	c1 ea 0c             	shr    $0xc,%edx
+c0108819:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010881c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+c010881f:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+c0108826:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108829:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010882c:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010882f:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c0108832:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108835:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0108838:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010883c:	74 1c                	je     c010885a <rand+0x99>
+c010883e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108841:	ba 00 00 00 00       	mov    $0x0,%edx
+c0108846:	f7 75 dc             	divl   -0x24(%ebp)
+c0108849:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010884c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010884f:	ba 00 00 00 00       	mov    $0x0,%edx
+c0108854:	f7 75 dc             	divl   -0x24(%ebp)
+c0108857:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010885a:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010885d:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0108860:	f7 75 dc             	divl   -0x24(%ebp)
+c0108863:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c0108866:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c0108869:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010886c:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010886f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0108872:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c0108875:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+c0108878:	83 c4 24             	add    $0x24,%esp
+c010887b:	5b                   	pop    %ebx
+c010887c:	5e                   	pop    %esi
+c010887d:	5f                   	pop    %edi
+c010887e:	5d                   	pop    %ebp
+c010887f:	c3                   	ret    
+
+c0108880 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+c0108880:	55                   	push   %ebp
+c0108881:	89 e5                	mov    %esp,%ebp
+    next = seed;
+c0108883:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108886:	ba 00 00 00 00       	mov    $0x0,%edx
+c010888b:	a3 58 0a 12 c0       	mov    %eax,0xc0120a58
+c0108890:	89 15 5c 0a 12 c0    	mov    %edx,0xc0120a5c
+}
+c0108896:	90                   	nop
+c0108897:	5d                   	pop    %ebp
+c0108898:	c3                   	ret    
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kernel.sym lab3/obj/kernel.sym
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/kernel.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/kernel.sym	2018-03-16 23:03:48.185047525 +0800
@@ -0,0 +1,544 @@
+c0100000 .text
+c01088a0 .rodata
+c010a848 .stab
+c0119bfd .stabstr
+c011e000 .data
+c0120a60 .bss
+00000000 .comment
+00000000 obj/kern/init/entry.o
+c0120018 __gdtdesc
+c0100019 relocated
+c0100028 spin
+c0120000 __gdt
+00000000 init.c
+c010011e lab1_print_cur_status
+c0120a60 round.1833
+c01001db lab1_switch_to_user
+c01001e1 lab1_switch_to_kernel
+c01001e7 lab1_switch_test
+00000000 stdio.c
+c0100229 cputch
+00000000 readline.c
+c0120a80 buf
+00000000 panic.c
+c0120e80 is_panic
+00000000 kdebug.c
+c010049b stab_binsearch
+c0100a39 read_eip
+00000000 kmonitor.c
+c0120020 commands
+c0100afc parse
+c0100bb8 runcmd
+00000000 ide.c
+c0108bb8 channels
+c0120ea0 ide_devices
+c0100d54 ide_wait_ready
+00000000 clock.c
+00000000 console.c
+c0101608 __intr_save
+c0101632 __intr_restore
+c0101646 delay
+c0120f80 crt_buf
+c0120f84 crt_pos
+c0120f86 addr_6845
+c010168f cga_init
+c0120f88 serial_exists
+c0101776 serial_init
+c010185b lpt_putc_sub
+c01018d5 lpt_putc
+c010190c cga_putc
+c0101ae1 serial_putc_sub
+c0101b3b serial_putc
+c0120fa0 cons
+c0101b72 cons_intr
+c0101bbe serial_proc_data
+c0120060 shiftcode
+c0120160 togglecode
+c0120260 normalmap
+c0120360 shiftmap
+c0120460 ctlmap
+c0120560 charcode
+c0101c37 kbd_proc_data
+c01211a8 shift.1612
+c0101dc4 kbd_intr
+c0101ddd kbd_init
+00000000 picirq.c
+c0120570 irq_mask
+c01211ac did_init
+c0101ee4 pic_setmask
+00000000 intr.c
+00000000 trap.c
+c01020b5 print_ticks
+c01211c0 idt
+c0120580 idt_pd
+c010233f trapname
+c0109100 excnames.1716
+c01205a0 IA32flags
+c0102623 print_pgfault
+c0102698 pgfault_handler
+c01219c0 in_swap_tick_event
+c01219c4 clock_count
+c01026f7 trap_dispatch
+00000000 vmm.c
+c0103315 pa2page
+c0103357 pde2page
+c01034dc check_vma_overlap
+c0103718 check_vmm
+c010376b check_vma_struct
+c0103bd1 check_pgfault
+00000000 swap_fifo.c
+c0103fa9 _fifo_init_mm
+c0103fdb _fifo_map_swappable
+c0104065 _fifo_swap_out_victim
+c0104128 _fifo_check_swap
+c0104438 _fifo_init
+c0104442 _fifo_set_unswappable
+c010444c _fifo_tick_event
+00000000 swap.c
+c0104456 pa2page
+c0104498 pte2page
+c01219d4 sm
+c0104988 check_swap
+c01047e7 check_content_set
+c0104970 check_content_access
+00000000 default_pmm.c
+c0104f8b page2ppn
+c0104f9e page2pa
+c0104fb1 page_ref
+c0104fbb set_page_ref
+c0104fc9 default_init
+c0104ff7 default_init_memmap
+c0105153 default_alloc_pages
+c01052d3 merge_backward
+c01053a3 default_free_pages
+c010557f default_nr_free_pages
+c0105589 basic_check
+c0105a5e default_check
+00000000 pmm.c
+c010602a page2ppn
+c010603d page2pa
+c0106050 pa2page
+c0106092 page2kva
+c01060dc kva2page
+c0106120 pte2page
+c010615f pde2page
+c010617b page_ref
+c0106185 set_page_ref
+c0106193 page_ref_inc
+c01061aa page_ref_dec
+c01061c1 __intr_save
+c01061eb __intr_restore
+c0121a00 ts
+c0120a20 gdt
+c0120a50 gdt_pd
+c01061ff lgdt
+c0106243 gdt_init
+c0106335 init_pmm_manager
+c010636a init_memmap
+c0106458 page_init
+c0106809 enable_paging
+c0106843 boot_map_segment
+c0106936 boot_alloc_page
+c0106ec2 check_alloc_page
+c0106ee5 check_pgdir
+c01074cd check_boot_pgdir
+c0106c41 page_remove_pte
+c0107802 perm2str
+c0121a68 str.1949
+c0107850 get_pgtable_items
+00000000 swapfs.c
+c0107b85 page2ppn
+c0107b98 page2pa
+c0107bab page2kva
+00000000 string.c
+00000000 printfmt.c
+c010a6b0 error_string
+c01081b5 printnum
+c01082a6 getuint
+c01082f5 getint
+c0108708 sprintputch
+00000000 rand.c
+c0120a58 next
+c010324b vector242
+c0102ca2 vector119
+c0100900 print_kerninfo
+c0102b82 vector87
+c0102b79 vector86
+c01032b7 vector251
+c0107d51 strcpy
+c01010b7 ide_device_valid
+c0102ba6 vector91
+c010299c vector33
+c0102e8b vector162
+c01030ef vector213
+c0102c3f vector108
+c01029f6 vector43
+c0100000 kern_entry
+c0100d42 mon_backtrace
+c0102eaf vector165
+c0102f9f vector185
+c0102c7e vector115
+c0102cbd vector122
+c0106d07 page_insert
+c0102e43 vector156
+c010326f vector245
+c0102fcf vector189
+c01028c2 vector7
+c0102a98 vector61
+c010294b vector24
+c0102c5a vector111
+c0103053 vector200
+c0102ace vector67
+c0106e15 pgdir_alloc_page
+c0102d6b vector138
+c0102b0d vector74
+c010806a memmove
+c0102a74 vector57
+c0103373 mm_create
+c010873e snprintf
+c0102386 print_trapframe
+c01030fb vector214
+c0108360 vprintfmt
+c0102bee vector99
+c0106beb get_page
+c01032f3 __alltraps
+c0101e72 cons_getc
+c0102d8f vector141
+c0100491 is_kernel_panic
+c0102f03 vector172
+c0100a4a print_stackframe
+c010323f vector241
+c0121a74 pra_list_head
+c01032cf vector253
+c010289e vector3
+c0102895 vector2
+c0103197 vector227
+c01030cb vector210
+c0103173 vector224
+c01029e4 vector41
+c0120a00 swap_manager_fifo
+c0100276 cprintf
+c0102930 vector21
+c0102f3f vector177
+c0102c99 vector118
+c0102ae9 vector70
+c0102ae0 vector69
+c010320f vector237
+c0102ab3 vector64
+c0102966 vector27
+c010370a vmm_init
+c0102d23 vector132
+c0102fab vector186
+c010311f vector217
+c010368f mm_destroy
+c010810d memcpy
+c010288c vector1
+c0102f4b vector178
+c01029c9 vector38
+c0107af3 kfree
+c010321b vector238
+c010031a readline
+c0102d2f vector133
+c0102b04 vector73
+c0102db3 vector144
+c0109fb4 vpd
+c010002a kern_init
+c01032db vector254
+c0102c00 vector101
+c01030d7 vector211
+c0102f1b vector174
+c0103257 vector243
+c0102cf3 vector128
+c0102b4c vector81
+c01063f5 free_pages
+c01028ee vector13
+c0108767 vsnprintf
+c0102a3e vector51
+c0102905 vector16
+c0120a60 edata
+c0101df8 cons_init
+c010472a swap_in
+c010136b ide_write_secs
+c0121b50 pmm_manager
+c0103233 vector240
+c0102a59 vector54
+c010291e vector19
+c0119bfc __STAB_END__
+c0102baf vector92
+c0103263 vector244
+c01219cc swap_init_ok
+c0106235 load_esp0
+c0102d83 vector140
+c0102a08 vector45
+c0102b3a vector79
+c01031af vector229
+c01044d7 swap_init
+c0102e5b vector158
+c0101f3d pic_enable
+c0107bf5 swapfs_init
+c0121a80 check_rp
+c01029d2 vector39
+c0102ed3 vector168
+c01029ae vector35
+c0102c6c vector113
+c0119bfd __STABSTR_BEGIN__
+c0102cd8 vector125
+c01003dc __panic
+c0103113 vector216
+c0102aaa vector63
+c010295d vector26
+c0101c15 serial_intr
+c0102fff vector193
+c0103023 vector196
+c01000e3 grade_backtrace0
+c01030bf vector209
+c01028a7 vector4
+c0102eeb vector170
+c0102d53 vector136
+c01028d9 vector10
+c010309b vector206
+c01032e7 vector255
+c0102f6f vector181
+c0102a86 vector59
+c01000fd grade_backtrace
+c0102b70 vector85
+c0102b67 vector84
+c0102f87 vector183
+c0102e67 vector159
+c01030e3 vector212
+c0102a1a vector47
+c0107ecd strtol
+c01031a3 vector228
+c01029ed vector42
+c0102c75 vector114
+c0107d21 strnlen
+c0102f27 vector175
+c0102da7 vector143
+c0102d0b vector130
+c0109ef8 default_pmm_manager
+c010327b vector246
+c01028d2 vector9
+c0102d9b vector142
+c0102bf7 vector100
+c010305f vector201
+c01020f6 idt_init
+c010099d print_debuginfo
+c010342b find_vma
+c0121aa0 swap_in_seq_no
+c0102a8f vector60
+c0102942 vector23
+c0103203 vector236
+c01219e0 npage
+c0103df4 do_pgfault
+c01031c7 vector231
+c0102ac5 vector66
+c0102978 vector29
+c0107904 print_pgdir
+c0102d47 vector135
+c0100c68 kmonitor
+c0102b28 vector77
+c0102f63 vector180
+c010159f clock_init
+c01030b3 vector208
+c0102be5 vector98
+c0102bdc vector97
+c010642a nr_free_pages
+c0102f33 vector176
+c010300b vector194
+c0102993 vector32
+c0121b54 boot_cr3
+c0121b5c end
+c0103047 vector199
+c0102d17 vector131
+c01032c3 vector252
+c0102883 vector0
+c0107e9e strfind
+c0101e29 cons_putc
+c0121ae0 swap_out_seq_no
+c0108899 etext
+c0102dbf vector145
+c0102c36 vector107
+c01219e4 boot_pgdir
+c01029db vector40
+c01020a7 intr_enable
+c0102c09 vector102
+c0102a6b vector56
+c0102ad7 vector68
+c01028b9 vector6
+c01087c1 rand
+c0102cff vector129
+c010302f vector197
+c0102e13 vector152
+c0120600 __vectors
+c01031bb vector230
+c0107e15 strncmp
+c0106a8d get_pte
+c01010f7 ide_device_size
+c01029c0 vector37
+c0121b08 check_swap_addr
+c010308f vector205
+c0102e7f vector161
+c0107d91 strncpy
+c0102af2 vector71
+c0102e73 vector160
+c0103107 vector215
+c0102e4f vector157
+c01020ae intr_disable
+c0102563 print_regs
+c0102c63 vector112
+c01000a4 grade_backtrace2
+c0102f7b vector182
+c01028e7 vector12
+c010815d memcmp
+c0102c48 vector109
+c0102927 vector20
+c0102a50 vector53
+c0102915 vector18
+c0102bca vector95
+c010318b vector226
+c0102a2c vector49
+c01029ff vector44
+c0102b31 vector78
+c0102f0f vector173
+c0107c3d swapfs_read
+c0102c90 vector117
+c0102370 trap_in_kernel
+c01045b6 swap_set_unswappable
+c0102b55 vector82
+c010315b vector222
+c01028cb vector8
+c0102def vector149
+c010029c cputchar
+c010802a memset
+c01031d3 vector232
+c0101137 ide_read_secs
+c0102c2d vector106
+c0103143 vector220
+c0102b9d vector90
+c0102e97 vector163
+c0108880 srand
+c01031eb vector234
+c0104595 swap_map_swappable
+c0102aa1 vector62
+c0102954 vector25
+c010303b vector198
+c0102cab vector120
+c0100301 getchar
+c0106cce page_remove
+c0102a35 vector50
+c01028fc vector15
+c01219d0 swap_out_num
+c010833c printfmt
+c0102e07 vector151
+c0102b5e vector83
+c0102b94 vector89
+c0102b8b vector88
+c010286c trap
+c0102f57 vector179
+c01029a5 vector34
+c011d545 __STABSTR_END__
+c0102a11 vector46
+c0107dcb strcmp
+c0102d3b vector134
+c0103167 vector223
+c010312b vector218
+c01005f2 debuginfo_eip
+c0121b1c max_swap_offset
+c0103566 insert_vma_struct
+c0101f6a pic_init
+c010317f vector225
+c0102fb7 vector187
+c010697e pmm_init
+c0102981 vector30
+c0102cea vector127
+c0121a6c ticks
+c0102ff3 vector192
+c0102ebb vector166
+c0102b1f vector76
+c0102b16 vector75
+c0103017 vector195
+c0102dfb vector150
+c0102a7d vector58
+c0103293 vector248
+c0102cc6 vector123
+c0102bd3 vector96
+c010298a vector31
+c0103077 vector203
+c0106389 alloc_pages
+c0102d77 vector139
+c0102e1f vector153
+c0102ea3 vector164
+c0102cb4 vector121
+c01028b0 vector5
+c0102ec7 vector167
+c0102e37 vector155
+c010329f vector249
+c0109fb0 vpt
+c01032ab vector250
+c0102ccf vector124
+c0102c51 vector110
+c0103083 vector204
+c0121b20 swap_page
+c010330a __trapret
+c010024d vcprintf
+c0102d5f vector137
+c010044a __warn
+c0103287 vector247
+c0102939 vector22
+c010306b vector202
+c0102afb vector72
+c0102a62 vector55
+c01002b3 cputs
+c0120000 bootstacktop
+c0102ce1 vector126
+c0102abc vector65
+c010296f vector28
+c0102edf vector169
+c010457a swap_tick_event
+c01031df vector233
+c01045d4 swap_out
+c0107a58 kmalloc
+c01033ef vma_create
+c0102dd7 vector147
+c011e000 bootstack
+c0102c1b vector104
+c0121b44 free_area
+c0102c87 vector116
+c0107c9b swapfs_write
+c010a848 __STAB_BEGIN__
+c0121b34 check_ptep
+c0102a47 vector52
+c010290e vector17
+c0102f93 vector184
+c0107cf9 strlen
+c01219c8 pgfault_num
+c01030a7 vector207
+c0102fdb vector190
+c0100dae ide_init
+c0103227 vector239
+c0102bc1 vector94
+c0102bb8 vector93
+c0102fc3 vector188
+c0107e6b strchr
+c0102a23 vector48
+c0121a70 check_mm_struct
+c010455f swap_init_mm
+c01000be grade_backtrace1
+c0103137 vector219
+c0102de3 vector148
+c010314f vector221
+c0102b43 vector80
+c0102ef7 vector171
+c0102e2b vector154
+c01029b7 vector36
+c01031f7 vector235
+c0102c24 vector105
+c0100d30 mon_kerninfo
+c0121b58 pages
+c0102dcb vector146
+c0102fe7 vector191
+c0102c12 vector103
+c0100cd6 mon_help
+c01028e0 vector11
+c0106dc0 tlb_invalidate
+c01028f5 vector14
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/libs/printfmt.d lab3/obj/libs/printfmt.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/libs/printfmt.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/libs/printfmt.d	2018-03-16 23:03:47.317045883 +0800
@@ -0,0 +1,2 @@
+obj/libs/printfmt.o obj/libs/printfmt.d: libs/printfmt.c libs/defs.h \
+ libs/x86.h libs/error.h libs/stdio.h libs/stdarg.h libs/string.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/libs/printfmt.o and lab3/obj/libs/printfmt.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/libs/rand.d lab3/obj/libs/rand.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/libs/rand.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/libs/rand.d	2018-03-16 23:03:47.313045875 +0800
@@ -0,0 +1,2 @@
+obj/libs/rand.o obj/libs/rand.d: libs/rand.c libs/x86.h libs/defs.h \
+ libs/stdlib.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/libs/rand.o and lab3/obj/libs/rand.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/libs/string.d lab3/obj/libs/string.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/libs/string.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/libs/string.d	2018-03-16 23:03:47.329045906 +0800
@@ -0,0 +1,2 @@
+obj/libs/string.o obj/libs/string.d: libs/string.c libs/string.h \
+ libs/defs.h libs/x86.h
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/libs/string.o and lab3/obj/libs/string.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/obj/sign/tools/sign.d lab3/obj/sign/tools/sign.d
--- /home/amadeus/ucore_os_lab/labcodes/lab3/obj/sign/tools/sign.d	1970-01-01 08:00:00.000000000 +0800
+++ lab3/obj/sign/tools/sign.d	2018-03-16 23:03:47.365045974 +0800
@@ -0,0 +1 @@
+obj/sign/tools/sign.o obj/sign/tools/sign.d: tools/sign.c
Binary files /home/amadeus/ucore_os_lab/labcodes/lab3/obj/sign/tools/sign.o and lab3/obj/sign/tools/sign.o differ
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/.qemu.out lab3/.qemu.out
--- /home/amadeus/ucore_os_lab/labcodes/lab3/.qemu.out	1970-01-01 08:00:00.000000000 +0800
+++ lab3/.qemu.out	2018-03-16 23:03:50.685052254 +0800
@@ -0,0 +1,108 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc0108899 (phys)
+  edata  0xc0120a60 (phys)
+  end    0xc0121b5c (phys)
+Kernel executable memory footprint: 135KB
+ebp:0xc011ff48 eip:0xc0100a61 args:0x00010094 0x00010094 0xc011ff78 0xc01000b8
+    kern/debug/kdebug.c:309: print_stackframe+22
+ebp:0xc011ff58 eip:0xc0100d4d args:0x00000000 0x00000000 0x00000000 0xc011ffc8
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc011ff78 eip:0xc01000b8 args:0x00000000 0xc011ffa0 0xffff0000 0xc011ffa4
+    kern/init/init.c:57: grade_backtrace2+19
+ebp:0xc011ff98 eip:0xc01000da args:0x00000000 0xffff0000 0xc011ffc4 0x0000002a
+    kern/init/init.c:62: grade_backtrace1+27
+ebp:0xc011ffb8 eip:0xc01000f7 args:0x00000000 0xc010002a 0xffff0000 0xc010006d
+    kern/init/init.c:67: grade_backtrace0+19
+ebp:0xc011ffd8 eip:0xc0100118 args:0x00000000 0x00000000 0x00000000 0xc01088a0
+    kern/init/init.c:72: grade_backtrace+26
+ebp:0xc011fff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00
+    kern/init/init.c:32: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31965
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 7
+check_swap() succeeded!
+++ setup timer interrupts
+100 ticks
+End of Test.
+ebp:0xc011ff40 eip:0xc0100a61 args:0xc011ff78 0xc010026e 0xc011ff70 0xc01027bb
+    kern/debug/kdebug.c:309: print_stackframe+22
+ebp:0xc011ff50 eip:0xc01020e2 args:0xc0108cc5 0xc011ffb4 0xffffffff 0xc0128064
+    kern/trap/trap.c:20: print_ticks+44
+ebp:0xc011ff70 eip:0xc01027bb args:0xc011ff9c 0xc0100291 0xc0108caa 0xc011ffb4
+    kern/trap/trap.c:206: trap_dispatch+195
+ebp:0xc011ff90 eip:0xc010287d args:0xc011ff9c 0x0000807c 0x00010094 0xc011fff8
+    kern/trap/trap.c:244: trap+16
+ebp:0xc011fff8 eip:0xc0103309 args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00
+    kern/trap/trapentry.S:24: <unknown>+0
+kernel panic at kern/trap/trap.c:20:
+    EOT: kernel seems ok.
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P /home/amadeus/ucore_os_lab/labcodes/lab3/tools/gdbinit lab3/tools/gdbinit
--- /home/amadeus/ucore_os_lab/labcodes/lab3/tools/gdbinit	2018-03-15 16:55:42.064056596 +0800
+++ lab3/tools/gdbinit	2018-03-15 16:57:30.318792273 +0800
@@ -1,3 +1,3 @@
 file bin/kernel
 target remote :1234
-break kern_init
+break default_check
